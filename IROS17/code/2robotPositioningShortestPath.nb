(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    291082,       6299]
NotebookOptionsPosition[    287368,       6185]
NotebookOutlinePosition[    288994,       6236]
CellTagsIndexPosition[    288658,       6224]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Your Title Here", "DemoTitle"],

Cell[CellGroupData[{

Cell["", "InitializationSection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   StyleBox[
    RowBox[{
    "wallFrictionMoveDir", " ", "just", " ", "rotates", " ", "or", " ", 
     "unrotates", " ", "the", " ", "coordinate", " ", "frame"}], "Subsection"],
    "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"wallFrictionMoveDir", "[", 
     RowBox[{
     "dir_", ",", "s1_", ",", "s2_", ",", "g1_", ",", "g2_", ",", "moves_", 
      ",", "pm1_", ",", " ", "pm2_", ",", " ", "\[Epsilon]_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\[CapitalDelta]ex", ",", " ", "\[CapitalDelta]ey", ",", " ", 
        RowBox[{"path", " ", "=", " ", "moves"}], ",", " ", 
        RowBox[{"path1", "=", " ", "pm1"}], ",", " ", 
        RowBox[{"path2", "=", " ", "pm2"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"s1", " ", "=", " ", 
          RowBox[{
          "starting", " ", "position", " ", "of", " ", "robot", " ", "1", " ",
            "for", " ", "this", " ", "move"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"s2", " ", "=", " ", 
          RowBox[{
          "starting", " ", "position", " ", "of", " ", "robot", " ", "2", " ",
            "for", " ", "this", " ", "move"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
         "moves", " ", "to", " ", "contact", " ", "wall", " ", "in", " ", 
          "direction", " ", 
          RowBox[{
          "dir", ".", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", "  ", "If"}], " ", "one", " ", "robot", " ",
           "is", " ", "already", " ", "touching", " ", "the", " ", "wall", 
          " ", "in", " ", "direction", " ", "dir"}]}], ",", " ", 
        RowBox[{
         RowBox[{"just", " ", "moves", " ", "the", " ", "second", " ", 
          RowBox[{
          "robot", ".", " ", "\[IndentingNewLine]", " ", "Movements"}], " ", 
          "are", " ", "chosen", " ", "to", " ", "minimize"}], " ", "|", 
         "\[CapitalDelta]ex", "|", " ", "and", " ", "|", "\[CapitalDelta]ey", 
         "|"}], ",", " ", 
        RowBox[{
        "the", " ", "error", " ", "from", " ", "the", " ", "desired", " ", 
         "spacing", " ", "of", " ", "the", " ", "robots"}], ",", " ", 
        RowBox[{
         RowBox[{"where", " ", "\[CapitalDelta]ex"}], " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"g2x", "-", "g1x"}], ")"}], " ", "-", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"r2x", "-", "r1x"}], ")"}], "  ", "and", " ", 
            "\[CapitalDelta]ey"}]}], " ", "=", " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"g2y", "-", "g1y"}], ")"}], " ", "-", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"r2y", "-", "r1y"}], ")"}], " ", ".", "  ", "If"}], " ",
             "robots", " ", "would", " ", "end", " ", "up", " ", 
            "overlapping"}]}]}]}], ",", " ", 
        RowBox[{
         RowBox[{"returns", " ", "multiple", " ", "possibilities"}], " ", "+", 
         RowBox[{"/", 
          RowBox[{"-", " ", "\[Epsilon]"}]}]}]}], "  ", "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
         RowBox[{"STEP", " ", "1"}], ":", " ", 
         RowBox[{"is", " ", "base", " ", "case", " ", "1", " ", 
          RowBox[{"possible", "?", "  ", "If"}], " ", "so"}]}], ",", " ", 
        RowBox[{"do", " ", "it", " ", "and", " ", "return"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CapitalDelta]ex", ",", " ", "\[CapitalDelta]ey"}], "}"}], 
        " ", "=", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"g2", "-", "g1"}], ")"}], "-", 
         RowBox[{"(", 
          RowBox[{"s2", "-", "s1"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"-", "0.00001"}], "\[LessEqual]", " ", "\[CapitalDelta]ex",
            "\[LessEqual]", " ", "0.00001"}], " ", "&&", " ", 
          RowBox[{
           RowBox[{"-", "0.00001"}], "\[LessEqual]", " ", "\[CapitalDelta]ey",
            " ", "<", " ", "0.00001"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"AppendTo", "[", 
           RowBox[{"path", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
               "g2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               "-", "  ", 
               RowBox[{
               "s2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
               ",", " ", 
              RowBox[{
               RowBox[{
               "g2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               "-", " ", 
               RowBox[{
               "s2", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}]}]}], "}"}]}], "]"}], ";", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"path1", ",", "  ", "g1"}], "]"}], ";", " ", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"path2", ",", " ", "g2"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", " ", 
           RowBox[{"{", " ", 
            RowBox[{
             RowBox[{"distanceMoved", "[", " ", "path", "]"}], ",", "g1", ",",
              "g2", ",", "path", ",", "path1", ",", "path2", ",", " ", 
             "True"}], " ", "}"}], "  ", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"OTHERWISE", ",", " ", 
         RowBox[{
         "move", " ", "in", " ", "the", " ", "desired", " ", "direction", " ",
           "to", " ", "contact", " ", "a", " ", 
          RowBox[{"wall", ".", "  ", "\[IndentingNewLine]", 
           RowBox[{"We", "'"}]}], "ll", " ", "need", " ", "to", " ", "rotate",
           " ", "the", " ", "coordinate", " ", "frames", " ", "so", " ", 
          "the", " ", "movement", " ", "is", " ", "up"}], ",", " ", 
         RowBox[{
         "and", " ", "ensure", " ", "robot", " ", "1", " ", "is", " ", "the", 
          " ", "first", " ", "to", " ", 
          RowBox[{"contact", ".", "\[IndentingNewLine]", "then"}], " ", 
          RowBox[{"we", "'"}], "ll", " ", "call", " ", "wallFrictionMoveUp"}],
          ",", " ", "\[IndentingNewLine]", 
         RowBox[{"then", " ", "we", " ", "take", " ", "the", " ", "answer"}], 
         ",", " ", 
         RowBox[{
         "and", " ", "reassign", " ", "robot", " ", "1", " ", "and", " ", "2",
           " ", "to", " ", "match", " ", "original", "\[IndentingNewLine]", 
          "then", " ", "rotate", " ", "answer", " ", "into", " ", "original", 
          " ", "coordinate", " ", "frame"}]}], "*)"}], "\[IndentingNewLine]", 
       
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "r1", ",", "r2", ",", "newPathEntries", ",", "s1t", ",", "s2t", ",",
            "g1t", ",", "g2t", ",", "movest", ",", " ", "pm1st", ",", " ", 
           "pm2st"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"if", " ", "move", " ", "is", " ", "up"}], ",", " ", 
           RowBox[{"call", " ", "wallFrictionMoveUp"}], ",", " ", 
           RowBox[{"otherwise", " ", "rotate", " ", "frame"}], ",", " ", 
           RowBox[{"then", " ", "unrotate", " ", "answers"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"dir", "\[Equal]", "\"\<u\>\""}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{"Print", "[", "\"\<up selected:\>\"", "]"}], ";"}], 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"newPathEntries", "=", " ", 
              RowBox[{"wallFrictionMoveUp", "[", 
               RowBox[{
               "s1", ",", "s2", ",", "g1", ",", "g2", ",", "moves", ",", 
                "pm1", ",", " ", "pm2", ",", "\[Epsilon]"}], "]"}]}], ";"}]}],
            "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"if", " ", "move", " ", "is", " ", "down"}], ",", " ", 
            RowBox[{"rotate", " ", "frame", " ", "180", " ", "deg"}], ",", 
            " ", 
            RowBox[{"then", " ", "unrotate", " ", "answers"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"dir", "\[Equal]", "\"\<d\>\""}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"s1t", ",", "s2t", ",", "g1t", ",", "g2t"}], "}"}], 
              "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate180", ",", 
                RowBox[{"{", 
                 RowBox[{"s1", ",", "s2", ",", "g1", ",", "g2"}], "}"}]}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"movest", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate180inplace", ",", "moves"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"pm1st", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate180", ",", "pm1"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"pm2st", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate180", ",", "pm2"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"newPathEntries", "=", " ", 
              RowBox[{"wallFrictionMoveUp", "[", 
               RowBox[{
               "s1t", ",", "s2t", ",", "g1t", ",", "g2t", ",", "movest", ",", 
                "pm1st", ",", " ", "pm2st", ",", "\[Epsilon]"}], "]"}]}], ";",
              "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"undo", " ", "the", " ", "change"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "newPathEntries", "\[LeftDoubleBracket]", "2", 
               "\[RightDoubleBracket]"}], " ", "=", " ", 
              RowBox[{"rotate180", "[", 
               RowBox[{
               "newPathEntries", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "newPathEntries", "\[LeftDoubleBracket]", "3", 
               "\[RightDoubleBracket]"}], " ", "=", " ", 
              RowBox[{"rotate180", "[", 
               RowBox[{
               "newPathEntries", "\[LeftDoubleBracket]", "3", 
                "\[RightDoubleBracket]"}], " ", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "newPathEntries", "\[LeftDoubleBracket]", "4", 
               "\[RightDoubleBracket]"}], " ", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate180inplace", ",", " ", 
                RowBox[{
                "newPathEntries", "\[LeftDoubleBracket]", "4", 
                 "\[RightDoubleBracket]"}]}], " ", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "newPathEntries", "\[LeftDoubleBracket]", "5", 
               "\[RightDoubleBracket]"}], " ", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate180", ",", " ", 
                RowBox[{
                "newPathEntries", "\[LeftDoubleBracket]", "5", 
                 "\[RightDoubleBracket]"}]}], " ", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "newPathEntries", "\[LeftDoubleBracket]", "6", 
               "\[RightDoubleBracket]"}], " ", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate180", ",", " ", 
                RowBox[{
                "newPathEntries", "\[LeftDoubleBracket]", "6", 
                 "\[RightDoubleBracket]"}]}], " ", "]"}]}], ";"}]}], 
           "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"if", " ", "move", " ", "is", " ", "right"}], ",", " ", 
            RowBox[{"rotate", " ", "frame", " ", "90", " ", "deg"}], ",", " ", 
            RowBox[{"then", " ", "unrotate", " ", "answers"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"dir", "\[Equal]", "\"\<r\>\""}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"s1t", ",", "s2t", ",", "g1t", ",", "g2t"}], "}"}], 
              "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate90", ",", 
                RowBox[{"{", 
                 RowBox[{"s1", ",", "s2", ",", "g1", ",", "g2"}], "}"}]}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"movest", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate90inplace", ",", "moves"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"pm1st", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate90", ",", "pm1"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"pm2st", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate90", ",", "pm2"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"newPathEntries", "=", " ", 
              RowBox[{"wallFrictionMoveUp", "[", 
               RowBox[{
               "s1t", ",", "s2t", ",", "g1t", ",", "g2t", ",", "movest", ",", 
                "pm1st", ",", " ", "pm2st", ",", "\[Epsilon]"}], "]"}]}], ";",
              "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"undo", " ", "the", " ", "change"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "newPathEntries", "\[LeftDoubleBracket]", "2", 
               "\[RightDoubleBracket]"}], " ", "=", " ", 
              RowBox[{"rotate270", "[", 
               RowBox[{
               "newPathEntries", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "newPathEntries", "\[LeftDoubleBracket]", "3", 
               "\[RightDoubleBracket]"}], " ", "=", " ", 
              RowBox[{"rotate270", "[", 
               RowBox[{
               "newPathEntries", "\[LeftDoubleBracket]", "3", 
                "\[RightDoubleBracket]"}], " ", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "newPathEntries", "\[LeftDoubleBracket]", "4", 
               "\[RightDoubleBracket]"}], " ", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate270inplace", ",", " ", 
                RowBox[{
                "newPathEntries", "\[LeftDoubleBracket]", "4", 
                 "\[RightDoubleBracket]"}]}], " ", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "newPathEntries", "\[LeftDoubleBracket]", "5", 
               "\[RightDoubleBracket]"}], " ", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate270", ",", " ", 
                RowBox[{
                "newPathEntries", "\[LeftDoubleBracket]", "5", 
                 "\[RightDoubleBracket]"}]}], " ", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "newPathEntries", "\[LeftDoubleBracket]", "6", 
               "\[RightDoubleBracket]"}], " ", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate270", ",", " ", 
                RowBox[{
                "newPathEntries", "\[LeftDoubleBracket]", "6", 
                 "\[RightDoubleBracket]"}]}], " ", "]"}]}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"if", " ", "move", " ", "is", " ", "left"}], ",", " ", 
            RowBox[{"rotate", " ", "frame", " ", "270", " ", "deg"}], ",", 
            " ", 
            RowBox[{"then", " ", "unrotate", " ", "answers"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"dir", "\[Equal]", "\"\<l\>\""}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"s1t", ",", "s2t", ",", "g1t", ",", "g2t"}], "}"}], 
              "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate270", ",", 
                RowBox[{"{", 
                 RowBox[{"s1", ",", "s2", ",", "g1", ",", "g2"}], "}"}]}], 
               "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"movest", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate270inplace", ",", "moves"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"pm1st", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate270", ",", "pm1"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"pm2st", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate270", ",", "pm2"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"newPathEntries", "=", " ", 
              RowBox[{"wallFrictionMoveUp", "[", 
               RowBox[{
               "s1t", ",", "s2t", ",", "g1t", ",", "g2t", ",", "movest", ",", 
                "pm1st", ",", " ", "pm2st", ",", "\[Epsilon]"}], "]"}]}], ";",
              "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"undo", " ", "the", " ", "change"}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "newPathEntries", "\[LeftDoubleBracket]", "2", 
               "\[RightDoubleBracket]"}], " ", "=", " ", 
              RowBox[{"rotate90", "[", 
               RowBox[{
               "newPathEntries", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "newPathEntries", "\[LeftDoubleBracket]", "3", 
               "\[RightDoubleBracket]"}], " ", "=", " ", 
              RowBox[{"rotate90", "[", 
               RowBox[{
               "newPathEntries", "\[LeftDoubleBracket]", "3", 
                "\[RightDoubleBracket]"}], " ", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "newPathEntries", "\[LeftDoubleBracket]", "4", 
               "\[RightDoubleBracket]"}], " ", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate90inplace", ",", " ", 
                RowBox[{
                "newPathEntries", "\[LeftDoubleBracket]", "4", 
                 "\[RightDoubleBracket]"}]}], " ", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "newPathEntries", "\[LeftDoubleBracket]", "5", 
               "\[RightDoubleBracket]"}], " ", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate90", ",", " ", 
                RowBox[{
                "newPathEntries", "\[LeftDoubleBracket]", "5", 
                 "\[RightDoubleBracket]"}]}], " ", "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
              "newPathEntries", "\[LeftDoubleBracket]", "6", 
               "\[RightDoubleBracket]"}], " ", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"rotate90", ",", " ", 
                RowBox[{
                "newPathEntries", "\[LeftDoubleBracket]", "6", 
                 "\[RightDoubleBracket]"}]}], " ", "]"}]}]}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"Return", " ", "[", "newPathEntries", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}]}], 
     RowBox[{"(*", 
      RowBox[{"end", " ", "inner", " ", "module"}], "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], 
   RowBox[{"(*", 
    RowBox[{"end", " ", "outer", " ", "module"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    StyleBox[
     RowBox[{"Algorithm", " ", "wallFrictionMoveUp"}], "Subsection"], 
    StyleBox[" ", "Subsection"], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"wallFrictionMoveUp", "[", 
     RowBox[{
     "r1in_", ",", "r2in_", ",", "g1in_", ",", "g2in_", ",", "moves_", ",", 
      "pm1_", ",", " ", "pm2_", " ", ",", " ", "\[Epsilon]_"}], "]"}], ":=", 
    " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "r1", ",", "r2", ",", "g1", ",", "g2", ",", "\[CapitalDelta]gx", ",", 
        "\[CapitalDelta]gy", ",", "m1", ",", "m2", ",", "r1out", ",", "r2out",
         ",", "\[CapitalDelta]tgx", ",", "\[CapitalDelta]tgy", ",", 
        "\[IndentingNewLine]", "\[CapitalDelta]ey", " ", ",", 
        "\[CapitalDelta]ex", " ", ",", "\[IndentingNewLine]", 
        RowBox[{"L", "=", " ", "1"}], " ", 
        RowBox[{"(*", 
         RowBox[{"size", " ", "of", " ", "workspace"}], "*)"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"path1", "=", " ", "pm1"}], 
        RowBox[{"(*", 
         RowBox[{"desired", " ", "moves", " ", "for", " ", "r1"}], "*)"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"path2", "=", " ", "pm2"}], 
        RowBox[{"(*", 
         RowBox[{"desired", " ", "moves", " ", "for", " ", "r2"}], "*)"}], 
        ",", "\[IndentingNewLine]", "path", " ", ",", "\[IndentingNewLine]", 
        RowBox[{"isMirrored", " ", "=", " ", "False"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"isFlipped", " ", "=", " ", "False"}]}], 
       "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "robot", " ", "1", " ", "must", " ", "be", " ", "the", " ", "top", 
         " ", "left", " ", 
         RowBox[{"robot", ".", " ", "If"}], " ", "it", " ", "is", " ", "not", 
         " ", "the", " ", "top", " ", "robot"}], ",", " ", 
        RowBox[{"flip", " ", "entries"}], ",", " ", 
        RowBox[{
        "if", " ", "it", " ", "is", " ", "not", " ", "the", " ", "left", " ", 
         "robot"}], ",", " ", 
        RowBox[{"mirror", " ", 
         RowBox[{"entries", ".", " ", "Remember"}], " ", "to", " ", "switch", 
         " ", "again", " ", "at", " ", 
         RowBox[{"end", "!"}], "\[IndentingNewLine]", " ", "then", " ", 
         "move", " ", "robot", "  ", "while", " ", "first", " ", "robot", " ",
          "is", " ", "touching", " ", "wall"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "r1", ",", "r2", ",", "g1", ",", "g2", ",", "isMirrored", ",", 
          "isFlipped", ",", "path"}], "}"}], "=", " ", 
        RowBox[{"ensurer1r2", "[", 
         RowBox[{
         "r1in", ",", "r2in", ",", "g1in", ",", "g2in", ",", "moves"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CapitalDelta]gx", ",", "\[CapitalDelta]gy"}], "}"}], " ", 
        "=", " ", 
        RowBox[{"g2", "-", "g1"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
         "If", " ", "the", " ", "second", " ", "robot", " ", "is", " ", 
          "already", " ", "touching", " ", "the", " ", "up", " ", "wall"}], 
         ",", " ", 
         RowBox[{"just", " ", 
          RowBox[{"return", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
          "r2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
          "\[Equal]", " ", "1"}], ",", " ", 
         RowBox[{"Return", " ", "[", 
          RowBox[{"{", 
           RowBox[{
           "Infinity", ",", " ", "r1", ",", " ", "r2", ",", " ", "path", ",", 
            " ", "path1", ",", " ", "path2", " ", ",", " ", "False"}], "}"}], 
          "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"if", " ", "the", " ", "goal", " ", "\[CapitalDelta]gx"}], 
         ",", 
         RowBox[{"\[CapitalDelta]gy", " ", "is", " ", "achievable"}], ",", 
         " ", 
         RowBox[{"do", " ", "it", " ", "in", " ", "one", " ", 
          RowBox[{"move", ".", " ", "Otherwise"}]}], ","}], " ", "*)"}], " ", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
           "r2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
           " ", 
           RowBox[{
           "r1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
           "1"}], 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"+", "2"}], "\[Epsilon]"}], "*)"}], ">", "   ", 
          "\[CapitalDelta]gx"}], " ", ",", " ", 
         RowBox[{"\[CapitalDelta]tgx", " ", "=", " ", 
          RowBox[{
           RowBox[{
           "r2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
           " ", 
           RowBox[{
           "r1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
           "1"}]}], 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"+", "2"}], "\[Epsilon]"}], "*)"}], ",", "  ", 
         RowBox[{
         "\[CapitalDelta]tgx", " ", "=", "  ", "\[CapitalDelta]gx"}]}], "]"}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", " ", 
        RowBox[{
         RowBox[{"\[CapitalDelta]gy", " ", ">", " ", "0"}], ",", "  ", 
         RowBox[{"\[CapitalDelta]tgy", " ", "=", " ", "0"}], ",", " ", 
         RowBox[{"\[CapitalDelta]tgy", " ", "=", " ", "\[CapitalDelta]gy"}]}],
         "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"\[CapitalDelta]gy", "  ", "<", " ", 
          RowBox[{
           RowBox[{
           "r2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "-", 
           " ", 
           RowBox[{
           "r1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
         ",", "  ", 
         RowBox[{"\[CapitalDelta]tgy", " ", "=", " ", 
          RowBox[{
           RowBox[{
           "r2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "-", 
           " ", 
           RowBox[{
           "r1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
         ",", ",", " ", 
         RowBox[{"\[CapitalDelta]tgy", " ", "=", " ", "\[CapitalDelta]gy"}]}],
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
            "r2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-",
             " ", 
            RowBox[{
            "r1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-",
             "1", "+", " ", 
            RowBox[{"2", "\[Epsilon]"}]}], "\[LessEqual]", "  ", 
           "\[CapitalDelta]tgx", " ", "\[LessEqual]", "  ", 
           RowBox[{"1", " ", "-", 
            RowBox[{"2", "\[Epsilon]"}]}]}], " ", "&&", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
            "r2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "-",
             " ", 
            RowBox[{
            "r1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
           " ", "\[LessEqual]", " ", "\[CapitalDelta]tgy", "\[LessEqual]", 
           "  ", "0"}]}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"in", " ", "Achievable", " ", "range"}], "*)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "move", " ", "r1", " ", "and", " ", "r2", " ", "so", " ", "that", 
           " ", "r1", " ", "will", " ", "touch", " ", "the", " ", "up", " ", 
           "wall", " ", "in", " ", "the", " ", "line", " ", "of", " ", "the", 
           " ", "goal"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"m1", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              FractionBox[
               RowBox[{"1", "-", 
                RowBox[{
                "r1", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], 
               RowBox[{"2", "-", 
                RowBox[{
                "g1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                "-", " ", 
                RowBox[{
                "r1", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}]], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                "g1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                "-", 
                RowBox[{
                "r1", "\[LeftDoubleBracket]", "1", 
                 "\[RightDoubleBracket]"}]}], ")"}]}], ",", 
             RowBox[{"1", "-", 
              RowBox[{
              "r1", "\[LeftDoubleBracket]", "2", 
               "\[RightDoubleBracket]"}]}]}], "}"}]}], ";"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"not", " ", "in", " ", "achievable", " ", "range"}], "*)"}],
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "move", " ", "the", " ", "shortest", " ", "path", " ", "to", " ", 
           "the", " ", "wall"}], "*)"}], "\[IndentingNewLine]", " ", 
         RowBox[{
          RowBox[{"m1", " ", "=", " ", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"1", "-", " ", 
              RowBox[{
              "r1", "\[LeftDoubleBracket]", "2", 
               "\[RightDoubleBracket]"}]}]}], "}"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Check", " ", "the", " ", "boundaries"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
           "r2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
           " ", 
           RowBox[{
           "m1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          " ", ">", "1"}], " ", ",", " ", 
         RowBox[{
          RowBox[{
          "m1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
          "=", " ", 
          RowBox[{"1", "-", 
           RowBox[{
           "r2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}]}],
         "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
           "r1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
           " ", 
           RowBox[{
           "m1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "<", "0"}], ",", " ", 
         RowBox[{
          RowBox[{
          "m1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
          "=", " ", 
          RowBox[{"-", 
           RowBox[{
           "r1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}]}],
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
            "r1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
            RowBox[{
            "m1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+",
             "\[CapitalDelta]tgx"}], " ", ">", " ", "1"}], "&&", " ", 
          RowBox[{"\[CapitalDelta]tgx", " ", ">", "0"}]}], ",", " ", 
         RowBox[{
          RowBox[{
          "m1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-=", 
          " ", 
          RowBox[{"\[CapitalDelta]tgx", " ", "+", " ", 
           RowBox[{
           "r1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
           " ", 
           RowBox[{
           "m1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
           "1"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
            "r1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
            RowBox[{
            "m1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+",
             "\[CapitalDelta]tgx"}], "<", "0"}], " ", "&&", " ", 
          RowBox[{"\[CapitalDelta]tgx", "<", "0"}]}], ",", 
         RowBox[{
          RowBox[{
          "m1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", "+=",
           " ", 
          RowBox[{
           RowBox[{"Abs", "[", "\[CapitalDelta]tgx", "]"}], "-", 
           RowBox[{
           "r1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
           
           RowBox[{
           "m1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}]}],
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
          "r1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], " ", 
          "\[Equal]", " ", "1"}], ",", " ", 
         RowBox[{"m1", " ", "=", " ", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
         RowBox[{"If", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{
            "m1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            "\[Equal]", "0"}], ",", "  ", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                "r1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                "\[Equal]", " ", "1"}], " ", "||", " ", 
               RowBox[{
                RowBox[{
                "r2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                "\[Equal]", " ", "1"}]}], ",", " ", 
              RowBox[{
               RowBox[{
               "m1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-=",
                " ", "\[Epsilon]"}]}], "]"}], ";", " ", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                "r1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                "\[Equal]", " ", "0"}], "||", " ", 
               RowBox[{
                RowBox[{
                "r2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                "\[Equal]", " ", "0"}]}], ",", " ", 
              RowBox[{
               RowBox[{
               "m1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               " ", "+=", " ", "\[Epsilon]"}]}], "]"}]}]}], "]"}]}], "]"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"r1", " ", "+=", " ", "m1"}], ";", " ", 
       RowBox[{"r2", "+=", " ", "m1"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CapitalDelta]ex", ",", " ", "\[CapitalDelta]ey"}], "}"}], 
        " ", "=", " ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CapitalDelta]tgx", ",", " ", "\[CapitalDelta]tgy"}], 
          "}"}], "-", 
         RowBox[{"(", 
          RowBox[{"r2", "-", "r1"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "move", " ", "r2", " ", "to", " ", "get", " ", "correct", " ", 
         "spacing"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"\[CapitalDelta]ex", " ", "\[GreaterEqual]", "  ", "0"}], 
         " ", ",", " ", 
         RowBox[{"m2", " ", "=", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Min", "[", 
             RowBox[{
              RowBox[{"\[CapitalDelta]tgx", "-", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                 "r2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                  "-", 
                 RowBox[{
                 "r1", "\[LeftDoubleBracket]", "1", 
                  "\[RightDoubleBracket]"}]}], ")"}]}], ",", " ", 
              RowBox[{"1", "-", 
               RowBox[{
               "r2", "\[LeftDoubleBracket]", "1", 
                "\[RightDoubleBracket]"}]}]}], "]"}], ",", 
            RowBox[{"\[CapitalDelta]tgy", "-", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
               "r2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               "-", 
               RowBox[{
               "r1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
               ")"}]}]}], " ", "}"}]}], ",", " ", 
         RowBox[{"m2", " ", "=", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Max", "[", 
             RowBox[{
              RowBox[{"\[CapitalDelta]tgx", "-", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                 "r2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
                  "-", 
                 RowBox[{
                 "r1", "\[LeftDoubleBracket]", "1", 
                  "\[RightDoubleBracket]"}]}], ")"}]}], ",", " ", 
              RowBox[{"-", 
               RowBox[{
               "r2", "\[LeftDoubleBracket]", "1", 
                "\[RightDoubleBracket]"}]}]}], "]"}], ",", 
            RowBox[{"\[CapitalDelta]tgy", "-", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
               "r2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               "-", 
               RowBox[{
               "r1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
               ")"}]}]}], " ", "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "Check", " ", "if", " ", "the", " ", "robots", " ", "are", " ", "in", 
         " ", "\[Epsilon]", " ", "difference", " ", "with", " ", "each", " ", 
         "other"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
            "r1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "-", 
            RowBox[{"\[Epsilon]", "/", "2"}]}], "\[LessEqual]", " ", 
           RowBox[{
            RowBox[{
            "r2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ",
             "+", 
            RowBox[{
            "m2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
           " ", "\[LessEqual]", " ", 
           RowBox[{
            RowBox[{
            "r1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
            RowBox[{"\[Epsilon]", "/", "2"}]}]}], "&&", " ", 
          RowBox[{
           RowBox[{
           "r1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
           "\[Equal]", "  ", 
           RowBox[{
            RowBox[{
            "r2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "+",
             " ", 
            RowBox[{
            "m2", "\[LeftDoubleBracket]", "2", 
             "\[RightDoubleBracket]"}]}]}]}], " ", ",", " ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
             "r2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
             "+", " ", 
             RowBox[{
             "m2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
            ">", "  ", 
            RowBox[{"L", "/", "2"}]}], ",", " ", 
           RowBox[{
            RowBox[{
            "m2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ",
             "+=", 
            RowBox[{
             RowBox[{
             "r1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
             "+", "\[Epsilon]", "-", 
             RowBox[{
             "r2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
             "-", " ", 
             RowBox[{
             "m2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}],
            ",", " ", 
           RowBox[{
            RowBox[{
            "m2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ",
             "+=", 
            RowBox[{
             RowBox[{
             "r1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
             "-", "\[Epsilon]", "-", 
             RowBox[{
             "r2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
             "-", " ", 
             RowBox[{
             "m2", "\[LeftDoubleBracket]", "1", 
              "\[RightDoubleBracket]"}]}]}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
          "r2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], " ", 
          "\[Equal]", " ", "1"}], ",", " ", 
         RowBox[{"m2", " ", "=", " ", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"m1", "\[NotEqual]", " ", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"Add", " ", "m1"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"AppendTo", "[", 
           RowBox[{"path", ",", " ", "m1"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"r1out", ",", "r2out"}], "}"}], "=", "  ", 
           RowBox[{"returnr1r2", "[", 
            RowBox[{
            "isFlipped", ",", "isMirrored", ",", " ", "r1", ",", "r2"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"path1", ",", " ", "r1out"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"path2", ",", "r2out"}], "]"}], ";"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Add", " ", "m2"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"r2", " ", "+=", " ", "m2"}], ";", "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"path", ",", " ", "m2"}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"r1out", ",", "r2out"}], "}"}], "=", "  ", 
        RowBox[{"returnr1r2", "[", 
         RowBox[{"isFlipped", ",", "isMirrored", ",", " ", "r1", ",", "r2"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"path1", ",", " ", "r1out"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"path2", ",", "r2out"}], "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "Change", " ", "the", " ", "path", " ", "back", " ", "if", " ", "it", 
         " ", "was", " ", "mirrored"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"isMirrored", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"path", " ", "=", " ", 
           RowBox[{"Map", "[", 
            RowBox[{"mirrorInplace", ",", " ", "path"}], "]"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"If", "[", " ", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"-", "0.00001"}], "<", 
              RowBox[{
              "m2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              "<", "0.00001"}], " ", "&&", " ", 
             RowBox[{
              RowBox[{"-", "0.00001"}], "<", 
              RowBox[{
              "m2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
              "<", "0.00001"}]}], ",", " ", "Infinity", ",", 
            RowBox[{"distanceMoved", "[", " ", "path", "]"}]}], "]"}], ",", 
          "r1out", ",", "r2out", ",", "path", ",", "path1", ",", "path2", " ",
           ",", "False"}], " ", "}"}], "  ", "]"}]}]}], "\[IndentingNewLine]",
      "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Undoing", " ", "the", " ", "mirroring", " ", "and", " ", "flipping"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"returnr1r2", "[", 
     RowBox[{"isFlipped_", ",", "isMirrored_", ",", " ", "r1_", ",", "r2_"}], 
     "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"r1out", ",", " ", "r2out"}], "}"}], ",", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"isMirrored", ",", 
         RowBox[{"If", "[", 
          RowBox[{"isFlipped", ",", 
           RowBox[{
            RowBox[{"r1out", "=", " ", 
             RowBox[{"mirror", "[", "r2", "]"}]}], ";", 
            RowBox[{"r2out", "=", 
             RowBox[{"mirror", "[", "r1", "]"}]}]}], ",", 
           RowBox[{
            RowBox[{"r1out", "=", " ", 
             RowBox[{"mirror", "[", "r1", "]"}]}], ";", " ", 
            RowBox[{"r2out", " ", "=", " ", 
             RowBox[{"mirror", "[", "r2", "]"}]}]}]}], "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{"isFlipped", ",", 
           RowBox[{
            RowBox[{"r1out", "=", " ", "r2"}], ";", " ", 
            RowBox[{"r2out", "=", "r1"}]}], ",", 
           RowBox[{
            RowBox[{"r1out", "=", "r1"}], ";", 
            RowBox[{"r2out", "=", "r2"}]}]}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", " ", "[", 
        RowBox[{"{", 
         RowBox[{"r1out", ",", "r2out"}], "}"}], "]"}]}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Doing", " ", "mirroring", " ", "and", " ", "flipping"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ensurer1r2", "[", 
     RowBox[{
     "r1in_", ",", " ", "r2in_", ",", "g1in_", ",", "g2in_", ",", "moves_"}], 
     "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "r1", ",", "r2", ",", "isFlipped", ",", "isMirrored", ",", "g1", ",", 
        "g2", ",", "path"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"isFlipped", "=", " ", "False"}], ";", "\[IndentingNewLine]", 
       RowBox[{"isMirrored", "=", " ", "False"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
          "r1in", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "<", 
          RowBox[{
          "r2in", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
            "r1in", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            ">", 
            RowBox[{
            "r2in", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"r1", ",", "r2", ",", "g1", ",", "g2"}], "}"}], "=", 
             RowBox[{"{", 
              RowBox[{"r2in", ",", "r1in", ",", "g2in", ",", "g1in"}], 
              "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"isFlipped", " ", "=", " ", "True"}], ";", " ", 
            RowBox[{"path", " ", "=", " ", "moves"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"r1", ",", "r2", ",", "g1", ",", "g2"}], "}"}], "=", 
             " ", 
             RowBox[{"Map", "[", 
              RowBox[{"mirror", ",", " ", 
               RowBox[{"{", 
                RowBox[{"r2in", ",", "r1in", ",", "g2in", ",", "g1in"}], 
                "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"path", " ", "=", " ", 
             RowBox[{"Map", "[", 
              RowBox[{"mirrorInplace", ",", " ", "moves"}], "]"}]}], ";", 
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"isFlipped", " ", "=", " ", "True"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"isMirrored", " ", "=", " ", "True"}]}]}], "]"}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
             "r1in", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
             ">", 
             RowBox[{
             "r2in", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
             ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"r1", ",", "r2", ",", "g1", ",", "g2"}], "}"}], "=", 
              " ", 
              RowBox[{"Map", "[", 
               RowBox[{"mirror", ",", " ", 
                RowBox[{"{", 
                 RowBox[{"r1in", ",", "r2in", ",", "g1in", ",", "g2in"}], 
                 "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"path", " ", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{"mirrorInplace", ",", " ", "moves"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"isMirrored", "=", " ", "True"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"r1", ",", "r2", ",", "g1", ",", "g2"}], "}"}], "=", 
              RowBox[{"{", 
               RowBox[{"r1in", ",", "r2in", ",", "g1in", ",", "g2in"}], 
               "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"path", "=", " ", "moves"}]}]}], "\[IndentingNewLine]", 
           "]"}], ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{
         "r1", ",", "r2", ",", "g1", ",", "g2", ",", "isMirrored", ",", 
          "isFlipped", ",", "path"}], "}"}], "]"}]}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "rotate", " ", "the", " ", "coordinate", " ", "frame", " ", "270", " ", 
     "degrees"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"rotate270", "[", "r_", "]"}], ":=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "-", " ", 
       RowBox[{"r", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
      ",", " ", 
      RowBox[{"r", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
     "}"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "changes", " ", "in", " ", "path", " ", "when", " ", "we", " ", "rotate", 
     " ", "270", " ", "degrees"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"rotate90inplace", "[", "r_", "]"}], ":=", 
    RowBox[{"{", " ", 
     RowBox[{
      RowBox[{"r", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
      ",", " ", 
      RowBox[{"-", 
       RowBox[{
       "r", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}], 
     "}"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "rotate", " ", "the", " ", "coordinate", " ", "frame", " ", "90", " ", 
     "degrees"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"rotate90", "[", "r_", "]"}], " ", ":=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"r", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
      ",", 
      RowBox[{"1", "-", " ", 
       RowBox[{
       "r", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}], 
     "}"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "changes", " ", "in", " ", "path", " ", "when", " ", "we", " ", "rotate", 
     " ", "90", " ", "degrees"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"rotate270inplace", "[", "r_", "]"}], " ", ":=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"r", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
      ",", " ", 
      RowBox[{"r", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
     "}"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "rotate", " ", "the", " ", "coordinate", " ", "frame", " ", "180", " ", 
     "degrees"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"rotate180", "[", "r_", "]"}], " ", ":=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "-", 
       RowBox[{"r", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
      ",", 
      RowBox[{"1", "-", " ", 
       RowBox[{
       "r", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
     "}"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "changes", " ", "in", " ", "path", " ", "when", " ", "we", " ", "rotate", 
     " ", "180", " ", "degrees"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"rotate180inplace", "[", "r_", "]"}], " ", ":=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"r", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
      ",", 
      RowBox[{"-", " ", 
       RowBox[{
       "r", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
     "}"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "mirror", " ", "the", " ", "coordinate", " ", "frame", " ", "about", " ", 
     "the", " ", "right", " ", "wall"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"mirror", "[", "r_", "]"}], " ", ":=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "-", 
       RowBox[{"r", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
      ",", 
      RowBox[{"r", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
     "}"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "changes", " ", "in", " ", "path", " ", "when", " ", "we", " ", 
     "mirror"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"mirrorInplace", "[", "r_", "]"}], ":=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"r", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
      ",", 
      RowBox[{"r", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
     "}"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Total", " ", "distance", " ", "moved", " ", "with", " ", "the", " ", 
     "sequence", " ", "of", " ", "moves"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"distanceMoved", "[", "moves_", "]"}], ":=", " ", 
    RowBox[{"Total", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Norm", "[", "m", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"m", ",", "moves"}], "}"}]}], "]"}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{
    StyleBox[
     StyleBox[
      RowBox[{"(", "*"}]], "Subsection"], 
    StyleBox[
     RowBox[{
     "optimal2robotPath", " ", "the", " ", "top", " ", "level", " ", 
      "algorithm"}], "Subsection"], 
    StyleBox[
     StyleBox[
      RowBox[{"*", ")"}]], "Subsection"]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Function", " ", "that", " ", "does", " ", "an", " ", "A", "*", " ", 
     "search", " ", "to", " ", "find", " ", "the", " ", "shortest", " ", 
     "path"}], "*)"}], 
   StyleBox["\[IndentingNewLine]", "Subsection"], 
   RowBox[{
    RowBox[{"optimal2robotPath", "[", 
     RowBox[{
     "s1_", ",", "s2_", ",", " ", "g1_", ",", "g2_", ",", "\[Epsilon]_"}], 
     "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "optimalPathList", "\[IndentingNewLine]", ",", "pathToExplore", ",", 
        "r1", ",", "r2", ",", "wallMoves", ",", "moves", ",", "pm1", ",", " ",
         "pm2"}], "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"pathToExplore", "=", " ", 
        RowBox[{"{", 
         RowBox[{"Infinity", ",", "s1", ",", "s2", ",", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}], "}"}], ",", 
          RowBox[{"{", "s1", "}"}], ",", 
          RowBox[{"{", "s2", "}"}], ",", "False"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"optimalPathList", "=", 
        RowBox[{"{", "pathToExplore", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
          "pathToExplore", "\[LeftDoubleBracket]", "7", 
           "\[RightDoubleBracket]"}], " ", "\[NotEqual]", "  ", "True"}], ",",
          "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"body", " ", "of", " ", "while", " ", "loop"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"r1", " ", "=", " ", 
           RowBox[{
           "pathToExplore", "\[LeftDoubleBracket]", "2", 
            "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"r2", " ", "=", " ", 
           RowBox[{
           "pathToExplore", "\[LeftDoubleBracket]", "3", 
            "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"moves", "=", " ", 
           RowBox[{
           "pathToExplore", "\[LeftDoubleBracket]", "4", 
            "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"pm1", " ", "=", " ", 
           RowBox[{
           "pathToExplore", "\[LeftDoubleBracket]", "5", 
            "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"pm2", " ", "=", " ", 
           RowBox[{
           "pathToExplore", "\[LeftDoubleBracket]", "6", 
            "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"wallMoves", " ", "=", " ", 
              RowBox[{"wallFrictionMoveDir", "[", 
               RowBox[{
               "dir", ",", "r1", ",", "r2", ",", "g1", ",", "g2", ",", 
                "moves", ",", "pm1", ",", " ", "pm2", ",", " ", 
                "\[Epsilon]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"optimalPathList", "=", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"optimalPathList", ",", "wallMoves"}], "]"}]}], ";"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"dir", ",", 
              RowBox[{"{", 
               RowBox[{
               "\"\<u\>\"", ",", "\"\<d\>\"", ",", "\"\<l\>\"", ",", 
                "\"\<r\>\""}], "}"}]}], "}"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"optimalPathList", " ", "=", " ", 
           RowBox[{"SortBy", "[", 
            RowBox[{"optimalPathList", ",", " ", "First"}], "]"}]}], ";", 
          RowBox[{"(*", 
           RowBox[{
           "sorts", " ", "the", " ", "current", " ", "list", " ", "by", " ", 
            "their", " ", "total", " ", "distance", " ", "moved"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"pathToExplore", " ", "=", " ", 
           RowBox[{"First", "[", "optimalPathList", "]"}]}], ";", " ", 
          RowBox[{"(*", 
           RowBox[{"read", " ", "first", " ", "entry"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"optimalPathList", "=", " ", 
           RowBox[{"Delete", "[", 
            RowBox[{"optimalPathList", ",", "1"}], "]"}]}], ";"}]}], 
        RowBox[{"(*", 
         RowBox[{"pop", " ", "off", " ", "first", " ", "entry"}], "*)"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"return", " ", "the", " ", "best", " ", "movement"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
           "optimalPathList", "\[LeftDoubleBracket]", "1", 
            "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", "4", 
           "\[RightDoubleBracket]"}], ",", " ", 
          RowBox[{
           RowBox[{
           "optimalPathList", "\[LeftDoubleBracket]", "1", 
            "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", "5", 
           "\[RightDoubleBracket]"}], ",", " ", 
          RowBox[{
           RowBox[{
           "optimalPathList", "\[LeftDoubleBracket]", "1", 
            "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", "6", 
           "\[RightDoubleBracket]"}]}], "}"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.697896108112966*^9, 3.697896108704525*^9}, {
  3.697896139054038*^9, 3.6978961433450203`*^9}, {3.6978961753558617`*^9, 
  3.69789617594269*^9}},
 CellID->1075032951]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"movesAndPositions", ",", "path", ",", 
       RowBox[{"(*", 
        RowBox[{"paths", " ", "for", " ", "each", " ", "robot"}], "*)"}], 
       "path1", ",", "path2", ",", "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", " ", 
        RowBox[{"1", "/", "40"}]}], " ", 
       RowBox[{"(*", 
        RowBox[{
        "radius", " ", "of", " ", "start", " ", "and", " ", "end", " ", 
         "markers"}], "*)"}], ",", "\[IndentingNewLine]", 
       RowBox[{"thickness", " ", "=", " ", "0.005"}], ",", "rotateSolution", 
       ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"left", " ", "robot"}], "*)"}], " ", "ps1", ",", "pe1", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"right", " ", "robot"}], "*)"}], " ", "ps2", ",", "pe2", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"current", " ", "particle", " ", "position"}], "*)"}], " ", 
       "pm1", ",", "pm2", ",", "offset", ",", "\[IndentingNewLine]", 
       RowBox[{"c1", "=", "Blue"}], ",", 
       RowBox[{"c2", " ", "=", "Magenta"}], ",", "\[IndentingNewLine]", 
       "mvNum", ",", "\[IndentingNewLine]", "mvFrac"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
          "s1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ">", 
          RowBox[{
          "s2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ",",
          "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ps1", " ", ",", "pe1", ",", "ps2", ",", "pe2"}], "}"}], 
           " ", "=", " ", 
           RowBox[{"{", 
            RowBox[{"s1", ",", "e1", ",", "s2", ",", "e2"}], "}"}]}], ";"}], 
         ",", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ps2", " ", ",", "pe2", ",", "ps1", ",", "pe1"}], "}"}], 
           " ", "=", " ", 
           RowBox[{"{", 
            RowBox[{"s1", ",", "e1", ",", "s2", ",", "e2"}], "}"}]}], ";"}]}],
         "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"ps1", " ", ",", "pe1", ",", "ps2", ",", "pe2"}], "}"}], " ", 
       "=", " ", 
       RowBox[{"{", 
        RowBox[{"s1", ",", "e1", ",", "s2", ",", "e2"}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"path", ",", "path1", ",", "path2"}], "}"}], " ", "=", " ", 
       RowBox[{"optimal2robotPath", "[", 
        RowBox[{
        "ps1", ",", "ps2", ",", "pe1", ",", "pe2", ",", "\[Epsilon]"}], " ", 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"mvNum", " ", "=", " ", 
       RowBox[{"Floor", "[", 
        RowBox[{"progress", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", "path", "]"}], "-", "1"}], ")"}]}], "]"}]}],
       " ", ";", "\[IndentingNewLine]", 
      RowBox[{"mvFrac", " ", "=", " ", 
       RowBox[{"FractionalPart", "[", 
        RowBox[{"progress", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Length", "[", "path", "]"}], "-", "1"}], ")"}]}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"pm2", "=", " ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"mvFrac", ">", "0"}], ",", 
         RowBox[{
          RowBox[{"path2", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{"mvNum", "+", "1"}], ",", ";;"}], 
           "\[RightDoubleBracket]"}], "+", 
          RowBox[{"mvFrac", "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"path2", "\[LeftDoubleBracket]", 
              RowBox[{
               RowBox[{"mvNum", "+", "2"}], ",", ";;"}], 
              "\[RightDoubleBracket]"}], "-", 
             RowBox[{"path2", "\[LeftDoubleBracket]", 
              RowBox[{
               RowBox[{"mvNum", "+", "1"}], ",", ";;"}], 
              "\[RightDoubleBracket]"}]}], ")"}]}]}], ",", 
         RowBox[{"path2", "\[LeftDoubleBracket]", 
          RowBox[{
           RowBox[{"mvNum", "+", "1"}], ",", ";;"}], 
          "\[RightDoubleBracket]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"pm1", " ", "=", " ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"mvFrac", ">", "0"}], ",", 
         RowBox[{
          RowBox[{"path1", "\[LeftDoubleBracket]", 
           RowBox[{
            RowBox[{"mvNum", "+", "1"}], ",", ";;"}], 
           "\[RightDoubleBracket]"}], "+", 
          RowBox[{"mvFrac", "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"path1", "\[LeftDoubleBracket]", 
              RowBox[{
               RowBox[{"mvNum", "+", "2"}], ",", ";;"}], 
              "\[RightDoubleBracket]"}], "-", 
             RowBox[{"path1", "\[LeftDoubleBracket]", 
              RowBox[{
               RowBox[{"mvNum", "+", "1"}], ",", ";;"}], 
              "\[RightDoubleBracket]"}]}], ")"}]}]}], ",", 
         RowBox[{"path1", "\[LeftDoubleBracket]", 
          RowBox[{
           RowBox[{"mvNum", "+", "1"}], ",", ";;"}], 
          "\[RightDoubleBracket]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Graphics", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"(*", "workspace", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Darker", "[", "Red", "]"}], ",", " ", 
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "0.025"}], 
               RowBox[{"{", 
                RowBox[{"1", ",", "1"}], "}"}]}], ",", 
              RowBox[{"1.025", 
               RowBox[{"{", 
                RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Lighter", "[", 
             RowBox[{"Gray", ",", "0.8"}], "]"}], ",", " ", 
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"White", ",", " ", 
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"\[Epsilon]", ",", " ", "\[Epsilon]"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"1", "-", "\[Epsilon]"}], ",", 
                RowBox[{"1", "-", "\[Epsilon]"}]}], "}"}]}], "]"}]}], "}"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Lighter", "[", 
             RowBox[{"Gray", ",", "0.8"}], "]"}], ",", " ", 
            RowBox[{"Disk", "[", 
             RowBox[{"ps2", ",", "\[Epsilon]"}], "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Lighter", "[", 
             RowBox[{"Gray", ",", "0.8"}], "]"}], ",", " ", 
            RowBox[{"Disk", "[", 
             RowBox[{"pe2", ",", "\[Epsilon]"}], "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"PointSize", "[", "0.01", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Arrowheads", "[", ".03", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Thickness", "[", "thickness", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"starting", " ", "poses"}], ",", " ", 
            RowBox[{
            "dashed", " ", "line", " ", "from", " ", "start", " ", "to", " ", 
             "end"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"c1", ",", 
            RowBox[{"{", " ", 
             RowBox[{
              RowBox[{"Opacity", "[", ".3", "]"}], ",", "Dashed", ",", 
              RowBox[{"Arrow", "[", 
               RowBox[{"{", 
                RowBox[{"ps1", ",", "pe1"}], "}"}], "]"}]}], "}"}], ",", 
            RowBox[{"Point", "@", "ps1"}], ",", 
            RowBox[{"EdgeForm", "[", 
             RowBox[{"Directive", "[", 
              RowBox[{"c1", ",", 
               RowBox[{"Thickness", "[", "thickness", "]"}]}], "]"}], "]"}], 
            ",", 
            RowBox[{"FaceForm", "[", "None", "]"}], ",", 
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{"ps1", "-", 
               RowBox[{
                RowBox[{"2", "/", "3"}], "r", " ", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "1"}], "}"}]}]}], ",", 
              RowBox[{"ps1", "+", 
               RowBox[{
                RowBox[{"2", "/", "3"}], "r", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "1"}], "}"}]}]}]}], "]"}], ",", 
            RowBox[{"Circle", "[", 
             RowBox[{"pe1", ",", "r"}], "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"c2", ",", 
            RowBox[{"{", " ", 
             RowBox[{
              RowBox[{"Opacity", "[", ".3", "]"}], ",", "Dashed", ",", 
              RowBox[{"Arrow", "[", 
               RowBox[{"{", 
                RowBox[{"ps2", ",", "pe2"}], "}"}], "]"}]}], "}"}], ",", 
            RowBox[{"Point", "@", "ps2"}], ",", 
            RowBox[{"EdgeForm", "[", 
             RowBox[{"Directive", "[", 
              RowBox[{"c2", ",", 
               RowBox[{"Thickness", "[", "thickness", "]"}]}], "]"}], "]"}], 
            ",", 
            RowBox[{"FaceForm", "[", "None", "]"}], ",", 
            RowBox[{"Rectangle", "[", 
             RowBox[{
              RowBox[{"ps2", "-", 
               RowBox[{
                RowBox[{"2", "/", "3"}], "r", " ", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "1"}], "}"}]}]}], ",", 
              RowBox[{"ps2", "+", 
               RowBox[{
                RowBox[{"2", "/", "3"}], "r", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "1"}], "}"}]}]}]}], "]"}], ",", " ", 
            RowBox[{"Circle", "[", 
             RowBox[{"pe2", ",", "r"}], "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "plot", " ", "path", " ", "of", " ", "particle", " ", "1"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"c1", ",", "\[IndentingNewLine]", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"Arrow", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"path1", "\[LeftDoubleBracket]", 
                  RowBox[{"i", ",", ";;"}], "\[RightDoubleBracket]"}], ",", 
                 RowBox[{"path1", "\[LeftDoubleBracket]", 
                  RowBox[{
                   RowBox[{"i", "+", "1"}], ",", ";;"}], 
                  "\[RightDoubleBracket]"}]}], "}"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", "mvNum"}], "}"}]}], "]"}], ",", 
            "\[IndentingNewLine]", " ", 
            RowBox[{"Arrow", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"path1", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{"mvNum", "+", "1"}], ",", ";;"}], 
                "\[RightDoubleBracket]"}], ",", "pm1"}], "}"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                 "pm1", "\[LeftDoubleBracket]", "1", 
                  "\[RightDoubleBracket]"}], "\[Equal]", "0"}], "||", 
                RowBox[{
                 RowBox[{
                 "pm1", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}], "\[Equal]", "0"}], "||", 
                RowBox[{
                 RowBox[{
                 "pm1", "\[LeftDoubleBracket]", "1", 
                  "\[RightDoubleBracket]"}], "\[Equal]", "1"}], "||", 
                RowBox[{
                 RowBox[{
                 "pm1", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}], "\[Equal]", "1"}]}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Point", "@", "pm1"}], " ", ",", 
                 RowBox[{"PointSize", "[", "0.005", "]"}], ",", "White", ",", 
                 
                 RowBox[{"Point", "@", "pm1"}]}], " ", "}"}], ",", 
               RowBox[{"Point", "@", "pm1"}]}], "]"}], " ", "}"}]}], 
           "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "plot", " ", "path", " ", "of", " ", "particle", " ", "2"}], 
           "*)"}], "\[IndentingNewLine]", " ", 
          RowBox[{"{", 
           RowBox[{"c2", ",", "\[IndentingNewLine]", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"Arrow", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"path2", "\[LeftDoubleBracket]", 
                  RowBox[{"i", ",", ";;"}], "\[RightDoubleBracket]"}], ",", 
                 RowBox[{"path2", "\[LeftDoubleBracket]", 
                  RowBox[{
                   RowBox[{"i", "+", "1"}], ",", ";;"}], 
                  "\[RightDoubleBracket]"}]}], "}"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", "mvNum"}], "}"}]}], "]"}], ",", 
            "\[IndentingNewLine]", " ", 
            RowBox[{"Arrow", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"path2", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{"mvNum", "+", "1"}], ",", ";;"}], 
                "\[RightDoubleBracket]"}], ",", "pm2"}], "}"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                 "pm2", "\[LeftDoubleBracket]", "1", 
                  "\[RightDoubleBracket]"}], "\[Equal]", "0"}], "||", 
                RowBox[{
                 RowBox[{
                 "pm2", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}], "\[Equal]", "0"}], "||", 
                RowBox[{
                 RowBox[{
                 "pm2", "\[LeftDoubleBracket]", "1", 
                  "\[RightDoubleBracket]"}], "\[Equal]", "1"}], "||", 
                RowBox[{
                 RowBox[{
                 "pm2", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}], "\[Equal]", "1"}]}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Point", "@", "pm2"}], " ", ",", 
                 RowBox[{"PointSize", "[", "0.005", "]"}], ",", "White", ",", 
                 
                 RowBox[{"Point", "@", "pm2"}]}], " ", "}"}], ",", 
               RowBox[{"Point", "@", "pm2"}]}], "]"}], "}"}]}], 
           "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"ifMove", " ", "\[Equal]", " ", "True"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Inset", "[", 
             RowBox[{
              RowBox[{"RegionPlot", "[", 
               RowBox[{
                RowBox[{"x", "<", 
                 RowBox[{"-", "3"}]}], ",", 
                RowBox[{"{", 
                 RowBox[{"x", ",", 
                  RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"y", ",", 
                  RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
                RowBox[{"Epilog", "\[Rule]", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{"reachable", " ", "region"}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"LightBlue", ",", 
                    RowBox[{"EdgeForm", "[", "Blue", "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "pm1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "<", 
                    RowBox[{
                    "pm2", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}], " ", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "pm2", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "-", "1", "-", 
                    RowBox[{
                    "pm1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    "pm2", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "-", 
                    RowBox[{
                    "pm1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", "-", 
                    RowBox[{
                    "pm1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "+", 
                    RowBox[{
                    "pm2", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}], ",", " ", 
                    RowBox[{
                    RowBox[{
                    "pm2", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "-", 
                    RowBox[{
                    "pm1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "]"}]}], "]"}]}],
                     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"{", 
                    RowBox[{"LightGreen", ",", 
                    RowBox[{"EdgeForm", "[", "Green", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.5", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "pm1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], ">", 
                    RowBox[{
                    "pm2", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "pm2", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "-", 
                    RowBox[{
                    "pm1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"1", "+", " ", 
                    RowBox[{
                    "pm2", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "-", 
                    RowBox[{
                    "pm1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "pm2", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "-", 
                    RowBox[{
                    "pm1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}], ")"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", " ", 
                    RowBox[{
                    "pm1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "-", 
                    RowBox[{
                    "pm2", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], ")"}]}]}], "}"}]}], "]"}]}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{"goal", " ", "deltas"}], "*)"}], 
                   "\[IndentingNewLine]", "Green", ",", "\[IndentingNewLine]", 
                   RowBox[{"Disk", "[", 
                    RowBox[{
                    RowBox[{"pe2", "-", "pe1"}], ",", 
                    RowBox[{"2", "r"}]}], "]"}], ",", 
                   RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{
                    "StringForm", "[", "\"\<\[CapitalDelta]r\>\"", "]"}], ",", 
                    RowBox[{"FontSize", "\[Rule]", "16"}], ",", "Black", ",", 
                    
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                     "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "pm2", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "-", 
                    RowBox[{
                    "pm1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "-", " ", "0.1"}], ",", 
                    RowBox[{
                    RowBox[{
                    "pm2", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "-", 
                    RowBox[{
                    "pm1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "-", "0.1"}]}], "}"}]}], "]"}],
                    ",", "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{"current", " ", "deltas"}], "*)"}], 
                   "\[IndentingNewLine]", "Red", ",", 
                   RowBox[{"Rectangle", "[", 
                    RowBox[{
                    RowBox[{"pm2", "-", "pm1", "-", 
                    RowBox[{
                    RowBox[{"4", "/", "3"}], "r", " ", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}]}], ",", 
                    RowBox[{"pm2", "-", "pm1", "+", 
                    RowBox[{
                    RowBox[{"4", "/", "3"}], "r", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}]}]}], "]"}], ",", 
                   RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{
                    "StringForm", "[", "\"\<\[CapitalDelta]g\>\"", "]"}], ",", 
                    RowBox[{"FontSize", "\[Rule]", "16"}], ",", "Black", ",", 
                    
                    RowBox[{"FontFamily", "\[Rule]", " ", "\"\<Times\>\""}]}],
                     "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "pe2", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "-", 
                    RowBox[{
                    "pe1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "+", " ", "0.1"}], ",", 
                    RowBox[{
                    RowBox[{
                    "pe2", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "-", 
                    RowBox[{
                    "pe1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "+", "0.1"}]}], "}"}]}], 
                    "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  "}"}]}], ",", 
                RowBox[{"FrameLabel", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<\[CapitalDelta]x\>\"", ",", 
                   "\"\<\[CapitalDelta]y\>\""}], "}"}]}], ",", 
                RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"Directive", "[", 
                  RowBox[{"Black", ",", "Bold"}], "]"}]}], ",", 
                RowBox[{"ImageSize", "\[Rule]", "230"}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"1.38", ",", ".45"}], "}"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"mvNum", "+", "1"}], "\[Equal]", " ", 
                  RowBox[{"Length", "[", "path", "]"}]}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"mvNum", "=", " ", 
                    RowBox[{
                    RowBox[{"Length", "[", "path", "]"}], "-", "2"}]}], ",", 
                   RowBox[{"mvFrac", "=", "1"}]}], "}"}]}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"Darker", "[", "Red", "]"}]}], ",", " ", 
              RowBox[{"Text", "[", 
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"StringForm", "[", 
                   RowBox[{"\"\<Move `` of ``\>\"", ",", " ", 
                    RowBox[{"mvNum", "+", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "path", "]"}], "-", "1"}]}], "]"}],
                   ",", 
                  RowBox[{"FontSize", "\[Rule]", "18"}]}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"1.4", ",", ".9"}], "}"}]}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Text", "[", 
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"StringForm", "[", 
                   RowBox[{"\"\<Total Distance `` \>\"", ",", " ", 
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{"N", "[", 
                    RowBox[{"Total", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"EuclideanDistance", "[", 
                    RowBox[{
                    RowBox[{
                    "path", "\[LeftDoubleBracket]", "i", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "2", ",", " ", 
                    RowBox[{"Length", "[", "path", "]"}]}], "}"}]}], "]"}], 
                    " ", "]"}], " ", "]"}], ",", ".01"}], "]"}]}], "]"}], ",", 
                  RowBox[{"FontSize", "\[Rule]", "18"}]}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"1.4", ",", ".8"}], "}"}]}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"offset", " ", "=", " ", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"1.55", ",", ".5"}], "}"}], "-", 
                 RowBox[{
                  FractionBox["1", "2"], 
                  RowBox[{"path", "\[LeftDoubleBracket]", 
                   RowBox[{
                    RowBox[{"mvNum", "+", "2"}], ",", ";;"}], 
                   "\[RightDoubleBracket]"}]}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Opacity", "[", "0.3", "]"}], ",", " ", 
                 RowBox[{"Arrow", "[", 
                  RowBox[{"{", 
                   RowBox[{"offset", ",", 
                    RowBox[{"offset", "+", 
                    RowBox[{"path", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"mvNum", "+", "2"}], ",", ";;"}], 
                    "\[RightDoubleBracket]"}]}]}], "}"}], "]"}]}], "}"}]}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"Point", "[", 
               RowBox[{"offset", "+", 
                RowBox[{"mvFrac", 
                 RowBox[{"(", 
                  RowBox[{"path", "\[LeftDoubleBracket]", 
                   RowBox[{
                    RowBox[{"mvNum", "+", "2"}], ",", ";;"}], 
                   "\[RightDoubleBracket]"}], ")"}]}]}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Arrow", "[", 
               RowBox[{"{", 
                RowBox[{"offset", ",", "  ", 
                 RowBox[{"offset", "+", 
                  RowBox[{"mvFrac", 
                   RowBox[{"(", 
                    RowBox[{"path", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"mvNum", "+", "2"}], ",", ";;"}], 
                    "\[RightDoubleBracket]"}], ")"}]}]}]}], " ", "}"}], 
               "]"}]}], "\[IndentingNewLine]", "}"}]}], "]"}]}], 
         "\[IndentingNewLine]", "}"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "600"}], ",", 
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.05"}], ",", "1.75"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", ".05"}], ",", "1.05"}], "}"}]}], "}"}]}]}], 
       "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Row", "[", 
    RowBox[{"{", 
     RowBox[{"Control", "@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "ifMove", ",", "True", ",", 
          "\"\<\[CapitalDelta] Configuration Show\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"True", ",", "False"}], "}"}], ",", 
        RowBox[{"Appearance", "\[Rule]", " ", "\"\<Labeled\>\""}]}], "}"}]}], 
     "}"}], "]"}], ",", 
   RowBox[{"Row", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Control", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"progress", ",", "1", ",", "\"\<Progress\>\""}], "}"}], ",",
          "0", ",", "1", ",", 
         RowBox[{"1", "/", "420"}], ",", "Slider", ",", 
         RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}]}], ",",
       "\[IndentingNewLine]", 
      RowBox[{"Control", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[Epsilon]", ",", 
           RowBox[{"1", "/", "20"}], ",", "\"\<\[Epsilon]\>\""}], "}"}], ",", 
         
         RowBox[{"1", "/", "1000"}], ",", 
         RowBox[{"1", "/", "10"}], ",", 
         RowBox[{"1", "/", "1000"}], ",", "Slider", ",", 
         RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}]}]}], 
     "}"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s1", ",", 
       RowBox[{"{", 
        RowBox[{"0.95", ",", "0.95"}], "}"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], "+", " ", "\[Epsilon]"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], "-", " ", "\[Epsilon]"}], ",", 
     "Locator", ",", 
     RowBox[{"Appearance", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s2", ",", 
       RowBox[{"{", 
        RowBox[{"0.2", ",", "0.8"}], "}"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], "+", " ", "\[Epsilon]"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], "-", " ", "\[Epsilon]"}], ",", 
     "Locator", ",", 
     RowBox[{"Appearance", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"e1", ",", 
       RowBox[{"{", 
        RowBox[{"0.05", ",", "0.95"}], "}"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], "+", " ", "\[Epsilon]"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], "-", " ", "\[Epsilon]"}], ",", 
     "Locator", ",", 
     RowBox[{"Appearance", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"e2", ",", 
       RowBox[{"{", 
        RowBox[{"0.33", ",", "0.66"}], "}"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], "+", " ", "\[Epsilon]"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "1"}], "}"}], "-", " ", "\[Epsilon]"}], ",", 
     "Locator", ",", 
     RowBox[{"Appearance", "\[Rule]", "None"}]}], "}"}], 
   "\[IndentingNewLine]", ",", " ", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.697896288520822*^9, 3.6978962981193132`*^9}, {
  3.697896345275285*^9, 3.697896415557206*^9}, {3.697896454584566*^9, 
  3.697896478438027*^9}, {3.6978965118416023`*^9, 3.697896564602606*^9}, {
  3.697896652731483*^9, 3.697896686035187*^9}, {3.697896824761924*^9, 
  3.697896918371666*^9}, {3.6978969520410767`*^9, 3.697896979718511*^9}, {
  3.69789701257766*^9, 3.6978970750572*^9}, {3.697897112848819*^9, 
  3.697897151148674*^9}, {3.6978972062953672`*^9, 3.697897237097065*^9}, {
  3.697897270533296*^9, 3.6978972803964787`*^9}, {3.6978973194875727`*^9, 
  3.697897375208848*^9}},
 CellID->450784076],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`e1$$ = {0.062, 0.938}, $CellContext`e2$$ = {
    0.937, 0.062}, $CellContext`ifMove$$ = True, $CellContext`progress$$ = 
    1, $CellContext`s1$$ = {0.062, 0.062}, $CellContext`s2$$ = {
    0.9339999999999999, 0.9199999999999999}, $CellContext`\[Epsilon]$$ = 
    Rational[31, 500], Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`ifMove$$], True, 
       "\[CapitalDelta] Configuration Show"}, {True, False}}, {
      Hold[
       Row[{
         Manipulate`Place[1]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`progress$$], 1, "Progress"}, 0, 1, 
      Rational[1, 420]}, {{
       Hold[$CellContext`\[Epsilon]$$], 
       Rational[1, 20], "\[Epsilon]"}, 
      Rational[1, 1000], 
      Rational[1, 10], 
      Rational[1, 1000]}, {
      Hold[
       Row[{
         Manipulate`Place[2], 
         Manipulate`Place[3]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`s1$$], {0.95, 0.95}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}, {{
       Hold[$CellContext`s2$$], {0.2, 0.8}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}, {{
       Hold[$CellContext`e1$$], {0.05, 0.95}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}, {{
       Hold[$CellContext`e2$$], {0.33, 0.66}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}}, Typeset`size$$ = {
    600., {181., 186.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`ifMove$160239$$ = 
    False, $CellContext`progress$160240$$ = 
    0, $CellContext`\[Epsilon]$160241$$ = 0, $CellContext`s1$160242$$ = 
    0, $CellContext`s2$160243$$ = 0, $CellContext`e1$160244$$ = 
    0, $CellContext`e2$160245$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`e1$$ = {0.05, 0.95}, $CellContext`e2$$ = {
         0.33, 0.66}, $CellContext`ifMove$$ = True, $CellContext`progress$$ = 
        1, $CellContext`s1$$ = {0.95, 0.95}, $CellContext`s2$$ = {0.2, 
         0.8}, $CellContext`\[Epsilon]$$ = Rational[1, 20]}, 
      "ControllerVariables" :> {
        Hold[$CellContext`ifMove$$, $CellContext`ifMove$160239$$, False], 
        Hold[$CellContext`progress$$, $CellContext`progress$160240$$, 0], 
        Hold[$CellContext`\[Epsilon]$$, $CellContext`\[Epsilon]$160241$$, 0], 
        
        Hold[$CellContext`s1$$, $CellContext`s1$160242$$, 0], 
        Hold[$CellContext`s2$$, $CellContext`s2$160243$$, 0], 
        Hold[$CellContext`e1$$, $CellContext`e1$160244$$, 0], 
        Hold[$CellContext`e2$$, $CellContext`e2$160245$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`movesAndPositions$, $CellContext`path$, \
$CellContext`path1$, $CellContext`path2$, $CellContext`r$ = 
         1/40, $CellContext`thickness$ = 
         0.005, $CellContext`rotateSolution$, $CellContext`ps1$, \
$CellContext`pe1$, $CellContext`ps2$, $CellContext`pe2$, $CellContext`pm1$, \
$CellContext`pm2$, $CellContext`offset$, $CellContext`c1$ = 
         Blue, $CellContext`c2$ = 
         Magenta, $CellContext`mvNum$, $CellContext`mvFrac$}, \
{$CellContext`ps1$, $CellContext`pe1$, $CellContext`ps2$, $CellContext`pe2$} = \
{$CellContext`s1$$, $CellContext`e1$$, $CellContext`s2$$, $CellContext`e2$$}; \
{$CellContext`path$, $CellContext`path1$, $CellContext`path2$} = \
$CellContext`optimal2robotPath[$CellContext`ps1$, $CellContext`ps2$, \
$CellContext`pe1$, $CellContext`pe2$, $CellContext`\[Epsilon]$$]; \
$CellContext`mvNum$ = 
         Floor[$CellContext`progress$$ (Length[$CellContext`path$] - 
            1)]; $CellContext`mvFrac$ = 
         FractionalPart[$CellContext`progress$$ (Length[$CellContext`path$] - 
            1)]; $CellContext`pm2$ = 
         If[$CellContext`mvFrac$ > 0, 
           Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
             Span[1, All]] + $CellContext`mvFrac$ (
             Part[$CellContext`path2$, $CellContext`mvNum$ + 2, 
               Span[1, All]] - 
             Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
              Span[1, All]]), 
           Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
            Span[1, All]]]; $CellContext`pm1$ = 
         If[$CellContext`mvFrac$ > 0, 
           Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
             Span[1, All]] + $CellContext`mvFrac$ (
             Part[$CellContext`path1$, $CellContext`mvNum$ + 2, 
               Span[1, All]] - 
             Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
              Span[1, All]]), 
           Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
            Span[1, All]]]; Graphics[{{
            Darker[Red], 
            Rectangle[(-0.025) {1, 1}, 1.025 {1, 1}]}, {
            Lighter[Gray, 0.8], 
            Rectangle[{0, 0}, {1, 1}]}, {White, 
            
            Rectangle[{$CellContext`\[Epsilon]$$, $CellContext`\[Epsilon]$$}, \
{1 - $CellContext`\[Epsilon]$$, 1 - $CellContext`\[Epsilon]$$}]}, {
            Lighter[Gray, 0.8], 
            Disk[$CellContext`ps2$, $CellContext`\[Epsilon]$$]}, {
            Lighter[Gray, 0.8], 
            Disk[$CellContext`pe2$, $CellContext`\[Epsilon]$$]}, 
           PointSize[0.01], 
           Arrowheads[0.03], 
           Thickness[$CellContext`thickness$], {$CellContext`c1$, {
             Opacity[0.3], Dashed, 
             Arrow[{$CellContext`ps1$, $CellContext`pe1$}]}, 
            Point[$CellContext`ps1$], 
            EdgeForm[
             Directive[$CellContext`c1$, 
              Thickness[$CellContext`thickness$]]], 
            FaceForm[None], 
            
            Rectangle[$CellContext`ps1$ - (2/3) $CellContext`r$ {1, 
              1}, $CellContext`ps1$ + (2/3) $CellContext`r$ {1, 1}], 
            Circle[$CellContext`pe1$, $CellContext`r$]}, {$CellContext`c2$, {
             Opacity[0.3], Dashed, 
             Arrow[{$CellContext`ps2$, $CellContext`pe2$}]}, 
            Point[$CellContext`ps2$], 
            EdgeForm[
             Directive[$CellContext`c2$, 
              Thickness[$CellContext`thickness$]]], 
            FaceForm[None], 
            
            Rectangle[$CellContext`ps2$ - (2/3) $CellContext`r$ {1, 
              1}, $CellContext`ps2$ + (2/3) $CellContext`r$ {1, 1}], 
            Circle[$CellContext`pe2$, $CellContext`r$]}, {$CellContext`c1$, 
            Table[
             Arrow[{
               Part[$CellContext`path1$, $CellContext`i, 
                Span[1, All]], 
               Part[$CellContext`path1$, $CellContext`i + 1, 
                Span[1, All]]}], {$CellContext`i, 1, $CellContext`mvNum$}], 
            Arrow[{
              Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
               Span[1, All]], $CellContext`pm1$}], {
             If[
              Or[
              Part[$CellContext`pm1$, 1] == 0, Part[$CellContext`pm1$, 2] == 
               0, Part[$CellContext`pm1$, 1] == 1, Part[$CellContext`pm1$, 2] == 
               1], {
               Point[$CellContext`pm1$], 
               PointSize[0.005], White, 
               Point[$CellContext`pm1$]}, 
              Point[$CellContext`pm1$]]}}, {$CellContext`c2$, 
            Table[
             Arrow[{
               Part[$CellContext`path2$, $CellContext`i, 
                Span[1, All]], 
               Part[$CellContext`path2$, $CellContext`i + 1, 
                Span[1, All]]}], {$CellContext`i, 1, $CellContext`mvNum$}], 
            Arrow[{
              Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
               Span[1, All]], $CellContext`pm2$}], {
             If[
              Or[
              Part[$CellContext`pm2$, 1] == 0, Part[$CellContext`pm2$, 2] == 
               0, Part[$CellContext`pm2$, 1] == 1, Part[$CellContext`pm2$, 2] == 
               1], {
               Point[$CellContext`pm2$], 
               PointSize[0.005], White, 
               Point[$CellContext`pm2$]}, 
              Point[$CellContext`pm2$]]}}, 
           If[$CellContext`ifMove$$ == True, 
            Inset[
             
             RegionPlot[$CellContext`x < -3, {$CellContext`x, -1, 
               1}, {$CellContext`y, -1, 1}, Epilog -> {{LightBlue, 
                 EdgeForm[Blue], 
                 If[Part[$CellContext`pm1$, 1] < Part[$CellContext`pm2$, 1], 
                  
                  Rectangle[{
                   Part[$CellContext`pm2$, 1] - 1 - 
                    Part[$CellContext`pm1$, 1], Part[$CellContext`pm2$, 2] - 
                    Part[$CellContext`pm1$, 2]}, {1, 0}], 
                  
                  Rectangle[{
                   1 - Part[$CellContext`pm1$, 1] + 
                    Part[$CellContext`pm2$, 1], Part[$CellContext`pm2$, 2] - 
                    Part[$CellContext`pm1$, 2]}, {-1, 0}]]}, {LightGreen, 
                 EdgeForm[Green], 
                 Opacity[0.5], 
                 If[Part[$CellContext`pm1$, 2] > Part[$CellContext`pm2$, 2], 
                  
                  Rectangle[{0, -1}, {
                   Part[$CellContext`pm2$, 1] - Part[$CellContext`pm1$, 1], 1 + 
                    Part[$CellContext`pm2$, 2] - Part[$CellContext`pm1$, 2]}], 
                  
                  Rectangle[{0, 1}, {
                   Part[$CellContext`pm2$, 1] - 
                    Part[$CellContext`pm1$, 1], -(1 + 
                    Part[$CellContext`pm1$, 2] - 
                    Part[$CellContext`pm2$, 2])}]]}, Green, 
                
                Disk[$CellContext`pe2$ - $CellContext`pe1$, 
                 2 $CellContext`r$], 
                Text[
                 Style[
                  StringForm["\[CapitalDelta]r"], FontSize -> 16, Black, 
                  FontFamily -> "Times"], {
                 Part[$CellContext`pm2$, 1] - Part[$CellContext`pm1$, 1] - 
                  0.1, Part[$CellContext`pm2$, 2] - Part[$CellContext`pm1$, 2]
                   - 0.1}], Red, 
                
                Rectangle[$CellContext`pm2$ - $CellContext`pm1$ - (4/
                  3) $CellContext`r$ {1, 
                  1}, $CellContext`pm2$ - $CellContext`pm1$ + (4/
                   3) $CellContext`r$ {1, 1}], 
                Text[
                 Style[
                  StringForm["\[CapitalDelta]g"], FontSize -> 16, Black, 
                  FontFamily -> "Times"], {
                 Part[$CellContext`pe2$, 1] - Part[$CellContext`pe1$, 1] + 
                  0.1, Part[$CellContext`pe2$, 2] - 
                  Part[$CellContext`pe1$, 2] + 0.1}]}, 
              FrameLabel -> {"\[CapitalDelta]x", "\[CapitalDelta]y"}, 
              LabelStyle -> Directive[Black, Bold], ImageSize -> 230], {1.38, 
             0.45}], {
            If[$CellContext`mvNum$ + 1 == 
               Length[$CellContext`path$], {$CellContext`mvNum$ = 
                Length[$CellContext`path$] - 2, $CellContext`mvFrac$ = 1}]; 
             Darker[Red], 
             Text[
              Style[
               StringForm[
               "Move `` of ``", $CellContext`mvNum$ + 1, 
                Length[$CellContext`path$] - 1], FontSize -> 18], {1.4, 0.9}], 
             Text[
              Style[
               StringForm["Total Distance `` ", 
                Round[
                 N[
                  Total[
                   Table[
                    EuclideanDistance[
                    Part[$CellContext`path$, $CellContext`i], {0, 
                    0}], {$CellContext`i, 2, 
                    Length[$CellContext`path$]}]]], 0.01]], FontSize -> 18], {
              1.4, 0.8}], $CellContext`offset$ = {1.55, 0.5} - (1/2) 
               Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                 Span[1, All]]; {
               Opacity[0.3], 
               
               Arrow[{$CellContext`offset$, $CellContext`offset$ + 
                 Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                   Span[1, All]]}]}, 
             
             Point[$CellContext`offset$ + $CellContext`mvFrac$ 
               Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                 Span[1, All]]], 
             
             Arrow[{$CellContext`offset$, $CellContext`offset$ + \
$CellContext`mvFrac$ Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                  Span[1, All]]}]}]}, ImageSize -> 600, 
          PlotRange -> {{-0.05, 1.75}, {-0.05, 1.05}}]], 
      "Specifications" :> {{{$CellContext`ifMove$$, True, 
          "\[CapitalDelta] Configuration Show"}, {True, False}, Appearance -> 
         "Labeled", ControlPlacement -> 1}, 
        Row[{
          Manipulate`Place[1]}], {{$CellContext`progress$$, 1, "Progress"}, 0,
          1, 
         Rational[1, 420], ControlType -> Slider, Appearance -> "Labeled", 
         ControlPlacement -> 2}, {{$CellContext`\[Epsilon]$$, 
          Rational[1, 20], "\[Epsilon]"}, 
         Rational[1, 1000], 
         Rational[1, 10], 
         Rational[1, 1000], ControlType -> Slider, Appearance -> "Labeled", 
         ControlPlacement -> 3}, 
        Row[{
          Manipulate`Place[2], 
          Manipulate`Place[3]}], {{$CellContext`s1$$, {0.95, 0.95}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}, {{$CellContext`s2$$, {0.2, 0.8}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}, {{$CellContext`e1$$, {0.05, 0.95}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}, {{$CellContext`e2$$, {0.33, 0.66}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{649., {240., 245.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`optimal2robotPath[
         Pattern[$CellContext`s1, 
          Blank[]], 
         Pattern[$CellContext`s2, 
          Blank[]], 
         Pattern[$CellContext`g1, 
          Blank[]], 
         Pattern[$CellContext`g2, 
          Blank[]], 
         Pattern[$CellContext`\[Epsilon], 
          Blank[]]] := 
       Module[{$CellContext`optimalPathList, $CellContext`pathToExplore, \
$CellContext`r1, $CellContext`r2, $CellContext`wallMoves, $CellContext`moves, \
$CellContext`pm1, $CellContext`pm2}, $CellContext`pathToExplore = {
           Infinity, $CellContext`s1, $CellContext`s2, {{0, 
            0}}, {$CellContext`s1}, {$CellContext`s2}, 
            False}; $CellContext`optimalPathList = \
{$CellContext`pathToExplore}; 
         While[Part[$CellContext`pathToExplore, 7] != 
           True, $CellContext`r1 = 
            Part[$CellContext`pathToExplore, 2]; $CellContext`r2 = 
            Part[$CellContext`pathToExplore, 3]; $CellContext`moves = 
            Part[$CellContext`pathToExplore, 4]; $CellContext`pm1 = 
            Part[$CellContext`pathToExplore, 5]; $CellContext`pm2 = 
            Part[$CellContext`pathToExplore, 6]; 
           Table[$CellContext`wallMoves = \
$CellContext`wallFrictionMoveDir[$CellContext`dir, $CellContext`r1, \
$CellContext`r2, $CellContext`g1, $CellContext`g2, $CellContext`moves, \
$CellContext`pm1, $CellContext`pm2, $CellContext`\[Epsilon]]; \
$CellContext`optimalPathList = 
              AppendTo[$CellContext`optimalPathList, $CellContext`wallMoves]; 
             Null, {$CellContext`dir, {
              "u", "d", "l", "r"}}]; $CellContext`optimalPathList = 
            SortBy[$CellContext`optimalPathList, 
              First]; $CellContext`pathToExplore = 
            First[$CellContext`optimalPathList]; $CellContext`optimalPathList = 
            Delete[$CellContext`optimalPathList, 1]; Null]; Return[{
            Part[
             Part[$CellContext`optimalPathList, 1], 4], 
            Part[
             Part[$CellContext`optimalPathList, 1], 5], 
            Part[
             Part[$CellContext`optimalPathList, 1], 
             6]}]], $CellContext`wallFrictionMoveDir[
         Pattern[$CellContext`dir, 
          Blank[]], 
         Pattern[$CellContext`s1, 
          Blank[]], 
         Pattern[$CellContext`s2, 
          Blank[]], 
         Pattern[$CellContext`g1, 
          Blank[]], 
         Pattern[$CellContext`g2, 
          Blank[]], 
         Pattern[$CellContext`moves, 
          Blank[]], 
         Pattern[$CellContext`pm1, 
          Blank[]], 
         Pattern[$CellContext`pm2, 
          Blank[]], 
         Pattern[$CellContext`\[Epsilon], 
          Blank[]]] := 
       Module[{$CellContext`\[CapitalDelta]ex, \
$CellContext`\[CapitalDelta]ey, $CellContext`path = $CellContext`moves, \
$CellContext`path1 = $CellContext`pm1, $CellContext`path2 = \
$CellContext`pm2}, {$CellContext`\[CapitalDelta]ex, $CellContext`\
\[CapitalDelta]ey} = ($CellContext`g2 - $CellContext`g1) - ($CellContext`s2 - \
$CellContext`s1); If[
           And[-0.00001 <= $CellContext`\[CapitalDelta]ex <= 0.00001, 
            
            Inequality[-0.00001, LessEqual, $CellContext`\[CapitalDelta]ey, 
             Less, 0.00001]], 
           AppendTo[$CellContext`path, {
             Part[$CellContext`g2, 1] - Part[$CellContext`s2, 1], 
              Part[$CellContext`g2, 2] - Part[$CellContext`s2, 2]}]; 
           AppendTo[$CellContext`path1, $CellContext`g1]; 
           AppendTo[$CellContext`path2, $CellContext`g2]; Return[{
              $CellContext`distanceMoved[$CellContext`path], $CellContext`g1, \
$CellContext`g2, $CellContext`path, $CellContext`path1, $CellContext`path2, 
              True}]]; 
         Module[{$CellContext`r1, $CellContext`r2, \
$CellContext`newPathEntries, $CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st}, 
           If[$CellContext`dir == 
             "u", $CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2, $CellContext`moves, $CellContext`pm1, \
$CellContext`pm2, $CellContext`\[Epsilon]]; Null]; 
           If[$CellContext`dir == 
             "d", {$CellContext`s1t, $CellContext`s2t, $CellContext`g1t, \
$CellContext`g2t} = 
              Map[$CellContext`rotate180, {$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2}]; $CellContext`movest = 
              Map[$CellContext`rotate180inplace, $CellContext`moves]; \
$CellContext`pm1st = 
              Map[$CellContext`rotate180, $CellContext`pm1]; \
$CellContext`pm2st = 
              Map[$CellContext`rotate180, $CellContext`pm2]; \
$CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st, $CellContext`\[Epsilon]]; 
             Part[$CellContext`newPathEntries, 2] = $CellContext`rotate180[
                Part[$CellContext`newPathEntries, 2]]; 
             Part[$CellContext`newPathEntries, 3] = $CellContext`rotate180[
                Part[$CellContext`newPathEntries, 3]]; 
             Part[$CellContext`newPathEntries, 4] = 
              Map[$CellContext`rotate180inplace, 
                Part[$CellContext`newPathEntries, 4]]; 
             Part[$CellContext`newPathEntries, 5] = 
              Map[$CellContext`rotate180, 
                Part[$CellContext`newPathEntries, 5]]; 
             Part[$CellContext`newPathEntries, 6] = 
              Map[$CellContext`rotate180, 
                Part[$CellContext`newPathEntries, 6]]; Null]; 
           If[$CellContext`dir == 
             "r", {$CellContext`s1t, $CellContext`s2t, $CellContext`g1t, \
$CellContext`g2t} = 
              Map[$CellContext`rotate90, {$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2}]; $CellContext`movest = 
              Map[$CellContext`rotate90inplace, $CellContext`moves]; \
$CellContext`pm1st = 
              Map[$CellContext`rotate90, $CellContext`pm1]; \
$CellContext`pm2st = 
              Map[$CellContext`rotate90, $CellContext`pm2]; \
$CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st, $CellContext`\[Epsilon]]; 
             Part[$CellContext`newPathEntries, 2] = $CellContext`rotate270[
                Part[$CellContext`newPathEntries, 2]]; 
             Part[$CellContext`newPathEntries, 3] = $CellContext`rotate270[
                Part[$CellContext`newPathEntries, 3]]; 
             Part[$CellContext`newPathEntries, 4] = 
              Map[$CellContext`rotate270inplace, 
                Part[$CellContext`newPathEntries, 4]]; 
             Part[$CellContext`newPathEntries, 5] = 
              Map[$CellContext`rotate270, 
                Part[$CellContext`newPathEntries, 5]]; 
             Part[$CellContext`newPathEntries, 6] = 
              Map[$CellContext`rotate270, 
                Part[$CellContext`newPathEntries, 6]]]; 
           If[$CellContext`dir == 
             "l", {$CellContext`s1t, $CellContext`s2t, $CellContext`g1t, \
$CellContext`g2t} = 
              Map[$CellContext`rotate270, {$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2}]; $CellContext`movest = 
              Map[$CellContext`rotate270inplace, $CellContext`moves]; \
$CellContext`pm1st = 
              Map[$CellContext`rotate270, $CellContext`pm1]; \
$CellContext`pm2st = 
              Map[$CellContext`rotate270, $CellContext`pm2]; \
$CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st, $CellContext`\[Epsilon]]; 
             Part[$CellContext`newPathEntries, 2] = $CellContext`rotate90[
                Part[$CellContext`newPathEntries, 2]]; 
             Part[$CellContext`newPathEntries, 3] = $CellContext`rotate90[
                Part[$CellContext`newPathEntries, 3]]; 
             Part[$CellContext`newPathEntries, 4] = 
              Map[$CellContext`rotate90inplace, 
                Part[$CellContext`newPathEntries, 4]]; 
             Part[$CellContext`newPathEntries, 5] = Map[$CellContext`rotate90, 
                Part[$CellContext`newPathEntries, 5]]; 
             Part[$CellContext`newPathEntries, 6] = Map[$CellContext`rotate90, 
                Part[$CellContext`newPathEntries, 6]]]; 
           Return[$CellContext`newPathEntries]]], $CellContext`distanceMoved[
         Pattern[$CellContext`moves, 
          Blank[]]] := Total[
         Table[
          
          Norm[$CellContext`m], {$CellContext`m, $CellContext`moves}]], \
$CellContext`wallFrictionMoveUp[
         Pattern[$CellContext`r1in, 
          Blank[]], 
         Pattern[$CellContext`r2in, 
          Blank[]], 
         Pattern[$CellContext`g1in, 
          Blank[]], 
         Pattern[$CellContext`g2in, 
          Blank[]], 
         Pattern[$CellContext`moves, 
          Blank[]], 
         Pattern[$CellContext`pm1, 
          Blank[]], 
         Pattern[$CellContext`pm2, 
          Blank[]], 
         Pattern[$CellContext`\[Epsilon], 
          Blank[]]] := 
       Module[{$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2, $CellContext`\[CapitalDelta]gx, \
$CellContext`\[CapitalDelta]gy, $CellContext`m1, $CellContext`m2, \
$CellContext`r1out, $CellContext`r2out, $CellContext`\[CapitalDelta]tgx, \
$CellContext`\[CapitalDelta]tgy, $CellContext`\[CapitalDelta]ey, \
$CellContext`\[CapitalDelta]ex, $CellContext`L = 
          1, $CellContext`path1 = $CellContext`pm1, $CellContext`path2 = \
$CellContext`pm2, $CellContext`path, $CellContext`isMirrored = 
          False, $CellContext`isFlipped = 
          False}, {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2, $CellContext`isMirrored, $CellContext`isFlipped, \
$CellContext`path} = $CellContext`ensurer1r2[$CellContext`r1in, \
$CellContext`r2in, $CellContext`g1in, $CellContext`g2in, $CellContext`moves]; \
{$CellContext`\[CapitalDelta]gx, $CellContext`\[CapitalDelta]gy} = \
$CellContext`g2 - $CellContext`g1; If[Part[$CellContext`r2, 2] == 1, 
           
           Return[{Infinity, $CellContext`r1, $CellContext`r2, \
$CellContext`path, $CellContext`path1, $CellContext`path2, False}]]; 
         If[Part[$CellContext`r2, 1] - Part[$CellContext`r1, 1] - 
            
            1 > $CellContext`\[CapitalDelta]gx, \
$CellContext`\[CapitalDelta]tgx = 
           Part[$CellContext`r2, 1] - Part[$CellContext`r1, 1] - 
            1, $CellContext`\[CapitalDelta]tgx = \
$CellContext`\[CapitalDelta]gx]; 
         If[$CellContext`\[CapitalDelta]gy > 
           0, $CellContext`\[CapitalDelta]tgy = 
           0, $CellContext`\[CapitalDelta]tgy = \
$CellContext`\[CapitalDelta]gy]; 
         If[$CellContext`\[CapitalDelta]gy < 
           Part[$CellContext`r2, 2] - 
            Part[$CellContext`r1, 2], $CellContext`\[CapitalDelta]tgy = 
           Part[$CellContext`r2, 2] - Part[$CellContext`r1, 2], 
           Null, $CellContext`\[CapitalDelta]tgy = $CellContext`\
\[CapitalDelta]gy]; If[
           And[
           Part[$CellContext`r2, 1] - Part[$CellContext`r1, 1] - 1 + 
             2 $CellContext`\[Epsilon] <= $CellContext`\[CapitalDelta]tgx <= 
            1 - 2 $CellContext`\[Epsilon], 
            Part[$CellContext`r2, 2] - 
             Part[$CellContext`r1, 2] <= $CellContext`\[CapitalDelta]tgy <= 
            0], $CellContext`m1 = {((1 - Part[$CellContext`r1, 2])/(2 - 
               Part[$CellContext`g1, 2] - Part[$CellContext`r1, 2])) (
               Part[$CellContext`g1, 1] - Part[$CellContext`r1, 1]), 1 - 
              Part[$CellContext`r1, 2]}; 
           Null, $CellContext`m1 = {0, 1 - Part[$CellContext`r1, 2]}; Null]; 
         If[Part[$CellContext`r2, 1] + Part[$CellContext`m1, 1] > 1, 
           Part[$CellContext`m1, 1] = 1 - Part[$CellContext`r2, 1]]; 
         If[Part[$CellContext`r1, 1] + Part[$CellContext`m1, 1] < 0, 
           Part[$CellContext`m1, 1] = -Part[$CellContext`r1, 1]]; If[
           And[
           Part[$CellContext`r1, 1] + 
             Part[$CellContext`m1, 1] + $CellContext`\[CapitalDelta]tgx > 
            1, $CellContext`\[CapitalDelta]tgx > 0], 
           SubtractFrom[
            Part[$CellContext`m1, 1], $CellContext`\[CapitalDelta]tgx + 
            Part[$CellContext`r1, 1] + Part[$CellContext`m1, 1] - 1]]; If[
           And[
           Part[$CellContext`r1, 1] + 
             Part[$CellContext`m1, 1] + $CellContext`\[CapitalDelta]tgx < 
            0, $CellContext`\[CapitalDelta]tgx < 0], 
           AddTo[
            Part[$CellContext`m1, 1], Abs[$CellContext`\[CapitalDelta]tgx] - 
            Part[$CellContext`r1, 1] - Part[$CellContext`m1, 1]]]; 
         If[Part[$CellContext`r1, 2] == 1, $CellContext`m1 = {0, 0}, 
           If[Part[$CellContext`m1, 1] == 0, If[
              Or[
              Part[$CellContext`r1, 1] == 1, Part[$CellContext`r2, 1] == 1], 
              SubtractFrom[
               Part[$CellContext`m1, 1], $CellContext`\[Epsilon]]]; If[
              Or[
              Part[$CellContext`r1, 1] == 0, Part[$CellContext`r2, 1] == 0], 
              AddTo[
               Part[$CellContext`m1, 1], $CellContext`\[Epsilon]]]]]; 
         AddTo[$CellContext`r1, $CellContext`m1]; 
         AddTo[$CellContext`r2, $CellContext`m1]; {$CellContext`\
\[CapitalDelta]ex, $CellContext`\[CapitalDelta]ey} = {$CellContext`\
\[CapitalDelta]tgx, $CellContext`\[CapitalDelta]tgy} - ($CellContext`r2 - \
$CellContext`r1); If[$CellContext`\[CapitalDelta]ex >= 0, $CellContext`m2 = {
             
             Min[$CellContext`\[CapitalDelta]tgx - (Part[$CellContext`r2, 1] - 
              Part[$CellContext`r1, 1]), 1 - 
              Part[$CellContext`r2, 1]], $CellContext`\[CapitalDelta]tgy - (
             Part[$CellContext`r2, 2] - 
             Part[$CellContext`r1, 2])}, $CellContext`m2 = {
             
             Max[$CellContext`\[CapitalDelta]tgx - (Part[$CellContext`r2, 1] - 
              Part[$CellContext`r1, 1]), -
              Part[$CellContext`r2, 1]], $CellContext`\[CapitalDelta]tgy - (
             Part[$CellContext`r2, 2] - Part[$CellContext`r1, 2])}]; If[
           And[
           Part[$CellContext`r1, 1] - $CellContext`\[Epsilon]/2 <= 
            Part[$CellContext`r2, 1] + Part[$CellContext`m2, 1] <= 
            Part[$CellContext`r1, 1] + $CellContext`\[Epsilon]/2, 
            Part[$CellContext`r1, 2] == 
            Part[$CellContext`r2, 2] + Part[$CellContext`m2, 2]], 
           If[
           Part[$CellContext`r2, 1] + 
             Part[$CellContext`m2, 1] > $CellContext`L/2, 
            AddTo[
             Part[$CellContext`m2, 1], 
             Part[$CellContext`r1, 1] + $CellContext`\[Epsilon] - 
             Part[$CellContext`r2, 1] - Part[$CellContext`m2, 1]], 
            AddTo[
             Part[$CellContext`m2, 1], 
             Part[$CellContext`r1, 1] - $CellContext`\[Epsilon] - 
             Part[$CellContext`r2, 1] - Part[$CellContext`m2, 1]]]]; 
         If[Part[$CellContext`r2, 2] == 1, $CellContext`m2 = {0, 0}]; 
         If[$CellContext`m1 != {0, 0}, 
           AppendTo[$CellContext`path, $CellContext`m1]; {$CellContext`r1out, \
$CellContext`r2out} = $CellContext`returnr1r2[$CellContext`isFlipped, \
$CellContext`isMirrored, $CellContext`r1, $CellContext`r2]; 
           AppendTo[$CellContext`path1, $CellContext`r1out]; 
           AppendTo[$CellContext`path2, $CellContext`r2out]; Null]; 
         AddTo[$CellContext`r2, $CellContext`m2]; 
         AppendTo[$CellContext`path, $CellContext`m2]; {$CellContext`r1out, \
$CellContext`r2out} = $CellContext`returnr1r2[$CellContext`isFlipped, \
$CellContext`isMirrored, $CellContext`r1, $CellContext`r2]; 
         AppendTo[$CellContext`path1, $CellContext`r1out]; 
         AppendTo[$CellContext`path2, $CellContext`r2out]; 
         If[$CellContext`isMirrored, $CellContext`path = 
            Map[$CellContext`mirrorInplace, $CellContext`path]; Null]; Return[{
            If[
             
             And[-0.00001 < Part[$CellContext`m2, 1] < 0.00001, -0.00001 < 
              Part[$CellContext`m2, 2] < 0.00001], Infinity, 
             $CellContext`distanceMoved[$CellContext`path]], \
$CellContext`r1out, $CellContext`r2out, $CellContext`path, \
$CellContext`path1, $CellContext`path2, False}]], $CellContext`ensurer1r2[
         Pattern[$CellContext`r1in, 
          Blank[]], 
         Pattern[$CellContext`r2in, 
          Blank[]], 
         Pattern[$CellContext`g1in, 
          Blank[]], 
         Pattern[$CellContext`g2in, 
          Blank[]], 
         Pattern[$CellContext`moves, 
          Blank[]]] := 
       Module[{$CellContext`r1, $CellContext`r2, $CellContext`isFlipped, \
$CellContext`isMirrored, $CellContext`g1, $CellContext`g2, \
$CellContext`path}, $CellContext`isFlipped = False; $CellContext`isMirrored = 
          False; If[Part[$CellContext`r1in, 2] < Part[$CellContext`r2in, 2], 
           If[
           Part[$CellContext`r1in, 1] > 
            Part[$CellContext`r2in, 
              1], {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2} = {$CellContext`r2in, $CellContext`r1in, $CellContext`g2in, \
$CellContext`g1in}; $CellContext`isFlipped = 
             True; $CellContext`path = $CellContext`moves, {$CellContext`r1, \
$CellContext`r2, $CellContext`g1, $CellContext`g2} = 
             Map[$CellContext`mirror, {$CellContext`r2in, $CellContext`r1in, \
$CellContext`g2in, $CellContext`g1in}]; $CellContext`path = 
             Map[$CellContext`mirrorInplace, $CellContext`moves]; \
$CellContext`isFlipped = True; $CellContext`isMirrored = True], 
           If[Part[$CellContext`r1in, 1] > 
             Part[$CellContext`r2in, 
               1], {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2} = 
              Map[$CellContext`mirror, {$CellContext`r1in, $CellContext`r2in, \
$CellContext`g1in, $CellContext`g2in}]; $CellContext`path = 
              Map[$CellContext`mirrorInplace, $CellContext`moves]; \
$CellContext`isMirrored = 
              True, {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2} = {$CellContext`r1in, $CellContext`r2in, $CellContext`g1in, \
$CellContext`g2in}; $CellContext`path = $CellContext`moves]; Null]; 
         Return[{$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2, $CellContext`isMirrored, $CellContext`isFlipped, \
$CellContext`path}]], $CellContext`mirror[
         Pattern[$CellContext`r, 
          Blank[]]] := {1 - Part[$CellContext`r, 1], 
         Part[$CellContext`r, 2]}, $CellContext`mirrorInplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {-Part[$CellContext`r, 1], 
         Part[$CellContext`r, 2]}, $CellContext`returnr1r2[
         Pattern[$CellContext`isFlipped, 
          Blank[]], 
         Pattern[$CellContext`isMirrored, 
          Blank[]], 
         Pattern[$CellContext`r1, 
          Blank[]], 
         Pattern[$CellContext`r2, 
          Blank[]]] := 
       Module[{$CellContext`r1out, $CellContext`r2out}, 
         If[$CellContext`isMirrored, 
           
           If[$CellContext`isFlipped, $CellContext`r1out = \
$CellContext`mirror[$CellContext`r2]; $CellContext`r2out = \
$CellContext`mirror[$CellContext`r1], $CellContext`r1out = \
$CellContext`mirror[$CellContext`r1]; $CellContext`r2out = \
$CellContext`mirror[$CellContext`r2]], 
           
           If[$CellContext`isFlipped, $CellContext`r1out = $CellContext`r2; \
$CellContext`r2out = $CellContext`r1, $CellContext`r1out = $CellContext`r1; \
$CellContext`r2out = $CellContext`r2]]; 
         Return[{$CellContext`r1out, $CellContext`r2out}]], \
$CellContext`rotate180[
         Pattern[$CellContext`r, 
          Blank[]]] := {
        1 - Part[$CellContext`r, 1], 1 - 
         Part[$CellContext`r, 2]}, $CellContext`rotate180inplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {-Part[$CellContext`r, 1], -
         Part[$CellContext`r, 2]}, $CellContext`rotate90[
         Pattern[$CellContext`r, 
          Blank[]]] := {
         Part[$CellContext`r, 2], 1 - 
         Part[$CellContext`r, 1]}, $CellContext`rotate90inplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {
         Part[$CellContext`r, 2], -
         Part[$CellContext`r, 1]}, $CellContext`rotate270[
         Pattern[$CellContext`r, 
          Blank[]]] := {1 - Part[$CellContext`r, 2], 
         Part[$CellContext`r, 1]}, $CellContext`rotate270inplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {-Part[$CellContext`r, 2], 
         Part[$CellContext`r, 1]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.6978962166180763`*^9, 3.697896239881871*^9}, 
   3.697896312704867*^9, {3.697896347466239*^9, 3.6978964160336437`*^9}, {
   3.697896456155389*^9, 3.6978964789943027`*^9}, 3.697896514031601*^9, {
   3.6978965525548267`*^9, 3.697896557713891*^9}, {3.697896618061393*^9, 
   3.697896686626677*^9}, {3.697896834812799*^9, 3.697896918925959*^9}, {
   3.697896953685156*^9, 3.697896980277665*^9}, {3.6978970143326483`*^9, 
   3.697897075510014*^9}, {3.697897113387179*^9, 3.69789715167739*^9}, {
   3.6978972190068283`*^9, 3.6978972376386547`*^9}, 3.697897281025316*^9, {
   3.697897326722039*^9, 3.6978973756997766`*^9}},
 CellID->458271926]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
How can two particles in a 2D workspace that are steered by the same global \
control signal be moved to arbitrary final positions? This is difficult \
because the control input is symmetric. We provide an algorithm to bring the \
particles to the desired final positions with the shortest path using \
boundary interation (dark red boundaries) for symmetry breaking.\
\>", "ManipulateCaption",
 CellChangeTimes->{
  3.698062422401927*^9, {3.698062453185788*^9, 3.698062470744788*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`e1$$ = {0.7450000000000001, 
    0.416}, $CellContext`e2$$ = {0.349, 0.08}, $CellContext`ifMove$$ = 
    True, $CellContext`progress$$ = 1, $CellContext`s1$$ = {
    0.7270000000000001, 0.68}, $CellContext`s2$$ = {0.21700000000000003`, 
    0.644}, $CellContext`\[Epsilon]$$ = Rational[1, 20], Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`ifMove$$], True, 
       "\[CapitalDelta] Configuration Show"}, {True, False}}, {
      Hold[
       Row[{
         Manipulate`Place[1]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`progress$$], 1, "Progress"}, 0, 1, 
      Rational[1, 420]}, {{
       Hold[$CellContext`\[Epsilon]$$], 
       Rational[1, 20], "\[Epsilon]"}, 
      Rational[1, 1000], 
      Rational[1, 10], 
      Rational[1, 1000]}, {
      Hold[
       Row[{
         Manipulate`Place[2], 
         Manipulate`Place[3]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`s1$$], {0.95, 0.95}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}, {{
       Hold[$CellContext`s2$$], {0.2, 0.8}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}, {{
       Hold[$CellContext`e1$$], {0.05, 0.95}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}, {{
       Hold[$CellContext`e2$$], {0.33, 0.66}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}}, Typeset`size$$ = {
    600., {181., 186.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`ifMove$160239$$ = 
    False, $CellContext`progress$160240$$ = 
    0, $CellContext`\[Epsilon]$160241$$ = 0, $CellContext`s1$160242$$ = 
    0, $CellContext`s2$160243$$ = 0, $CellContext`e1$160244$$ = 
    0, $CellContext`e2$160245$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`e1$$ = {0.05, 0.95}, $CellContext`e2$$ = {
         0.33, 0.66}, $CellContext`ifMove$$ = True, $CellContext`progress$$ = 
        1, $CellContext`s1$$ = {0.95, 0.95}, $CellContext`s2$$ = {0.2, 
         0.8}, $CellContext`\[Epsilon]$$ = Rational[1, 20]}, 
      "ControllerVariables" :> {
        Hold[$CellContext`ifMove$$, $CellContext`ifMove$160239$$, False], 
        Hold[$CellContext`progress$$, $CellContext`progress$160240$$, 0], 
        Hold[$CellContext`\[Epsilon]$$, $CellContext`\[Epsilon]$160241$$, 0], 
        
        Hold[$CellContext`s1$$, $CellContext`s1$160242$$, 0], 
        Hold[$CellContext`s2$$, $CellContext`s2$160243$$, 0], 
        Hold[$CellContext`e1$$, $CellContext`e1$160244$$, 0], 
        Hold[$CellContext`e2$$, $CellContext`e2$160245$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`movesAndPositions$, $CellContext`path$, \
$CellContext`path1$, $CellContext`path2$, $CellContext`r$ = 
         1/40, $CellContext`thickness$ = 
         0.005, $CellContext`rotateSolution$, $CellContext`ps1$, \
$CellContext`pe1$, $CellContext`ps2$, $CellContext`pe2$, $CellContext`pm1$, \
$CellContext`pm2$, $CellContext`offset$, $CellContext`c1$ = 
         Blue, $CellContext`c2$ = 
         Magenta, $CellContext`mvNum$, $CellContext`mvFrac$}, \
{$CellContext`ps1$, $CellContext`pe1$, $CellContext`ps2$, $CellContext`pe2$} = \
{$CellContext`s1$$, $CellContext`e1$$, $CellContext`s2$$, $CellContext`e2$$}; \
{$CellContext`path$, $CellContext`path1$, $CellContext`path2$} = \
$CellContext`optimal2robotPath[$CellContext`ps1$, $CellContext`ps2$, \
$CellContext`pe1$, $CellContext`pe2$, $CellContext`\[Epsilon]$$]; \
$CellContext`mvNum$ = 
         Floor[$CellContext`progress$$ (Length[$CellContext`path$] - 
            1)]; $CellContext`mvFrac$ = 
         FractionalPart[$CellContext`progress$$ (Length[$CellContext`path$] - 
            1)]; $CellContext`pm2$ = 
         If[$CellContext`mvFrac$ > 0, 
           Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
             Span[1, All]] + $CellContext`mvFrac$ (
             Part[$CellContext`path2$, $CellContext`mvNum$ + 2, 
               Span[1, All]] - 
             Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
              Span[1, All]]), 
           Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
            Span[1, All]]]; $CellContext`pm1$ = 
         If[$CellContext`mvFrac$ > 0, 
           Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
             Span[1, All]] + $CellContext`mvFrac$ (
             Part[$CellContext`path1$, $CellContext`mvNum$ + 2, 
               Span[1, All]] - 
             Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
              Span[1, All]]), 
           Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
            Span[1, All]]]; Graphics[{{
            Darker[Red], 
            Rectangle[(-0.025) {1, 1}, 1.025 {1, 1}]}, {
            Lighter[Gray, 0.8], 
            Rectangle[{0, 0}, {1, 1}]}, {White, 
            
            Rectangle[{$CellContext`\[Epsilon]$$, $CellContext`\[Epsilon]$$}, \
{1 - $CellContext`\[Epsilon]$$, 1 - $CellContext`\[Epsilon]$$}]}, {
            Lighter[Gray, 0.8], 
            Disk[$CellContext`ps2$, $CellContext`\[Epsilon]$$]}, {
            Lighter[Gray, 0.8], 
            Disk[$CellContext`pe2$, $CellContext`\[Epsilon]$$]}, 
           PointSize[0.01], 
           Arrowheads[0.03], 
           Thickness[$CellContext`thickness$], {$CellContext`c1$, {
             Opacity[0.3], Dashed, 
             Arrow[{$CellContext`ps1$, $CellContext`pe1$}]}, 
            Point[$CellContext`ps1$], 
            EdgeForm[
             Directive[$CellContext`c1$, 
              Thickness[$CellContext`thickness$]]], 
            FaceForm[None], 
            
            Rectangle[$CellContext`ps1$ - (2/3) $CellContext`r$ {1, 
              1}, $CellContext`ps1$ + (2/3) $CellContext`r$ {1, 1}], 
            Circle[$CellContext`pe1$, $CellContext`r$]}, {$CellContext`c2$, {
             Opacity[0.3], Dashed, 
             Arrow[{$CellContext`ps2$, $CellContext`pe2$}]}, 
            Point[$CellContext`ps2$], 
            EdgeForm[
             Directive[$CellContext`c2$, 
              Thickness[$CellContext`thickness$]]], 
            FaceForm[None], 
            
            Rectangle[$CellContext`ps2$ - (2/3) $CellContext`r$ {1, 
              1}, $CellContext`ps2$ + (2/3) $CellContext`r$ {1, 1}], 
            Circle[$CellContext`pe2$, $CellContext`r$]}, {$CellContext`c1$, 
            Table[
             Arrow[{
               Part[$CellContext`path1$, $CellContext`i, 
                Span[1, All]], 
               Part[$CellContext`path1$, $CellContext`i + 1, 
                Span[1, All]]}], {$CellContext`i, 1, $CellContext`mvNum$}], 
            Arrow[{
              Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
               Span[1, All]], $CellContext`pm1$}], {
             If[
              Or[
              Part[$CellContext`pm1$, 1] == 0, Part[$CellContext`pm1$, 2] == 
               0, Part[$CellContext`pm1$, 1] == 1, Part[$CellContext`pm1$, 2] == 
               1], {
               Point[$CellContext`pm1$], 
               PointSize[0.005], White, 
               Point[$CellContext`pm1$]}, 
              Point[$CellContext`pm1$]]}}, {$CellContext`c2$, 
            Table[
             Arrow[{
               Part[$CellContext`path2$, $CellContext`i, 
                Span[1, All]], 
               Part[$CellContext`path2$, $CellContext`i + 1, 
                Span[1, All]]}], {$CellContext`i, 1, $CellContext`mvNum$}], 
            Arrow[{
              Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
               Span[1, All]], $CellContext`pm2$}], {
             If[
              Or[
              Part[$CellContext`pm2$, 1] == 0, Part[$CellContext`pm2$, 2] == 
               0, Part[$CellContext`pm2$, 1] == 1, Part[$CellContext`pm2$, 2] == 
               1], {
               Point[$CellContext`pm2$], 
               PointSize[0.005], White, 
               Point[$CellContext`pm2$]}, 
              Point[$CellContext`pm2$]]}}, 
           If[$CellContext`ifMove$$ == True, 
            Inset[
             
             RegionPlot[$CellContext`x < -3, {$CellContext`x, -1, 
               1}, {$CellContext`y, -1, 1}, Epilog -> {{LightBlue, 
                 EdgeForm[Blue], 
                 If[Part[$CellContext`pm1$, 1] < Part[$CellContext`pm2$, 1], 
                  
                  Rectangle[{
                   Part[$CellContext`pm2$, 1] - 1 - 
                    Part[$CellContext`pm1$, 1], Part[$CellContext`pm2$, 2] - 
                    Part[$CellContext`pm1$, 2]}, {1, 0}], 
                  
                  Rectangle[{
                   1 - Part[$CellContext`pm1$, 1] + 
                    Part[$CellContext`pm2$, 1], Part[$CellContext`pm2$, 2] - 
                    Part[$CellContext`pm1$, 2]}, {-1, 0}]]}, {LightGreen, 
                 EdgeForm[Green], 
                 Opacity[0.5], 
                 If[Part[$CellContext`pm1$, 2] > Part[$CellContext`pm2$, 2], 
                  
                  Rectangle[{0, -1}, {
                   Part[$CellContext`pm2$, 1] - Part[$CellContext`pm1$, 1], 1 + 
                    Part[$CellContext`pm2$, 2] - Part[$CellContext`pm1$, 2]}], 
                  
                  Rectangle[{0, 1}, {
                   Part[$CellContext`pm2$, 1] - 
                    Part[$CellContext`pm1$, 1], -(1 + 
                    Part[$CellContext`pm1$, 2] - 
                    Part[$CellContext`pm2$, 2])}]]}, Green, 
                
                Disk[$CellContext`pe2$ - $CellContext`pe1$, 
                 2 $CellContext`r$], 
                Text[
                 Style[
                  StringForm["\[CapitalDelta]r"], FontSize -> 16, Black, 
                  FontFamily -> "Times"], {
                 Part[$CellContext`pm2$, 1] - Part[$CellContext`pm1$, 1] - 
                  0.1, Part[$CellContext`pm2$, 2] - 
                  Part[$CellContext`pm1$, 2] - 0.1}], Red, 
                
                Rectangle[$CellContext`pm2$ - $CellContext`pm1$ - (4/
                  3) $CellContext`r$ {1, 
                  1}, $CellContext`pm2$ - $CellContext`pm1$ + (4/
                   3) $CellContext`r$ {1, 1}], 
                Text[
                 Style[
                  StringForm["\[CapitalDelta]g"], FontSize -> 16, Black, 
                  FontFamily -> "Times"], {
                 Part[$CellContext`pe2$, 1] - Part[$CellContext`pe1$, 1] + 
                  0.1, Part[$CellContext`pe2$, 2] - 
                  Part[$CellContext`pe1$, 2] + 0.1}]}, 
              FrameLabel -> {"\[CapitalDelta]x", "\[CapitalDelta]y"}, 
              LabelStyle -> Directive[Black, Bold], ImageSize -> 230], {1.38, 
             0.45}], {
            If[$CellContext`mvNum$ + 1 == 
               Length[$CellContext`path$], {$CellContext`mvNum$ = 
                Length[$CellContext`path$] - 2, $CellContext`mvFrac$ = 1}]; 
             Darker[Red], 
             Text[
              Style[
               StringForm[
               "Move `` of ``", $CellContext`mvNum$ + 1, 
                Length[$CellContext`path$] - 1], FontSize -> 18], {1.4, 0.9}], 
             Text[
              Style[
               StringForm["Total Distance `` ", 
                Round[
                 N[
                  Total[
                   Table[
                    EuclideanDistance[
                    Part[$CellContext`path$, $CellContext`i], {0, 
                    0}], {$CellContext`i, 2, 
                    Length[$CellContext`path$]}]]], 0.01]], FontSize -> 18], {
              1.4, 0.8}], $CellContext`offset$ = {1.55, 0.5} - (1/2) 
               Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                 Span[1, All]]; {
               Opacity[0.3], 
               
               Arrow[{$CellContext`offset$, $CellContext`offset$ + 
                 Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                   Span[1, All]]}]}, 
             
             Point[$CellContext`offset$ + $CellContext`mvFrac$ 
               Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                 Span[1, All]]], 
             
             Arrow[{$CellContext`offset$, $CellContext`offset$ + \
$CellContext`mvFrac$ Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                  Span[1, All]]}]}]}, ImageSize -> 600, 
          PlotRange -> {{-0.05, 1.75}, {-0.05, 1.05}}]], 
      "Specifications" :> {{{$CellContext`ifMove$$, True, 
          "\[CapitalDelta] Configuration Show"}, {True, False}, Appearance -> 
         "Labeled", ControlPlacement -> 1}, 
        Row[{
          Manipulate`Place[1]}], {{$CellContext`progress$$, 1, "Progress"}, 0,
          1, 
         Rational[1, 420], ControlType -> Slider, Appearance -> "Labeled", 
         ControlPlacement -> 2}, {{$CellContext`\[Epsilon]$$, 
          Rational[1, 20], "\[Epsilon]"}, 
         Rational[1, 1000], 
         Rational[1, 10], 
         Rational[1, 1000], ControlType -> Slider, Appearance -> "Labeled", 
         ControlPlacement -> 3}, 
        Row[{
          Manipulate`Place[2], 
          Manipulate`Place[3]}], {{$CellContext`s1$$, {0.95, 0.95}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}, {{$CellContext`s2$$, {0.2, 0.8}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}, {{$CellContext`e1$$, {0.05, 0.95}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}, {{$CellContext`e2$$, {0.33, 0.66}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{649., {240., 245.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`optimal2robotPath[
         Pattern[$CellContext`s1, 
          Blank[]], 
         Pattern[$CellContext`s2, 
          Blank[]], 
         Pattern[$CellContext`g1, 
          Blank[]], 
         Pattern[$CellContext`g2, 
          Blank[]], 
         Pattern[$CellContext`\[Epsilon], 
          Blank[]]] := 
       Module[{$CellContext`optimalPathList, $CellContext`pathToExplore, \
$CellContext`r1, $CellContext`r2, $CellContext`wallMoves, $CellContext`moves, \
$CellContext`pm1, $CellContext`pm2}, $CellContext`pathToExplore = {
           Infinity, $CellContext`s1, $CellContext`s2, {{0, 
            0}}, {$CellContext`s1}, {$CellContext`s2}, 
            False}; $CellContext`optimalPathList = \
{$CellContext`pathToExplore}; 
         While[Part[$CellContext`pathToExplore, 7] != 
           True, $CellContext`r1 = 
            Part[$CellContext`pathToExplore, 2]; $CellContext`r2 = 
            Part[$CellContext`pathToExplore, 3]; $CellContext`moves = 
            Part[$CellContext`pathToExplore, 4]; $CellContext`pm1 = 
            Part[$CellContext`pathToExplore, 5]; $CellContext`pm2 = 
            Part[$CellContext`pathToExplore, 6]; 
           Table[$CellContext`wallMoves = \
$CellContext`wallFrictionMoveDir[$CellContext`dir, $CellContext`r1, \
$CellContext`r2, $CellContext`g1, $CellContext`g2, $CellContext`moves, \
$CellContext`pm1, $CellContext`pm2, $CellContext`\[Epsilon]]; \
$CellContext`optimalPathList = 
              AppendTo[$CellContext`optimalPathList, $CellContext`wallMoves]; 
             Null, {$CellContext`dir, {
              "u", "d", "l", "r"}}]; $CellContext`optimalPathList = 
            SortBy[$CellContext`optimalPathList, 
              First]; $CellContext`pathToExplore = 
            First[$CellContext`optimalPathList]; $CellContext`optimalPathList = 
            Delete[$CellContext`optimalPathList, 1]; Null]; Return[{
            Part[
             Part[$CellContext`optimalPathList, 1], 4], 
            Part[
             Part[$CellContext`optimalPathList, 1], 5], 
            Part[
             Part[$CellContext`optimalPathList, 1], 
             6]}]], $CellContext`wallFrictionMoveDir[
         Pattern[$CellContext`dir, 
          Blank[]], 
         Pattern[$CellContext`s1, 
          Blank[]], 
         Pattern[$CellContext`s2, 
          Blank[]], 
         Pattern[$CellContext`g1, 
          Blank[]], 
         Pattern[$CellContext`g2, 
          Blank[]], 
         Pattern[$CellContext`moves, 
          Blank[]], 
         Pattern[$CellContext`pm1, 
          Blank[]], 
         Pattern[$CellContext`pm2, 
          Blank[]], 
         Pattern[$CellContext`\[Epsilon], 
          Blank[]]] := 
       Module[{$CellContext`\[CapitalDelta]ex, \
$CellContext`\[CapitalDelta]ey, $CellContext`path = $CellContext`moves, \
$CellContext`path1 = $CellContext`pm1, $CellContext`path2 = \
$CellContext`pm2}, {$CellContext`\[CapitalDelta]ex, $CellContext`\
\[CapitalDelta]ey} = ($CellContext`g2 - $CellContext`g1) - ($CellContext`s2 - \
$CellContext`s1); If[
           And[-0.00001 <= $CellContext`\[CapitalDelta]ex <= 0.00001, 
            
            Inequality[-0.00001, LessEqual, $CellContext`\[CapitalDelta]ey, 
             Less, 0.00001]], 
           AppendTo[$CellContext`path, {
             Part[$CellContext`g2, 1] - Part[$CellContext`s2, 1], 
              Part[$CellContext`g2, 2] - Part[$CellContext`s2, 2]}]; 
           AppendTo[$CellContext`path1, $CellContext`g1]; 
           AppendTo[$CellContext`path2, $CellContext`g2]; Return[{
              $CellContext`distanceMoved[$CellContext`path], $CellContext`g1, \
$CellContext`g2, $CellContext`path, $CellContext`path1, $CellContext`path2, 
              True}]]; 
         Module[{$CellContext`r1, $CellContext`r2, \
$CellContext`newPathEntries, $CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st}, 
           If[$CellContext`dir == 
             "u", $CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2, $CellContext`moves, $CellContext`pm1, \
$CellContext`pm2, $CellContext`\[Epsilon]]; Null]; 
           If[$CellContext`dir == 
             "d", {$CellContext`s1t, $CellContext`s2t, $CellContext`g1t, \
$CellContext`g2t} = 
              Map[$CellContext`rotate180, {$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2}]; $CellContext`movest = 
              Map[$CellContext`rotate180inplace, $CellContext`moves]; \
$CellContext`pm1st = 
              Map[$CellContext`rotate180, $CellContext`pm1]; \
$CellContext`pm2st = 
              Map[$CellContext`rotate180, $CellContext`pm2]; \
$CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st, $CellContext`\[Epsilon]]; 
             Part[$CellContext`newPathEntries, 2] = $CellContext`rotate180[
                Part[$CellContext`newPathEntries, 2]]; 
             Part[$CellContext`newPathEntries, 3] = $CellContext`rotate180[
                Part[$CellContext`newPathEntries, 3]]; 
             Part[$CellContext`newPathEntries, 4] = 
              Map[$CellContext`rotate180inplace, 
                Part[$CellContext`newPathEntries, 4]]; 
             Part[$CellContext`newPathEntries, 5] = 
              Map[$CellContext`rotate180, 
                Part[$CellContext`newPathEntries, 5]]; 
             Part[$CellContext`newPathEntries, 6] = 
              Map[$CellContext`rotate180, 
                Part[$CellContext`newPathEntries, 6]]; Null]; 
           If[$CellContext`dir == 
             "r", {$CellContext`s1t, $CellContext`s2t, $CellContext`g1t, \
$CellContext`g2t} = 
              Map[$CellContext`rotate90, {$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2}]; $CellContext`movest = 
              Map[$CellContext`rotate90inplace, $CellContext`moves]; \
$CellContext`pm1st = 
              Map[$CellContext`rotate90, $CellContext`pm1]; \
$CellContext`pm2st = 
              Map[$CellContext`rotate90, $CellContext`pm2]; \
$CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st, $CellContext`\[Epsilon]]; 
             Part[$CellContext`newPathEntries, 2] = $CellContext`rotate270[
                Part[$CellContext`newPathEntries, 2]]; 
             Part[$CellContext`newPathEntries, 3] = $CellContext`rotate270[
                Part[$CellContext`newPathEntries, 3]]; 
             Part[$CellContext`newPathEntries, 4] = 
              Map[$CellContext`rotate270inplace, 
                Part[$CellContext`newPathEntries, 4]]; 
             Part[$CellContext`newPathEntries, 5] = 
              Map[$CellContext`rotate270, 
                Part[$CellContext`newPathEntries, 5]]; 
             Part[$CellContext`newPathEntries, 6] = 
              Map[$CellContext`rotate270, 
                Part[$CellContext`newPathEntries, 6]]]; 
           If[$CellContext`dir == 
             "l", {$CellContext`s1t, $CellContext`s2t, $CellContext`g1t, \
$CellContext`g2t} = 
              Map[$CellContext`rotate270, {$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2}]; $CellContext`movest = 
              Map[$CellContext`rotate270inplace, $CellContext`moves]; \
$CellContext`pm1st = 
              Map[$CellContext`rotate270, $CellContext`pm1]; \
$CellContext`pm2st = 
              Map[$CellContext`rotate270, $CellContext`pm2]; \
$CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st, $CellContext`\[Epsilon]]; 
             Part[$CellContext`newPathEntries, 2] = $CellContext`rotate90[
                Part[$CellContext`newPathEntries, 2]]; 
             Part[$CellContext`newPathEntries, 3] = $CellContext`rotate90[
                Part[$CellContext`newPathEntries, 3]]; 
             Part[$CellContext`newPathEntries, 4] = 
              Map[$CellContext`rotate90inplace, 
                Part[$CellContext`newPathEntries, 4]]; 
             Part[$CellContext`newPathEntries, 5] = Map[$CellContext`rotate90, 
                Part[$CellContext`newPathEntries, 5]]; 
             Part[$CellContext`newPathEntries, 6] = Map[$CellContext`rotate90, 
                Part[$CellContext`newPathEntries, 6]]]; 
           Return[$CellContext`newPathEntries]]], $CellContext`distanceMoved[
         Pattern[$CellContext`moves, 
          Blank[]]] := Total[
         Table[
          
          Norm[$CellContext`m], {$CellContext`m, $CellContext`moves}]], \
$CellContext`wallFrictionMoveUp[
         Pattern[$CellContext`r1in, 
          Blank[]], 
         Pattern[$CellContext`r2in, 
          Blank[]], 
         Pattern[$CellContext`g1in, 
          Blank[]], 
         Pattern[$CellContext`g2in, 
          Blank[]], 
         Pattern[$CellContext`moves, 
          Blank[]], 
         Pattern[$CellContext`pm1, 
          Blank[]], 
         Pattern[$CellContext`pm2, 
          Blank[]], 
         Pattern[$CellContext`\[Epsilon], 
          Blank[]]] := 
       Module[{$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2, $CellContext`\[CapitalDelta]gx, \
$CellContext`\[CapitalDelta]gy, $CellContext`m1, $CellContext`m2, \
$CellContext`r1out, $CellContext`r2out, $CellContext`\[CapitalDelta]tgx, \
$CellContext`\[CapitalDelta]tgy, $CellContext`\[CapitalDelta]ey, \
$CellContext`\[CapitalDelta]ex, $CellContext`L = 
          1, $CellContext`path1 = $CellContext`pm1, $CellContext`path2 = \
$CellContext`pm2, $CellContext`path, $CellContext`isMirrored = 
          False, $CellContext`isFlipped = 
          False}, {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2, $CellContext`isMirrored, $CellContext`isFlipped, \
$CellContext`path} = $CellContext`ensurer1r2[$CellContext`r1in, \
$CellContext`r2in, $CellContext`g1in, $CellContext`g2in, $CellContext`moves]; \
{$CellContext`\[CapitalDelta]gx, $CellContext`\[CapitalDelta]gy} = \
$CellContext`g2 - $CellContext`g1; If[Part[$CellContext`r2, 2] == 1, 
           
           Return[{Infinity, $CellContext`r1, $CellContext`r2, \
$CellContext`path, $CellContext`path1, $CellContext`path2, False}]]; 
         If[Part[$CellContext`r2, 1] - Part[$CellContext`r1, 1] - 
            
            1 > $CellContext`\[CapitalDelta]gx, \
$CellContext`\[CapitalDelta]tgx = 
           Part[$CellContext`r2, 1] - Part[$CellContext`r1, 1] - 
            1, $CellContext`\[CapitalDelta]tgx = \
$CellContext`\[CapitalDelta]gx]; 
         If[$CellContext`\[CapitalDelta]gy > 
           0, $CellContext`\[CapitalDelta]tgy = 
           0, $CellContext`\[CapitalDelta]tgy = \
$CellContext`\[CapitalDelta]gy]; 
         If[$CellContext`\[CapitalDelta]gy < 
           Part[$CellContext`r2, 2] - 
            Part[$CellContext`r1, 2], $CellContext`\[CapitalDelta]tgy = 
           Part[$CellContext`r2, 2] - Part[$CellContext`r1, 2], 
           Null, $CellContext`\[CapitalDelta]tgy = $CellContext`\
\[CapitalDelta]gy]; If[
           And[
           Part[$CellContext`r2, 1] - Part[$CellContext`r1, 1] - 1 + 
             2 $CellContext`\[Epsilon] <= $CellContext`\[CapitalDelta]tgx <= 
            1 - 2 $CellContext`\[Epsilon], 
            Part[$CellContext`r2, 2] - 
             Part[$CellContext`r1, 2] <= $CellContext`\[CapitalDelta]tgy <= 
            0], $CellContext`m1 = {((1 - Part[$CellContext`r1, 2])/(2 - 
               Part[$CellContext`g1, 2] - Part[$CellContext`r1, 2])) (
               Part[$CellContext`g1, 1] - Part[$CellContext`r1, 1]), 1 - 
              Part[$CellContext`r1, 2]}; 
           Null, $CellContext`m1 = {0, 1 - Part[$CellContext`r1, 2]}; Null]; 
         If[Part[$CellContext`r2, 1] + Part[$CellContext`m1, 1] > 1, 
           Part[$CellContext`m1, 1] = 1 - Part[$CellContext`r2, 1]]; 
         If[Part[$CellContext`r1, 1] + Part[$CellContext`m1, 1] < 0, 
           Part[$CellContext`m1, 1] = -Part[$CellContext`r1, 1]]; If[
           And[
           Part[$CellContext`r1, 1] + 
             Part[$CellContext`m1, 1] + $CellContext`\[CapitalDelta]tgx > 
            1, $CellContext`\[CapitalDelta]tgx > 0], 
           SubtractFrom[
            Part[$CellContext`m1, 1], $CellContext`\[CapitalDelta]tgx + 
            Part[$CellContext`r1, 1] + Part[$CellContext`m1, 1] - 1]]; If[
           And[
           Part[$CellContext`r1, 1] + 
             Part[$CellContext`m1, 1] + $CellContext`\[CapitalDelta]tgx < 
            0, $CellContext`\[CapitalDelta]tgx < 0], 
           AddTo[
            Part[$CellContext`m1, 1], Abs[$CellContext`\[CapitalDelta]tgx] - 
            Part[$CellContext`r1, 1] - Part[$CellContext`m1, 1]]]; 
         If[Part[$CellContext`r1, 2] == 1, $CellContext`m1 = {0, 0}, 
           If[Part[$CellContext`m1, 1] == 0, If[
              Or[
              Part[$CellContext`r1, 1] == 1, Part[$CellContext`r2, 1] == 1], 
              SubtractFrom[
               Part[$CellContext`m1, 1], $CellContext`\[Epsilon]]]; If[
              Or[
              Part[$CellContext`r1, 1] == 0, Part[$CellContext`r2, 1] == 0], 
              AddTo[
               Part[$CellContext`m1, 1], $CellContext`\[Epsilon]]]]]; 
         AddTo[$CellContext`r1, $CellContext`m1]; 
         AddTo[$CellContext`r2, $CellContext`m1]; {$CellContext`\
\[CapitalDelta]ex, $CellContext`\[CapitalDelta]ey} = {$CellContext`\
\[CapitalDelta]tgx, $CellContext`\[CapitalDelta]tgy} - ($CellContext`r2 - \
$CellContext`r1); If[$CellContext`\[CapitalDelta]ex >= 0, $CellContext`m2 = {
             
             Min[$CellContext`\[CapitalDelta]tgx - (Part[$CellContext`r2, 1] - 
              Part[$CellContext`r1, 1]), 1 - 
              Part[$CellContext`r2, 1]], $CellContext`\[CapitalDelta]tgy - (
             Part[$CellContext`r2, 2] - 
             Part[$CellContext`r1, 2])}, $CellContext`m2 = {
             
             Max[$CellContext`\[CapitalDelta]tgx - (Part[$CellContext`r2, 1] - 
              Part[$CellContext`r1, 1]), -
              Part[$CellContext`r2, 1]], $CellContext`\[CapitalDelta]tgy - (
             Part[$CellContext`r2, 2] - Part[$CellContext`r1, 2])}]; If[
           And[
           Part[$CellContext`r1, 1] - $CellContext`\[Epsilon]/2 <= 
            Part[$CellContext`r2, 1] + Part[$CellContext`m2, 1] <= 
            Part[$CellContext`r1, 1] + $CellContext`\[Epsilon]/2, 
            Part[$CellContext`r1, 2] == 
            Part[$CellContext`r2, 2] + Part[$CellContext`m2, 2]], 
           If[
           Part[$CellContext`r2, 1] + 
             Part[$CellContext`m2, 1] > $CellContext`L/2, 
            AddTo[
             Part[$CellContext`m2, 1], 
             Part[$CellContext`r1, 1] + $CellContext`\[Epsilon] - 
             Part[$CellContext`r2, 1] - Part[$CellContext`m2, 1]], 
            AddTo[
             Part[$CellContext`m2, 1], 
             Part[$CellContext`r1, 1] - $CellContext`\[Epsilon] - 
             Part[$CellContext`r2, 1] - Part[$CellContext`m2, 1]]]]; 
         If[Part[$CellContext`r2, 2] == 1, $CellContext`m2 = {0, 0}]; 
         If[$CellContext`m1 != {0, 0}, 
           AppendTo[$CellContext`path, $CellContext`m1]; {$CellContext`r1out, \
$CellContext`r2out} = $CellContext`returnr1r2[$CellContext`isFlipped, \
$CellContext`isMirrored, $CellContext`r1, $CellContext`r2]; 
           AppendTo[$CellContext`path1, $CellContext`r1out]; 
           AppendTo[$CellContext`path2, $CellContext`r2out]; Null]; 
         AddTo[$CellContext`r2, $CellContext`m2]; 
         AppendTo[$CellContext`path, $CellContext`m2]; {$CellContext`r1out, \
$CellContext`r2out} = $CellContext`returnr1r2[$CellContext`isFlipped, \
$CellContext`isMirrored, $CellContext`r1, $CellContext`r2]; 
         AppendTo[$CellContext`path1, $CellContext`r1out]; 
         AppendTo[$CellContext`path2, $CellContext`r2out]; 
         If[$CellContext`isMirrored, $CellContext`path = 
            Map[$CellContext`mirrorInplace, $CellContext`path]; Null]; Return[{
            If[
             
             And[-0.00001 < Part[$CellContext`m2, 1] < 0.00001, -0.00001 < 
              Part[$CellContext`m2, 2] < 0.00001], Infinity, 
             $CellContext`distanceMoved[$CellContext`path]], \
$CellContext`r1out, $CellContext`r2out, $CellContext`path, \
$CellContext`path1, $CellContext`path2, False}]], $CellContext`ensurer1r2[
         Pattern[$CellContext`r1in, 
          Blank[]], 
         Pattern[$CellContext`r2in, 
          Blank[]], 
         Pattern[$CellContext`g1in, 
          Blank[]], 
         Pattern[$CellContext`g2in, 
          Blank[]], 
         Pattern[$CellContext`moves, 
          Blank[]]] := 
       Module[{$CellContext`r1, $CellContext`r2, $CellContext`isFlipped, \
$CellContext`isMirrored, $CellContext`g1, $CellContext`g2, \
$CellContext`path}, $CellContext`isFlipped = False; $CellContext`isMirrored = 
          False; If[Part[$CellContext`r1in, 2] < Part[$CellContext`r2in, 2], 
           If[
           Part[$CellContext`r1in, 1] > 
            Part[$CellContext`r2in, 
              1], {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2} = {$CellContext`r2in, $CellContext`r1in, $CellContext`g2in, \
$CellContext`g1in}; $CellContext`isFlipped = 
             True; $CellContext`path = $CellContext`moves, {$CellContext`r1, \
$CellContext`r2, $CellContext`g1, $CellContext`g2} = 
             Map[$CellContext`mirror, {$CellContext`r2in, $CellContext`r1in, \
$CellContext`g2in, $CellContext`g1in}]; $CellContext`path = 
             Map[$CellContext`mirrorInplace, $CellContext`moves]; \
$CellContext`isFlipped = True; $CellContext`isMirrored = True], 
           If[Part[$CellContext`r1in, 1] > 
             Part[$CellContext`r2in, 
               1], {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2} = 
              Map[$CellContext`mirror, {$CellContext`r1in, $CellContext`r2in, \
$CellContext`g1in, $CellContext`g2in}]; $CellContext`path = 
              Map[$CellContext`mirrorInplace, $CellContext`moves]; \
$CellContext`isMirrored = 
              True, {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2} = {$CellContext`r1in, $CellContext`r2in, $CellContext`g1in, \
$CellContext`g2in}; $CellContext`path = $CellContext`moves]; Null]; 
         Return[{$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2, $CellContext`isMirrored, $CellContext`isFlipped, \
$CellContext`path}]], $CellContext`mirror[
         Pattern[$CellContext`r, 
          Blank[]]] := {1 - Part[$CellContext`r, 1], 
         Part[$CellContext`r, 2]}, $CellContext`mirrorInplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {-Part[$CellContext`r, 1], 
         Part[$CellContext`r, 2]}, $CellContext`returnr1r2[
         Pattern[$CellContext`isFlipped, 
          Blank[]], 
         Pattern[$CellContext`isMirrored, 
          Blank[]], 
         Pattern[$CellContext`r1, 
          Blank[]], 
         Pattern[$CellContext`r2, 
          Blank[]]] := 
       Module[{$CellContext`r1out, $CellContext`r2out}, 
         If[$CellContext`isMirrored, 
           
           If[$CellContext`isFlipped, $CellContext`r1out = \
$CellContext`mirror[$CellContext`r2]; $CellContext`r2out = \
$CellContext`mirror[$CellContext`r1], $CellContext`r1out = \
$CellContext`mirror[$CellContext`r1]; $CellContext`r2out = \
$CellContext`mirror[$CellContext`r2]], 
           
           If[$CellContext`isFlipped, $CellContext`r1out = $CellContext`r2; \
$CellContext`r2out = $CellContext`r1, $CellContext`r1out = $CellContext`r1; \
$CellContext`r2out = $CellContext`r2]]; 
         Return[{$CellContext`r1out, $CellContext`r2out}]], \
$CellContext`rotate180[
         Pattern[$CellContext`r, 
          Blank[]]] := {
        1 - Part[$CellContext`r, 1], 1 - 
         Part[$CellContext`r, 2]}, $CellContext`rotate180inplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {-Part[$CellContext`r, 1], -
         Part[$CellContext`r, 2]}, $CellContext`rotate90[
         Pattern[$CellContext`r, 
          Blank[]]] := {
         Part[$CellContext`r, 2], 1 - 
         Part[$CellContext`r, 1]}, $CellContext`rotate90inplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {
         Part[$CellContext`r, 2], -
         Part[$CellContext`r, 1]}, $CellContext`rotate270[
         Pattern[$CellContext`r, 
          Blank[]]] := {1 - Part[$CellContext`r, 2], 
         Part[$CellContext`r, 1]}, $CellContext`rotate270inplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {-Part[$CellContext`r, 2], 
         Part[$CellContext`r, 1]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.6978962166180763`*^9, 3.697896239881871*^9}, 
   3.697896312704867*^9, {3.697896347466239*^9, 3.6978964160336437`*^9}, {
   3.697896456155389*^9, 3.6978964789943027`*^9}, 3.697896514031601*^9, {
   3.6978965525548267`*^9, 3.697896557713891*^9}, {3.697896618061393*^9, 
   3.697896686626677*^9}, {3.697896834812799*^9, 3.697896918925959*^9}, {
   3.697896953685156*^9, 3.697896980277665*^9}, {3.6978970143326483`*^9, 
   3.697897075510014*^9}, {3.697897113387179*^9, 3.69789715167739*^9}, {
   3.6978972190068283`*^9, 3.6978972376386547`*^9}, 3.697897281025316*^9, {
   3.697897326722039*^9, 3.6978973756997766`*^9}},
 CellID->479992963]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[{
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`e1$$ = {0.1, 0.9}, $CellContext`e2$$ = {
    0.898, 0.9}, $CellContext`ifMove$$ = True, $CellContext`progress$$ = 
    1, $CellContext`s1$$ = {0.9, 0.9}, $CellContext`s2$$ = {
    0.10600000000000001`, 0.896}, $CellContext`\[Epsilon]$$ = Rational[
    13, 500], Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`ifMove$$], True, 
       "\[CapitalDelta] Configuration Show"}, {True, False}}, {
      Hold[
       Row[{
         Manipulate`Place[1]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`progress$$], 1, "Progress"}, 0, 1, 
      Rational[1, 420]}, {{
       Hold[$CellContext`\[Epsilon]$$], 
       Rational[1, 20], "\[Epsilon]"}, 
      Rational[1, 1000], 
      Rational[1, 10], 
      Rational[1, 1000]}, {
      Hold[
       Row[{
         Manipulate`Place[2], 
         Manipulate`Place[3]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`s1$$], {0.95, 0.95}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}, {{
       Hold[$CellContext`s2$$], {0.2, 0.8}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}, {{
       Hold[$CellContext`e1$$], {0.05, 0.95}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}, {{
       Hold[$CellContext`e2$$], {0.33, 0.66}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}}, Typeset`size$$ = {
    600., {181., 186.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`ifMove$160239$$ = 
    False, $CellContext`progress$160240$$ = 
    0, $CellContext`\[Epsilon]$160241$$ = 0, $CellContext`s1$160242$$ = 
    0, $CellContext`s2$160243$$ = 0, $CellContext`e1$160244$$ = 
    0, $CellContext`e2$160245$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`e1$$ = {0.05, 0.95}, $CellContext`e2$$ = {
         0.33, 0.66}, $CellContext`ifMove$$ = True, $CellContext`progress$$ = 
        1, $CellContext`s1$$ = {0.95, 0.95}, $CellContext`s2$$ = {0.2, 
         0.8}, $CellContext`\[Epsilon]$$ = Rational[1, 20]}, 
      "ControllerVariables" :> {
        Hold[$CellContext`ifMove$$, $CellContext`ifMove$160239$$, False], 
        Hold[$CellContext`progress$$, $CellContext`progress$160240$$, 0], 
        Hold[$CellContext`\[Epsilon]$$, $CellContext`\[Epsilon]$160241$$, 0], 
        
        Hold[$CellContext`s1$$, $CellContext`s1$160242$$, 0], 
        Hold[$CellContext`s2$$, $CellContext`s2$160243$$, 0], 
        Hold[$CellContext`e1$$, $CellContext`e1$160244$$, 0], 
        Hold[$CellContext`e2$$, $CellContext`e2$160245$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`movesAndPositions$, $CellContext`path$, \
$CellContext`path1$, $CellContext`path2$, $CellContext`r$ = 
         1/40, $CellContext`thickness$ = 
         0.005, $CellContext`rotateSolution$, $CellContext`ps1$, \
$CellContext`pe1$, $CellContext`ps2$, $CellContext`pe2$, $CellContext`pm1$, \
$CellContext`pm2$, $CellContext`offset$, $CellContext`c1$ = 
         Blue, $CellContext`c2$ = 
         Magenta, $CellContext`mvNum$, $CellContext`mvFrac$}, \
{$CellContext`ps1$, $CellContext`pe1$, $CellContext`ps2$, $CellContext`pe2$} = \
{$CellContext`s1$$, $CellContext`e1$$, $CellContext`s2$$, $CellContext`e2$$}; \
{$CellContext`path$, $CellContext`path1$, $CellContext`path2$} = \
$CellContext`optimal2robotPath[$CellContext`ps1$, $CellContext`ps2$, \
$CellContext`pe1$, $CellContext`pe2$, $CellContext`\[Epsilon]$$]; \
$CellContext`mvNum$ = 
         Floor[$CellContext`progress$$ (Length[$CellContext`path$] - 
            1)]; $CellContext`mvFrac$ = 
         FractionalPart[$CellContext`progress$$ (Length[$CellContext`path$] - 
            1)]; $CellContext`pm2$ = 
         If[$CellContext`mvFrac$ > 0, 
           Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
             Span[1, All]] + $CellContext`mvFrac$ (
             Part[$CellContext`path2$, $CellContext`mvNum$ + 2, 
               Span[1, All]] - 
             Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
              Span[1, All]]), 
           Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
            Span[1, All]]]; $CellContext`pm1$ = 
         If[$CellContext`mvFrac$ > 0, 
           Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
             Span[1, All]] + $CellContext`mvFrac$ (
             Part[$CellContext`path1$, $CellContext`mvNum$ + 2, 
               Span[1, All]] - 
             Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
              Span[1, All]]), 
           Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
            Span[1, All]]]; Graphics[{{
            Darker[Red], 
            Rectangle[(-0.025) {1, 1}, 1.025 {1, 1}]}, {
            Lighter[Gray, 0.8], 
            Rectangle[{0, 0}, {1, 1}]}, {White, 
            
            Rectangle[{$CellContext`\[Epsilon]$$, $CellContext`\[Epsilon]$$}, \
{1 - $CellContext`\[Epsilon]$$, 1 - $CellContext`\[Epsilon]$$}]}, {
            Lighter[Gray, 0.8], 
            Disk[$CellContext`ps2$, $CellContext`\[Epsilon]$$]}, {
            Lighter[Gray, 0.8], 
            Disk[$CellContext`pe2$, $CellContext`\[Epsilon]$$]}, 
           PointSize[0.01], 
           Arrowheads[0.03], 
           Thickness[$CellContext`thickness$], {$CellContext`c1$, {
             Opacity[0.3], Dashed, 
             Arrow[{$CellContext`ps1$, $CellContext`pe1$}]}, 
            Point[$CellContext`ps1$], 
            EdgeForm[
             Directive[$CellContext`c1$, 
              Thickness[$CellContext`thickness$]]], 
            FaceForm[None], 
            
            Rectangle[$CellContext`ps1$ - (2/3) $CellContext`r$ {1, 
              1}, $CellContext`ps1$ + (2/3) $CellContext`r$ {1, 1}], 
            Circle[$CellContext`pe1$, $CellContext`r$]}, {$CellContext`c2$, {
             Opacity[0.3], Dashed, 
             Arrow[{$CellContext`ps2$, $CellContext`pe2$}]}, 
            Point[$CellContext`ps2$], 
            EdgeForm[
             Directive[$CellContext`c2$, 
              Thickness[$CellContext`thickness$]]], 
            FaceForm[None], 
            
            Rectangle[$CellContext`ps2$ - (2/3) $CellContext`r$ {1, 
              1}, $CellContext`ps2$ + (2/3) $CellContext`r$ {1, 1}], 
            Circle[$CellContext`pe2$, $CellContext`r$]}, {$CellContext`c1$, 
            Table[
             Arrow[{
               Part[$CellContext`path1$, $CellContext`i, 
                Span[1, All]], 
               Part[$CellContext`path1$, $CellContext`i + 1, 
                Span[1, All]]}], {$CellContext`i, 1, $CellContext`mvNum$}], 
            Arrow[{
              Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
               Span[1, All]], $CellContext`pm1$}], {
             If[
              Or[
              Part[$CellContext`pm1$, 1] == 0, Part[$CellContext`pm1$, 2] == 
               0, Part[$CellContext`pm1$, 1] == 1, Part[$CellContext`pm1$, 2] == 
               1], {
               Point[$CellContext`pm1$], 
               PointSize[0.005], White, 
               Point[$CellContext`pm1$]}, 
              Point[$CellContext`pm1$]]}}, {$CellContext`c2$, 
            Table[
             Arrow[{
               Part[$CellContext`path2$, $CellContext`i, 
                Span[1, All]], 
               Part[$CellContext`path2$, $CellContext`i + 1, 
                Span[1, All]]}], {$CellContext`i, 1, $CellContext`mvNum$}], 
            Arrow[{
              Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
               Span[1, All]], $CellContext`pm2$}], {
             If[
              Or[
              Part[$CellContext`pm2$, 1] == 0, Part[$CellContext`pm2$, 2] == 
               0, Part[$CellContext`pm2$, 1] == 1, Part[$CellContext`pm2$, 2] == 
               1], {
               Point[$CellContext`pm2$], 
               PointSize[0.005], White, 
               Point[$CellContext`pm2$]}, 
              Point[$CellContext`pm2$]]}}, 
           If[$CellContext`ifMove$$ == True, 
            Inset[
             
             RegionPlot[$CellContext`x < -3, {$CellContext`x, -1, 
               1}, {$CellContext`y, -1, 1}, Epilog -> {{LightBlue, 
                 EdgeForm[Blue], 
                 If[Part[$CellContext`pm1$, 1] < Part[$CellContext`pm2$, 1], 
                  
                  Rectangle[{
                   Part[$CellContext`pm2$, 1] - 1 - 
                    Part[$CellContext`pm1$, 1], Part[$CellContext`pm2$, 2] - 
                    Part[$CellContext`pm1$, 2]}, {1, 0}], 
                  
                  Rectangle[{
                   1 - Part[$CellContext`pm1$, 1] + 
                    Part[$CellContext`pm2$, 1], Part[$CellContext`pm2$, 2] - 
                    Part[$CellContext`pm1$, 2]}, {-1, 0}]]}, {LightGreen, 
                 EdgeForm[Green], 
                 Opacity[0.5], 
                 If[Part[$CellContext`pm1$, 2] > Part[$CellContext`pm2$, 2], 
                  
                  Rectangle[{0, -1}, {
                   Part[$CellContext`pm2$, 1] - Part[$CellContext`pm1$, 1], 1 + 
                    Part[$CellContext`pm2$, 2] - Part[$CellContext`pm1$, 2]}], 
                  
                  Rectangle[{0, 1}, {
                   Part[$CellContext`pm2$, 1] - 
                    Part[$CellContext`pm1$, 1], -(1 + 
                    Part[$CellContext`pm1$, 2] - 
                    Part[$CellContext`pm2$, 2])}]]}, Green, 
                
                Disk[$CellContext`pe2$ - $CellContext`pe1$, 
                 2 $CellContext`r$], 
                Text[
                 Style[
                  StringForm["\[CapitalDelta]r"], FontSize -> 16, Black, 
                  FontFamily -> "Times"], {
                 Part[$CellContext`pm2$, 1] - Part[$CellContext`pm1$, 1] - 
                  0.1, Part[$CellContext`pm2$, 2] - Part[$CellContext`pm1$, 2]
                   - 0.1}], Red, 
                
                Rectangle[$CellContext`pm2$ - $CellContext`pm1$ - (4/
                  3) $CellContext`r$ {1, 
                  1}, $CellContext`pm2$ - $CellContext`pm1$ + (4/
                   3) $CellContext`r$ {1, 1}], 
                Text[
                 Style[
                  StringForm["\[CapitalDelta]g"], FontSize -> 16, Black, 
                  FontFamily -> "Times"], {
                 Part[$CellContext`pe2$, 1] - Part[$CellContext`pe1$, 1] + 
                  0.1, Part[$CellContext`pe2$, 2] - 
                  Part[$CellContext`pe1$, 2] + 0.1}]}, 
              FrameLabel -> {"\[CapitalDelta]x", "\[CapitalDelta]y"}, 
              LabelStyle -> Directive[Black, Bold], ImageSize -> 230], {1.38, 
             0.45}], {
            If[$CellContext`mvNum$ + 1 == 
               Length[$CellContext`path$], {$CellContext`mvNum$ = 
                Length[$CellContext`path$] - 2, $CellContext`mvFrac$ = 1}]; 
             Darker[Red], 
             Text[
              Style[
               StringForm[
               "Move `` of ``", $CellContext`mvNum$ + 1, 
                Length[$CellContext`path$] - 1], FontSize -> 18], {1.4, 0.9}], 
             Text[
              Style[
               StringForm["Total Distance `` ", 
                Round[
                 N[
                  Total[
                   Table[
                    EuclideanDistance[
                    Part[$CellContext`path$, $CellContext`i], {0, 
                    0}], {$CellContext`i, 2, 
                    Length[$CellContext`path$]}]]], 0.01]], FontSize -> 18], {
              1.4, 0.8}], $CellContext`offset$ = {1.55, 0.5} - (1/2) 
               Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                 Span[1, All]]; {
               Opacity[0.3], 
               
               Arrow[{$CellContext`offset$, $CellContext`offset$ + 
                 Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                   Span[1, All]]}]}, 
             
             Point[$CellContext`offset$ + $CellContext`mvFrac$ 
               Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                 Span[1, All]]], 
             
             Arrow[{$CellContext`offset$, $CellContext`offset$ + \
$CellContext`mvFrac$ Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                  Span[1, All]]}]}]}, ImageSize -> 600, 
          PlotRange -> {{-0.05, 1.75}, {-0.05, 1.05}}]], 
      "Specifications" :> {{{$CellContext`ifMove$$, True, 
          "\[CapitalDelta] Configuration Show"}, {True, False}, Appearance -> 
         "Labeled", ControlPlacement -> 1}, 
        Row[{
          Manipulate`Place[1]}], {{$CellContext`progress$$, 1, "Progress"}, 0,
          1, 
         Rational[1, 420], ControlType -> Slider, Appearance -> "Labeled", 
         ControlPlacement -> 2}, {{$CellContext`\[Epsilon]$$, 
          Rational[1, 20], "\[Epsilon]"}, 
         Rational[1, 1000], 
         Rational[1, 10], 
         Rational[1, 1000], ControlType -> Slider, Appearance -> "Labeled", 
         ControlPlacement -> 3}, 
        Row[{
          Manipulate`Place[2], 
          Manipulate`Place[3]}], {{$CellContext`s1$$, {0.95, 0.95}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}, {{$CellContext`s2$$, {0.2, 0.8}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}, {{$CellContext`e1$$, {0.05, 0.95}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}, {{$CellContext`e2$$, {0.33, 0.66}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{649., {240., 245.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`optimal2robotPath[
         Pattern[$CellContext`s1, 
          Blank[]], 
         Pattern[$CellContext`s2, 
          Blank[]], 
         Pattern[$CellContext`g1, 
          Blank[]], 
         Pattern[$CellContext`g2, 
          Blank[]], 
         Pattern[$CellContext`\[Epsilon], 
          Blank[]]] := 
       Module[{$CellContext`optimalPathList, $CellContext`pathToExplore, \
$CellContext`r1, $CellContext`r2, $CellContext`wallMoves, $CellContext`moves, \
$CellContext`pm1, $CellContext`pm2}, $CellContext`pathToExplore = {
           Infinity, $CellContext`s1, $CellContext`s2, {{0, 
            0}}, {$CellContext`s1}, {$CellContext`s2}, 
            False}; $CellContext`optimalPathList = \
{$CellContext`pathToExplore}; 
         While[Part[$CellContext`pathToExplore, 7] != 
           True, $CellContext`r1 = 
            Part[$CellContext`pathToExplore, 2]; $CellContext`r2 = 
            Part[$CellContext`pathToExplore, 3]; $CellContext`moves = 
            Part[$CellContext`pathToExplore, 4]; $CellContext`pm1 = 
            Part[$CellContext`pathToExplore, 5]; $CellContext`pm2 = 
            Part[$CellContext`pathToExplore, 6]; 
           Table[$CellContext`wallMoves = \
$CellContext`wallFrictionMoveDir[$CellContext`dir, $CellContext`r1, \
$CellContext`r2, $CellContext`g1, $CellContext`g2, $CellContext`moves, \
$CellContext`pm1, $CellContext`pm2, $CellContext`\[Epsilon]]; \
$CellContext`optimalPathList = 
              AppendTo[$CellContext`optimalPathList, $CellContext`wallMoves]; 
             Null, {$CellContext`dir, {
              "u", "d", "l", "r"}}]; $CellContext`optimalPathList = 
            SortBy[$CellContext`optimalPathList, 
              First]; $CellContext`pathToExplore = 
            First[$CellContext`optimalPathList]; $CellContext`optimalPathList = 
            Delete[$CellContext`optimalPathList, 1]; Null]; Return[{
            Part[
             Part[$CellContext`optimalPathList, 1], 4], 
            Part[
             Part[$CellContext`optimalPathList, 1], 5], 
            Part[
             Part[$CellContext`optimalPathList, 1], 
             6]}]], $CellContext`wallFrictionMoveDir[
         Pattern[$CellContext`dir, 
          Blank[]], 
         Pattern[$CellContext`s1, 
          Blank[]], 
         Pattern[$CellContext`s2, 
          Blank[]], 
         Pattern[$CellContext`g1, 
          Blank[]], 
         Pattern[$CellContext`g2, 
          Blank[]], 
         Pattern[$CellContext`moves, 
          Blank[]], 
         Pattern[$CellContext`pm1, 
          Blank[]], 
         Pattern[$CellContext`pm2, 
          Blank[]], 
         Pattern[$CellContext`\[Epsilon], 
          Blank[]]] := 
       Module[{$CellContext`\[CapitalDelta]ex, \
$CellContext`\[CapitalDelta]ey, $CellContext`path = $CellContext`moves, \
$CellContext`path1 = $CellContext`pm1, $CellContext`path2 = \
$CellContext`pm2}, {$CellContext`\[CapitalDelta]ex, $CellContext`\
\[CapitalDelta]ey} = ($CellContext`g2 - $CellContext`g1) - ($CellContext`s2 - \
$CellContext`s1); If[
           And[-0.00001 <= $CellContext`\[CapitalDelta]ex <= 0.00001, 
            
            Inequality[-0.00001, LessEqual, $CellContext`\[CapitalDelta]ey, 
             Less, 0.00001]], 
           AppendTo[$CellContext`path, {
             Part[$CellContext`g2, 1] - Part[$CellContext`s2, 1], 
              Part[$CellContext`g2, 2] - Part[$CellContext`s2, 2]}]; 
           AppendTo[$CellContext`path1, $CellContext`g1]; 
           AppendTo[$CellContext`path2, $CellContext`g2]; Return[{
              $CellContext`distanceMoved[$CellContext`path], $CellContext`g1, \
$CellContext`g2, $CellContext`path, $CellContext`path1, $CellContext`path2, 
              True}]]; 
         Module[{$CellContext`r1, $CellContext`r2, \
$CellContext`newPathEntries, $CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st}, 
           If[$CellContext`dir == 
             "u", $CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2, $CellContext`moves, $CellContext`pm1, \
$CellContext`pm2, $CellContext`\[Epsilon]]; Null]; 
           If[$CellContext`dir == 
             "d", {$CellContext`s1t, $CellContext`s2t, $CellContext`g1t, \
$CellContext`g2t} = 
              Map[$CellContext`rotate180, {$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2}]; $CellContext`movest = 
              Map[$CellContext`rotate180inplace, $CellContext`moves]; \
$CellContext`pm1st = 
              Map[$CellContext`rotate180, $CellContext`pm1]; \
$CellContext`pm2st = 
              Map[$CellContext`rotate180, $CellContext`pm2]; \
$CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st, $CellContext`\[Epsilon]]; 
             Part[$CellContext`newPathEntries, 2] = $CellContext`rotate180[
                Part[$CellContext`newPathEntries, 2]]; 
             Part[$CellContext`newPathEntries, 3] = $CellContext`rotate180[
                Part[$CellContext`newPathEntries, 3]]; 
             Part[$CellContext`newPathEntries, 4] = 
              Map[$CellContext`rotate180inplace, 
                Part[$CellContext`newPathEntries, 4]]; 
             Part[$CellContext`newPathEntries, 5] = 
              Map[$CellContext`rotate180, 
                Part[$CellContext`newPathEntries, 5]]; 
             Part[$CellContext`newPathEntries, 6] = 
              Map[$CellContext`rotate180, 
                Part[$CellContext`newPathEntries, 6]]; Null]; 
           If[$CellContext`dir == 
             "r", {$CellContext`s1t, $CellContext`s2t, $CellContext`g1t, \
$CellContext`g2t} = 
              Map[$CellContext`rotate90, {$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2}]; $CellContext`movest = 
              Map[$CellContext`rotate90inplace, $CellContext`moves]; \
$CellContext`pm1st = 
              Map[$CellContext`rotate90, $CellContext`pm1]; \
$CellContext`pm2st = 
              Map[$CellContext`rotate90, $CellContext`pm2]; \
$CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st, $CellContext`\[Epsilon]]; 
             Part[$CellContext`newPathEntries, 2] = $CellContext`rotate270[
                Part[$CellContext`newPathEntries, 2]]; 
             Part[$CellContext`newPathEntries, 3] = $CellContext`rotate270[
                Part[$CellContext`newPathEntries, 3]]; 
             Part[$CellContext`newPathEntries, 4] = 
              Map[$CellContext`rotate270inplace, 
                Part[$CellContext`newPathEntries, 4]]; 
             Part[$CellContext`newPathEntries, 5] = 
              Map[$CellContext`rotate270, 
                Part[$CellContext`newPathEntries, 5]]; 
             Part[$CellContext`newPathEntries, 6] = 
              Map[$CellContext`rotate270, 
                Part[$CellContext`newPathEntries, 6]]]; 
           If[$CellContext`dir == 
             "l", {$CellContext`s1t, $CellContext`s2t, $CellContext`g1t, \
$CellContext`g2t} = 
              Map[$CellContext`rotate270, {$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2}]; $CellContext`movest = 
              Map[$CellContext`rotate270inplace, $CellContext`moves]; \
$CellContext`pm1st = 
              Map[$CellContext`rotate270, $CellContext`pm1]; \
$CellContext`pm2st = 
              Map[$CellContext`rotate270, $CellContext`pm2]; \
$CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st, $CellContext`\[Epsilon]]; 
             Part[$CellContext`newPathEntries, 2] = $CellContext`rotate90[
                Part[$CellContext`newPathEntries, 2]]; 
             Part[$CellContext`newPathEntries, 3] = $CellContext`rotate90[
                Part[$CellContext`newPathEntries, 3]]; 
             Part[$CellContext`newPathEntries, 4] = 
              Map[$CellContext`rotate90inplace, 
                Part[$CellContext`newPathEntries, 4]]; 
             Part[$CellContext`newPathEntries, 5] = Map[$CellContext`rotate90, 
                Part[$CellContext`newPathEntries, 5]]; 
             Part[$CellContext`newPathEntries, 6] = Map[$CellContext`rotate90, 
                Part[$CellContext`newPathEntries, 6]]]; 
           Return[$CellContext`newPathEntries]]], $CellContext`distanceMoved[
         Pattern[$CellContext`moves, 
          Blank[]]] := Total[
         Table[
          
          Norm[$CellContext`m], {$CellContext`m, $CellContext`moves}]], \
$CellContext`wallFrictionMoveUp[
         Pattern[$CellContext`r1in, 
          Blank[]], 
         Pattern[$CellContext`r2in, 
          Blank[]], 
         Pattern[$CellContext`g1in, 
          Blank[]], 
         Pattern[$CellContext`g2in, 
          Blank[]], 
         Pattern[$CellContext`moves, 
          Blank[]], 
         Pattern[$CellContext`pm1, 
          Blank[]], 
         Pattern[$CellContext`pm2, 
          Blank[]], 
         Pattern[$CellContext`\[Epsilon], 
          Blank[]]] := 
       Module[{$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2, $CellContext`\[CapitalDelta]gx, \
$CellContext`\[CapitalDelta]gy, $CellContext`m1, $CellContext`m2, \
$CellContext`r1out, $CellContext`r2out, $CellContext`\[CapitalDelta]tgx, \
$CellContext`\[CapitalDelta]tgy, $CellContext`\[CapitalDelta]ey, \
$CellContext`\[CapitalDelta]ex, $CellContext`L = 
          1, $CellContext`path1 = $CellContext`pm1, $CellContext`path2 = \
$CellContext`pm2, $CellContext`path, $CellContext`isMirrored = 
          False, $CellContext`isFlipped = 
          False}, {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2, $CellContext`isMirrored, $CellContext`isFlipped, \
$CellContext`path} = $CellContext`ensurer1r2[$CellContext`r1in, \
$CellContext`r2in, $CellContext`g1in, $CellContext`g2in, $CellContext`moves]; \
{$CellContext`\[CapitalDelta]gx, $CellContext`\[CapitalDelta]gy} = \
$CellContext`g2 - $CellContext`g1; If[Part[$CellContext`r2, 2] == 1, 
           
           Return[{Infinity, $CellContext`r1, $CellContext`r2, \
$CellContext`path, $CellContext`path1, $CellContext`path2, False}]]; 
         If[Part[$CellContext`r2, 1] - Part[$CellContext`r1, 1] - 
            
            1 > $CellContext`\[CapitalDelta]gx, \
$CellContext`\[CapitalDelta]tgx = 
           Part[$CellContext`r2, 1] - Part[$CellContext`r1, 1] - 
            1, $CellContext`\[CapitalDelta]tgx = \
$CellContext`\[CapitalDelta]gx]; 
         If[$CellContext`\[CapitalDelta]gy > 
           0, $CellContext`\[CapitalDelta]tgy = 
           0, $CellContext`\[CapitalDelta]tgy = \
$CellContext`\[CapitalDelta]gy]; 
         If[$CellContext`\[CapitalDelta]gy < 
           Part[$CellContext`r2, 2] - 
            Part[$CellContext`r1, 2], $CellContext`\[CapitalDelta]tgy = 
           Part[$CellContext`r2, 2] - Part[$CellContext`r1, 2], 
           Null, $CellContext`\[CapitalDelta]tgy = $CellContext`\
\[CapitalDelta]gy]; If[
           And[
           Part[$CellContext`r2, 1] - Part[$CellContext`r1, 1] - 1 + 
             2 $CellContext`\[Epsilon] <= $CellContext`\[CapitalDelta]tgx <= 
            1 - 2 $CellContext`\[Epsilon], 
            Part[$CellContext`r2, 2] - 
             Part[$CellContext`r1, 2] <= $CellContext`\[CapitalDelta]tgy <= 
            0], $CellContext`m1 = {((1 - Part[$CellContext`r1, 2])/(2 - 
               Part[$CellContext`g1, 2] - Part[$CellContext`r1, 2])) (
               Part[$CellContext`g1, 1] - Part[$CellContext`r1, 1]), 1 - 
              Part[$CellContext`r1, 2]}; 
           Null, $CellContext`m1 = {0, 1 - Part[$CellContext`r1, 2]}; Null]; 
         If[Part[$CellContext`r2, 1] + Part[$CellContext`m1, 1] > 1, 
           Part[$CellContext`m1, 1] = 1 - Part[$CellContext`r2, 1]]; 
         If[Part[$CellContext`r1, 1] + Part[$CellContext`m1, 1] < 0, 
           Part[$CellContext`m1, 1] = -Part[$CellContext`r1, 1]]; If[
           And[
           Part[$CellContext`r1, 1] + 
             Part[$CellContext`m1, 1] + $CellContext`\[CapitalDelta]tgx > 
            1, $CellContext`\[CapitalDelta]tgx > 0], 
           SubtractFrom[
            Part[$CellContext`m1, 1], $CellContext`\[CapitalDelta]tgx + 
            Part[$CellContext`r1, 1] + Part[$CellContext`m1, 1] - 1]]; If[
           And[
           Part[$CellContext`r1, 1] + 
             Part[$CellContext`m1, 1] + $CellContext`\[CapitalDelta]tgx < 
            0, $CellContext`\[CapitalDelta]tgx < 0], 
           AddTo[
            Part[$CellContext`m1, 1], Abs[$CellContext`\[CapitalDelta]tgx] - 
            Part[$CellContext`r1, 1] - Part[$CellContext`m1, 1]]]; 
         If[Part[$CellContext`r1, 2] == 1, $CellContext`m1 = {0, 0}, 
           If[Part[$CellContext`m1, 1] == 0, If[
              Or[
              Part[$CellContext`r1, 1] == 1, Part[$CellContext`r2, 1] == 1], 
              SubtractFrom[
               Part[$CellContext`m1, 1], $CellContext`\[Epsilon]]]; If[
              Or[
              Part[$CellContext`r1, 1] == 0, Part[$CellContext`r2, 1] == 0], 
              AddTo[
               Part[$CellContext`m1, 1], $CellContext`\[Epsilon]]]]]; 
         AddTo[$CellContext`r1, $CellContext`m1]; 
         AddTo[$CellContext`r2, $CellContext`m1]; {$CellContext`\
\[CapitalDelta]ex, $CellContext`\[CapitalDelta]ey} = {$CellContext`\
\[CapitalDelta]tgx, $CellContext`\[CapitalDelta]tgy} - ($CellContext`r2 - \
$CellContext`r1); If[$CellContext`\[CapitalDelta]ex >= 0, $CellContext`m2 = {
             
             Min[$CellContext`\[CapitalDelta]tgx - (Part[$CellContext`r2, 1] - 
              Part[$CellContext`r1, 1]), 1 - 
              Part[$CellContext`r2, 1]], $CellContext`\[CapitalDelta]tgy - (
             Part[$CellContext`r2, 2] - 
             Part[$CellContext`r1, 2])}, $CellContext`m2 = {
             
             Max[$CellContext`\[CapitalDelta]tgx - (Part[$CellContext`r2, 1] - 
              Part[$CellContext`r1, 1]), -
              Part[$CellContext`r2, 1]], $CellContext`\[CapitalDelta]tgy - (
             Part[$CellContext`r2, 2] - Part[$CellContext`r1, 2])}]; If[
           And[
           Part[$CellContext`r1, 1] - $CellContext`\[Epsilon]/2 <= 
            Part[$CellContext`r2, 1] + Part[$CellContext`m2, 1] <= 
            Part[$CellContext`r1, 1] + $CellContext`\[Epsilon]/2, 
            Part[$CellContext`r1, 2] == 
            Part[$CellContext`r2, 2] + Part[$CellContext`m2, 2]], 
           If[
           Part[$CellContext`r2, 1] + 
             Part[$CellContext`m2, 1] > $CellContext`L/2, 
            AddTo[
             Part[$CellContext`m2, 1], 
             Part[$CellContext`r1, 1] + $CellContext`\[Epsilon] - 
             Part[$CellContext`r2, 1] - Part[$CellContext`m2, 1]], 
            AddTo[
             Part[$CellContext`m2, 1], 
             Part[$CellContext`r1, 1] - $CellContext`\[Epsilon] - 
             Part[$CellContext`r2, 1] - Part[$CellContext`m2, 1]]]]; 
         If[Part[$CellContext`r2, 2] == 1, $CellContext`m2 = {0, 0}]; 
         If[$CellContext`m1 != {0, 0}, 
           AppendTo[$CellContext`path, $CellContext`m1]; {$CellContext`r1out, \
$CellContext`r2out} = $CellContext`returnr1r2[$CellContext`isFlipped, \
$CellContext`isMirrored, $CellContext`r1, $CellContext`r2]; 
           AppendTo[$CellContext`path1, $CellContext`r1out]; 
           AppendTo[$CellContext`path2, $CellContext`r2out]; Null]; 
         AddTo[$CellContext`r2, $CellContext`m2]; 
         AppendTo[$CellContext`path, $CellContext`m2]; {$CellContext`r1out, \
$CellContext`r2out} = $CellContext`returnr1r2[$CellContext`isFlipped, \
$CellContext`isMirrored, $CellContext`r1, $CellContext`r2]; 
         AppendTo[$CellContext`path1, $CellContext`r1out]; 
         AppendTo[$CellContext`path2, $CellContext`r2out]; 
         If[$CellContext`isMirrored, $CellContext`path = 
            Map[$CellContext`mirrorInplace, $CellContext`path]; Null]; Return[{
            If[
             
             And[-0.00001 < Part[$CellContext`m2, 1] < 0.00001, -0.00001 < 
              Part[$CellContext`m2, 2] < 0.00001], Infinity, 
             $CellContext`distanceMoved[$CellContext`path]], \
$CellContext`r1out, $CellContext`r2out, $CellContext`path, \
$CellContext`path1, $CellContext`path2, False}]], $CellContext`ensurer1r2[
         Pattern[$CellContext`r1in, 
          Blank[]], 
         Pattern[$CellContext`r2in, 
          Blank[]], 
         Pattern[$CellContext`g1in, 
          Blank[]], 
         Pattern[$CellContext`g2in, 
          Blank[]], 
         Pattern[$CellContext`moves, 
          Blank[]]] := 
       Module[{$CellContext`r1, $CellContext`r2, $CellContext`isFlipped, \
$CellContext`isMirrored, $CellContext`g1, $CellContext`g2, \
$CellContext`path}, $CellContext`isFlipped = False; $CellContext`isMirrored = 
          False; If[Part[$CellContext`r1in, 2] < Part[$CellContext`r2in, 2], 
           If[
           Part[$CellContext`r1in, 1] > 
            Part[$CellContext`r2in, 
              1], {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2} = {$CellContext`r2in, $CellContext`r1in, $CellContext`g2in, \
$CellContext`g1in}; $CellContext`isFlipped = 
             True; $CellContext`path = $CellContext`moves, {$CellContext`r1, \
$CellContext`r2, $CellContext`g1, $CellContext`g2} = 
             Map[$CellContext`mirror, {$CellContext`r2in, $CellContext`r1in, \
$CellContext`g2in, $CellContext`g1in}]; $CellContext`path = 
             Map[$CellContext`mirrorInplace, $CellContext`moves]; \
$CellContext`isFlipped = True; $CellContext`isMirrored = True], 
           If[Part[$CellContext`r1in, 1] > 
             Part[$CellContext`r2in, 
               1], {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2} = 
              Map[$CellContext`mirror, {$CellContext`r1in, $CellContext`r2in, \
$CellContext`g1in, $CellContext`g2in}]; $CellContext`path = 
              Map[$CellContext`mirrorInplace, $CellContext`moves]; \
$CellContext`isMirrored = 
              True, {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2} = {$CellContext`r1in, $CellContext`r2in, $CellContext`g1in, \
$CellContext`g2in}; $CellContext`path = $CellContext`moves]; Null]; 
         Return[{$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2, $CellContext`isMirrored, $CellContext`isFlipped, \
$CellContext`path}]], $CellContext`mirror[
         Pattern[$CellContext`r, 
          Blank[]]] := {1 - Part[$CellContext`r, 1], 
         Part[$CellContext`r, 2]}, $CellContext`mirrorInplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {-Part[$CellContext`r, 1], 
         Part[$CellContext`r, 2]}, $CellContext`returnr1r2[
         Pattern[$CellContext`isFlipped, 
          Blank[]], 
         Pattern[$CellContext`isMirrored, 
          Blank[]], 
         Pattern[$CellContext`r1, 
          Blank[]], 
         Pattern[$CellContext`r2, 
          Blank[]]] := 
       Module[{$CellContext`r1out, $CellContext`r2out}, 
         If[$CellContext`isMirrored, 
           
           If[$CellContext`isFlipped, $CellContext`r1out = \
$CellContext`mirror[$CellContext`r2]; $CellContext`r2out = \
$CellContext`mirror[$CellContext`r1], $CellContext`r1out = \
$CellContext`mirror[$CellContext`r1]; $CellContext`r2out = \
$CellContext`mirror[$CellContext`r2]], 
           
           If[$CellContext`isFlipped, $CellContext`r1out = $CellContext`r2; \
$CellContext`r2out = $CellContext`r1, $CellContext`r1out = $CellContext`r1; \
$CellContext`r2out = $CellContext`r2]]; 
         Return[{$CellContext`r1out, $CellContext`r2out}]], \
$CellContext`rotate180[
         Pattern[$CellContext`r, 
          Blank[]]] := {
        1 - Part[$CellContext`r, 1], 1 - 
         Part[$CellContext`r, 2]}, $CellContext`rotate180inplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {-Part[$CellContext`r, 1], -
         Part[$CellContext`r, 2]}, $CellContext`rotate90[
         Pattern[$CellContext`r, 
          Blank[]]] := {
         Part[$CellContext`r, 2], 1 - 
         Part[$CellContext`r, 1]}, $CellContext`rotate90inplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {
         Part[$CellContext`r, 2], -
         Part[$CellContext`r, 1]}, $CellContext`rotate270[
         Pattern[$CellContext`r, 
          Blank[]]] := {1 - Part[$CellContext`r, 2], 
         Part[$CellContext`r, 1]}, $CellContext`rotate270inplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {-Part[$CellContext`r, 2], 
         Part[$CellContext`r, 1]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]], "\[IndentingNewLine]", 
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`e1$$ = {0.001, 0.001}, $CellContext`e2$$ = {
    0.999, 0.999}, $CellContext`ifMove$$ = False, $CellContext`progress$$ = 
    1, $CellContext`s1$$ = {0.999, 0.999}, $CellContext`s2$$ = {0.001, 
    0.001}, $CellContext`\[Epsilon]$$ = Rational[1, 1000], Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`ifMove$$], True, 
       "\[CapitalDelta] Configuration Show"}, {True, False}}, {
      Hold[
       Row[{
         Manipulate`Place[1]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`progress$$], 1, "Progress"}, 0, 1, 
      Rational[1, 420]}, {{
       Hold[$CellContext`\[Epsilon]$$], 
       Rational[1, 20], "\[Epsilon]"}, 
      Rational[1, 1000], 
      Rational[1, 10], 
      Rational[1, 1000]}, {
      Hold[
       Row[{
         Manipulate`Place[2], 
         Manipulate`Place[3]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`s1$$], {0.95, 0.95}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}, {{
       Hold[$CellContext`s2$$], {0.2, 0.8}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}, {{
       Hold[$CellContext`e1$$], {0.05, 0.95}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}, {{
       Hold[$CellContext`e2$$], {0.33, 0.66}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}}, Typeset`size$$ = {
    600., {181., 186.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`ifMove$160239$$ = 
    False, $CellContext`progress$160240$$ = 
    0, $CellContext`\[Epsilon]$160241$$ = 0, $CellContext`s1$160242$$ = 
    0, $CellContext`s2$160243$$ = 0, $CellContext`e1$160244$$ = 
    0, $CellContext`e2$160245$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`e1$$ = {0.05, 0.95}, $CellContext`e2$$ = {
         0.33, 0.66}, $CellContext`ifMove$$ = True, $CellContext`progress$$ = 
        1, $CellContext`s1$$ = {0.95, 0.95}, $CellContext`s2$$ = {0.2, 
         0.8}, $CellContext`\[Epsilon]$$ = Rational[1, 20]}, 
      "ControllerVariables" :> {
        Hold[$CellContext`ifMove$$, $CellContext`ifMove$160239$$, False], 
        Hold[$CellContext`progress$$, $CellContext`progress$160240$$, 0], 
        Hold[$CellContext`\[Epsilon]$$, $CellContext`\[Epsilon]$160241$$, 0], 
        
        Hold[$CellContext`s1$$, $CellContext`s1$160242$$, 0], 
        Hold[$CellContext`s2$$, $CellContext`s2$160243$$, 0], 
        Hold[$CellContext`e1$$, $CellContext`e1$160244$$, 0], 
        Hold[$CellContext`e2$$, $CellContext`e2$160245$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`movesAndPositions$, $CellContext`path$, \
$CellContext`path1$, $CellContext`path2$, $CellContext`r$ = 
         1/40, $CellContext`thickness$ = 
         0.005, $CellContext`rotateSolution$, $CellContext`ps1$, \
$CellContext`pe1$, $CellContext`ps2$, $CellContext`pe2$, $CellContext`pm1$, \
$CellContext`pm2$, $CellContext`offset$, $CellContext`c1$ = 
         Blue, $CellContext`c2$ = 
         Magenta, $CellContext`mvNum$, $CellContext`mvFrac$}, \
{$CellContext`ps1$, $CellContext`pe1$, $CellContext`ps2$, $CellContext`pe2$} = \
{$CellContext`s1$$, $CellContext`e1$$, $CellContext`s2$$, $CellContext`e2$$}; \
{$CellContext`path$, $CellContext`path1$, $CellContext`path2$} = \
$CellContext`optimal2robotPath[$CellContext`ps1$, $CellContext`ps2$, \
$CellContext`pe1$, $CellContext`pe2$, $CellContext`\[Epsilon]$$]; \
$CellContext`mvNum$ = 
         Floor[$CellContext`progress$$ (Length[$CellContext`path$] - 
            1)]; $CellContext`mvFrac$ = 
         FractionalPart[$CellContext`progress$$ (Length[$CellContext`path$] - 
            1)]; $CellContext`pm2$ = 
         If[$CellContext`mvFrac$ > 0, 
           Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
             Span[1, All]] + $CellContext`mvFrac$ (
             Part[$CellContext`path2$, $CellContext`mvNum$ + 2, 
               Span[1, All]] - 
             Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
              Span[1, All]]), 
           Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
            Span[1, All]]]; $CellContext`pm1$ = 
         If[$CellContext`mvFrac$ > 0, 
           Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
             Span[1, All]] + $CellContext`mvFrac$ (
             Part[$CellContext`path1$, $CellContext`mvNum$ + 2, 
               Span[1, All]] - 
             Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
              Span[1, All]]), 
           Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
            Span[1, All]]]; Graphics[{{
            Darker[Red], 
            Rectangle[(-0.025) {1, 1}, 1.025 {1, 1}]}, {
            Lighter[Gray, 0.8], 
            Rectangle[{0, 0}, {1, 1}]}, {White, 
            
            Rectangle[{$CellContext`\[Epsilon]$$, $CellContext`\[Epsilon]$$}, \
{1 - $CellContext`\[Epsilon]$$, 1 - $CellContext`\[Epsilon]$$}]}, {
            Lighter[Gray, 0.8], 
            Disk[$CellContext`ps2$, $CellContext`\[Epsilon]$$]}, {
            Lighter[Gray, 0.8], 
            Disk[$CellContext`pe2$, $CellContext`\[Epsilon]$$]}, 
           PointSize[0.01], 
           Arrowheads[0.03], 
           Thickness[$CellContext`thickness$], {$CellContext`c1$, {
             Opacity[0.3], Dashed, 
             Arrow[{$CellContext`ps1$, $CellContext`pe1$}]}, 
            Point[$CellContext`ps1$], 
            EdgeForm[
             Directive[$CellContext`c1$, 
              Thickness[$CellContext`thickness$]]], 
            FaceForm[None], 
            
            Rectangle[$CellContext`ps1$ - (2/3) $CellContext`r$ {1, 
              1}, $CellContext`ps1$ + (2/3) $CellContext`r$ {1, 1}], 
            Circle[$CellContext`pe1$, $CellContext`r$]}, {$CellContext`c2$, {
             Opacity[0.3], Dashed, 
             Arrow[{$CellContext`ps2$, $CellContext`pe2$}]}, 
            Point[$CellContext`ps2$], 
            EdgeForm[
             Directive[$CellContext`c2$, 
              Thickness[$CellContext`thickness$]]], 
            FaceForm[None], 
            
            Rectangle[$CellContext`ps2$ - (2/3) $CellContext`r$ {1, 
              1}, $CellContext`ps2$ + (2/3) $CellContext`r$ {1, 1}], 
            Circle[$CellContext`pe2$, $CellContext`r$]}, {$CellContext`c1$, 
            Table[
             Arrow[{
               Part[$CellContext`path1$, $CellContext`i, 
                Span[1, All]], 
               Part[$CellContext`path1$, $CellContext`i + 1, 
                Span[1, All]]}], {$CellContext`i, 1, $CellContext`mvNum$}], 
            Arrow[{
              Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
               Span[1, All]], $CellContext`pm1$}], {
             If[
              Or[
              Part[$CellContext`pm1$, 1] == 0, Part[$CellContext`pm1$, 2] == 
               0, Part[$CellContext`pm1$, 1] == 1, Part[$CellContext`pm1$, 2] == 
               1], {
               Point[$CellContext`pm1$], 
               PointSize[0.005], White, 
               Point[$CellContext`pm1$]}, 
              Point[$CellContext`pm1$]]}}, {$CellContext`c2$, 
            Table[
             Arrow[{
               Part[$CellContext`path2$, $CellContext`i, 
                Span[1, All]], 
               Part[$CellContext`path2$, $CellContext`i + 1, 
                Span[1, All]]}], {$CellContext`i, 1, $CellContext`mvNum$}], 
            Arrow[{
              Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
               Span[1, All]], $CellContext`pm2$}], {
             If[
              Or[
              Part[$CellContext`pm2$, 1] == 0, Part[$CellContext`pm2$, 2] == 
               0, Part[$CellContext`pm2$, 1] == 1, Part[$CellContext`pm2$, 2] == 
               1], {
               Point[$CellContext`pm2$], 
               PointSize[0.005], White, 
               Point[$CellContext`pm2$]}, 
              Point[$CellContext`pm2$]]}}, 
           If[$CellContext`ifMove$$ == True, 
            Inset[
             
             RegionPlot[$CellContext`x < -3, {$CellContext`x, -1, 
               1}, {$CellContext`y, -1, 1}, Epilog -> {{LightBlue, 
                 EdgeForm[Blue], 
                 If[Part[$CellContext`pm1$, 1] < Part[$CellContext`pm2$, 1], 
                  
                  Rectangle[{
                   Part[$CellContext`pm2$, 1] - 1 - 
                    Part[$CellContext`pm1$, 1], Part[$CellContext`pm2$, 2] - 
                    Part[$CellContext`pm1$, 2]}, {1, 0}], 
                  
                  Rectangle[{
                   1 - Part[$CellContext`pm1$, 1] + 
                    Part[$CellContext`pm2$, 1], Part[$CellContext`pm2$, 2] - 
                    Part[$CellContext`pm1$, 2]}, {-1, 0}]]}, {LightGreen, 
                 EdgeForm[Green], 
                 Opacity[0.5], 
                 If[Part[$CellContext`pm1$, 2] > Part[$CellContext`pm2$, 2], 
                  
                  Rectangle[{0, -1}, {
                   Part[$CellContext`pm2$, 1] - Part[$CellContext`pm1$, 1], 1 + 
                    Part[$CellContext`pm2$, 2] - Part[$CellContext`pm1$, 2]}], 
                  
                  Rectangle[{0, 1}, {
                   Part[$CellContext`pm2$, 1] - 
                    Part[$CellContext`pm1$, 1], -(1 + 
                    Part[$CellContext`pm1$, 2] - 
                    Part[$CellContext`pm2$, 2])}]]}, Green, 
                
                Disk[$CellContext`pe2$ - $CellContext`pe1$, 
                 2 $CellContext`r$], 
                Text[
                 Style[
                  StringForm["\[CapitalDelta]r"], FontSize -> 16, Black, 
                  FontFamily -> "Times"], {
                 Part[$CellContext`pm2$, 1] - Part[$CellContext`pm1$, 1] - 
                  0.1, Part[$CellContext`pm2$, 2] - 
                  Part[$CellContext`pm1$, 2] - 0.1}], Red, 
                Rectangle[$CellContext`pm2$ - $CellContext`pm1$ - (4/
                  3) $CellContext`r$ {1, 
                  1}, $CellContext`pm2$ - $CellContext`pm1$ + (4/
                   3) $CellContext`r$ {1, 1}], 
                Text[
                 Style[
                  StringForm["\[CapitalDelta]g"], FontSize -> 16, Black, 
                  FontFamily -> "Times"], {
                 Part[$CellContext`pe2$, 1] - Part[$CellContext`pe1$, 1] + 
                  0.1, Part[$CellContext`pe2$, 2] - 
                  Part[$CellContext`pe1$, 2] + 0.1}]}, 
              FrameLabel -> {"\[CapitalDelta]x", "\[CapitalDelta]y"}, 
              LabelStyle -> Directive[Black, Bold], ImageSize -> 230], {1.38, 
             0.45}], {
            If[$CellContext`mvNum$ + 1 == 
               Length[$CellContext`path$], {$CellContext`mvNum$ = 
                Length[$CellContext`path$] - 2, $CellContext`mvFrac$ = 1}]; 
             Darker[Red], 
             Text[
              Style[
               StringForm[
               "Move `` of ``", $CellContext`mvNum$ + 1, 
                Length[$CellContext`path$] - 1], FontSize -> 18], {1.4, 0.9}], 
             Text[
              Style[
               StringForm["Total Distance `` ", 
                Round[
                 N[
                  Total[
                   Table[
                    EuclideanDistance[
                    Part[$CellContext`path$, $CellContext`i], {0, 
                    0}], {$CellContext`i, 2, 
                    Length[$CellContext`path$]}]]], 0.01]], FontSize -> 18], {
              1.4, 0.8}], $CellContext`offset$ = {1.55, 0.5} - (1/2) 
               Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                 Span[1, All]]; {
               Opacity[0.3], 
               
               Arrow[{$CellContext`offset$, $CellContext`offset$ + 
                 Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                   Span[1, All]]}]}, 
             
             Point[$CellContext`offset$ + $CellContext`mvFrac$ 
               Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                 Span[1, All]]], 
             
             Arrow[{$CellContext`offset$, $CellContext`offset$ + \
$CellContext`mvFrac$ Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                  Span[1, All]]}]}]}, ImageSize -> 600, 
          PlotRange -> {{-0.05, 1.75}, {-0.05, 1.05}}]], 
      "Specifications" :> {{{$CellContext`ifMove$$, True, 
          "\[CapitalDelta] Configuration Show"}, {True, False}, Appearance -> 
         "Labeled", ControlPlacement -> 1}, 
        Row[{
          Manipulate`Place[1]}], {{$CellContext`progress$$, 1, "Progress"}, 0,
          1, 
         Rational[1, 420], ControlType -> Slider, Appearance -> "Labeled", 
         ControlPlacement -> 2}, {{$CellContext`\[Epsilon]$$, 
          Rational[1, 20], "\[Epsilon]"}, 
         Rational[1, 1000], 
         Rational[1, 10], 
         Rational[1, 1000], ControlType -> Slider, Appearance -> "Labeled", 
         ControlPlacement -> 3}, 
        Row[{
          Manipulate`Place[2], 
          Manipulate`Place[3]}], {{$CellContext`s1$$, {0.95, 0.95}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}, {{$CellContext`s2$$, {0.2, 0.8}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}, {{$CellContext`e1$$, {0.05, 0.95}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}, {{$CellContext`e2$$, {0.33, 0.66}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{649., {240., 245.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`optimal2robotPath[
         Pattern[$CellContext`s1, 
          Blank[]], 
         Pattern[$CellContext`s2, 
          Blank[]], 
         Pattern[$CellContext`g1, 
          Blank[]], 
         Pattern[$CellContext`g2, 
          Blank[]], 
         Pattern[$CellContext`\[Epsilon], 
          Blank[]]] := 
       Module[{$CellContext`optimalPathList, $CellContext`pathToExplore, \
$CellContext`r1, $CellContext`r2, $CellContext`wallMoves, $CellContext`moves, \
$CellContext`pm1, $CellContext`pm2}, $CellContext`pathToExplore = {
           Infinity, $CellContext`s1, $CellContext`s2, {{0, 
            0}}, {$CellContext`s1}, {$CellContext`s2}, 
            False}; $CellContext`optimalPathList = \
{$CellContext`pathToExplore}; 
         While[Part[$CellContext`pathToExplore, 7] != 
           True, $CellContext`r1 = 
            Part[$CellContext`pathToExplore, 2]; $CellContext`r2 = 
            Part[$CellContext`pathToExplore, 3]; $CellContext`moves = 
            Part[$CellContext`pathToExplore, 4]; $CellContext`pm1 = 
            Part[$CellContext`pathToExplore, 5]; $CellContext`pm2 = 
            Part[$CellContext`pathToExplore, 6]; 
           Table[$CellContext`wallMoves = \
$CellContext`wallFrictionMoveDir[$CellContext`dir, $CellContext`r1, \
$CellContext`r2, $CellContext`g1, $CellContext`g2, $CellContext`moves, \
$CellContext`pm1, $CellContext`pm2, $CellContext`\[Epsilon]]; \
$CellContext`optimalPathList = 
              AppendTo[$CellContext`optimalPathList, $CellContext`wallMoves]; 
             Null, {$CellContext`dir, {
              "u", "d", "l", "r"}}]; $CellContext`optimalPathList = 
            SortBy[$CellContext`optimalPathList, 
              First]; $CellContext`pathToExplore = 
            First[$CellContext`optimalPathList]; $CellContext`optimalPathList = 
            Delete[$CellContext`optimalPathList, 1]; Null]; Return[{
            Part[
             Part[$CellContext`optimalPathList, 1], 4], 
            Part[
             Part[$CellContext`optimalPathList, 1], 5], 
            Part[
             Part[$CellContext`optimalPathList, 1], 
             6]}]], $CellContext`wallFrictionMoveDir[
         Pattern[$CellContext`dir, 
          Blank[]], 
         Pattern[$CellContext`s1, 
          Blank[]], 
         Pattern[$CellContext`s2, 
          Blank[]], 
         Pattern[$CellContext`g1, 
          Blank[]], 
         Pattern[$CellContext`g2, 
          Blank[]], 
         Pattern[$CellContext`moves, 
          Blank[]], 
         Pattern[$CellContext`pm1, 
          Blank[]], 
         Pattern[$CellContext`pm2, 
          Blank[]], 
         Pattern[$CellContext`\[Epsilon], 
          Blank[]]] := 
       Module[{$CellContext`\[CapitalDelta]ex, \
$CellContext`\[CapitalDelta]ey, $CellContext`path = $CellContext`moves, \
$CellContext`path1 = $CellContext`pm1, $CellContext`path2 = \
$CellContext`pm2}, {$CellContext`\[CapitalDelta]ex, $CellContext`\
\[CapitalDelta]ey} = ($CellContext`g2 - $CellContext`g1) - ($CellContext`s2 - \
$CellContext`s1); If[
           And[-0.00001 <= $CellContext`\[CapitalDelta]ex <= 0.00001, 
            
            Inequality[-0.00001, LessEqual, $CellContext`\[CapitalDelta]ey, 
             Less, 0.00001]], 
           AppendTo[$CellContext`path, {
             Part[$CellContext`g2, 1] - Part[$CellContext`s2, 1], 
              Part[$CellContext`g2, 2] - Part[$CellContext`s2, 2]}]; 
           AppendTo[$CellContext`path1, $CellContext`g1]; 
           AppendTo[$CellContext`path2, $CellContext`g2]; Return[{
              $CellContext`distanceMoved[$CellContext`path], $CellContext`g1, \
$CellContext`g2, $CellContext`path, $CellContext`path1, $CellContext`path2, 
              True}]]; 
         Module[{$CellContext`r1, $CellContext`r2, \
$CellContext`newPathEntries, $CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st}, 
           If[$CellContext`dir == 
             "u", $CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2, $CellContext`moves, $CellContext`pm1, \
$CellContext`pm2, $CellContext`\[Epsilon]]; Null]; 
           If[$CellContext`dir == 
             "d", {$CellContext`s1t, $CellContext`s2t, $CellContext`g1t, \
$CellContext`g2t} = 
              Map[$CellContext`rotate180, {$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2}]; $CellContext`movest = 
              Map[$CellContext`rotate180inplace, $CellContext`moves]; \
$CellContext`pm1st = 
              Map[$CellContext`rotate180, $CellContext`pm1]; \
$CellContext`pm2st = 
              Map[$CellContext`rotate180, $CellContext`pm2]; \
$CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st, $CellContext`\[Epsilon]]; 
             Part[$CellContext`newPathEntries, 2] = $CellContext`rotate180[
                Part[$CellContext`newPathEntries, 2]]; 
             Part[$CellContext`newPathEntries, 3] = $CellContext`rotate180[
                Part[$CellContext`newPathEntries, 3]]; 
             Part[$CellContext`newPathEntries, 4] = 
              Map[$CellContext`rotate180inplace, 
                Part[$CellContext`newPathEntries, 4]]; 
             Part[$CellContext`newPathEntries, 5] = 
              Map[$CellContext`rotate180, 
                Part[$CellContext`newPathEntries, 5]]; 
             Part[$CellContext`newPathEntries, 6] = 
              Map[$CellContext`rotate180, 
                Part[$CellContext`newPathEntries, 6]]; Null]; 
           If[$CellContext`dir == 
             "r", {$CellContext`s1t, $CellContext`s2t, $CellContext`g1t, \
$CellContext`g2t} = 
              Map[$CellContext`rotate90, {$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2}]; $CellContext`movest = 
              Map[$CellContext`rotate90inplace, $CellContext`moves]; \
$CellContext`pm1st = 
              Map[$CellContext`rotate90, $CellContext`pm1]; \
$CellContext`pm2st = 
              Map[$CellContext`rotate90, $CellContext`pm2]; \
$CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st, $CellContext`\[Epsilon]]; 
             Part[$CellContext`newPathEntries, 2] = $CellContext`rotate270[
                Part[$CellContext`newPathEntries, 2]]; 
             Part[$CellContext`newPathEntries, 3] = $CellContext`rotate270[
                Part[$CellContext`newPathEntries, 3]]; 
             Part[$CellContext`newPathEntries, 4] = 
              Map[$CellContext`rotate270inplace, 
                Part[$CellContext`newPathEntries, 4]]; 
             Part[$CellContext`newPathEntries, 5] = 
              Map[$CellContext`rotate270, 
                Part[$CellContext`newPathEntries, 5]]; 
             Part[$CellContext`newPathEntries, 6] = 
              Map[$CellContext`rotate270, 
                Part[$CellContext`newPathEntries, 6]]]; 
           If[$CellContext`dir == 
             "l", {$CellContext`s1t, $CellContext`s2t, $CellContext`g1t, \
$CellContext`g2t} = 
              Map[$CellContext`rotate270, {$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2}]; $CellContext`movest = 
              Map[$CellContext`rotate270inplace, $CellContext`moves]; \
$CellContext`pm1st = 
              Map[$CellContext`rotate270, $CellContext`pm1]; \
$CellContext`pm2st = 
              Map[$CellContext`rotate270, $CellContext`pm2]; \
$CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st, $CellContext`\[Epsilon]]; 
             Part[$CellContext`newPathEntries, 2] = $CellContext`rotate90[
                Part[$CellContext`newPathEntries, 2]]; 
             Part[$CellContext`newPathEntries, 3] = $CellContext`rotate90[
                Part[$CellContext`newPathEntries, 3]]; 
             Part[$CellContext`newPathEntries, 4] = 
              Map[$CellContext`rotate90inplace, 
                Part[$CellContext`newPathEntries, 4]]; 
             Part[$CellContext`newPathEntries, 5] = Map[$CellContext`rotate90, 
                Part[$CellContext`newPathEntries, 5]]; 
             Part[$CellContext`newPathEntries, 6] = Map[$CellContext`rotate90, 
                Part[$CellContext`newPathEntries, 6]]]; 
           Return[$CellContext`newPathEntries]]], $CellContext`distanceMoved[
         Pattern[$CellContext`moves, 
          Blank[]]] := Total[
         Table[
          
          Norm[$CellContext`m], {$CellContext`m, $CellContext`moves}]], \
$CellContext`wallFrictionMoveUp[
         Pattern[$CellContext`r1in, 
          Blank[]], 
         Pattern[$CellContext`r2in, 
          Blank[]], 
         Pattern[$CellContext`g1in, 
          Blank[]], 
         Pattern[$CellContext`g2in, 
          Blank[]], 
         Pattern[$CellContext`moves, 
          Blank[]], 
         Pattern[$CellContext`pm1, 
          Blank[]], 
         Pattern[$CellContext`pm2, 
          Blank[]], 
         Pattern[$CellContext`\[Epsilon], 
          Blank[]]] := 
       Module[{$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2, $CellContext`\[CapitalDelta]gx, \
$CellContext`\[CapitalDelta]gy, $CellContext`m1, $CellContext`m2, \
$CellContext`r1out, $CellContext`r2out, $CellContext`\[CapitalDelta]tgx, \
$CellContext`\[CapitalDelta]tgy, $CellContext`\[CapitalDelta]ey, \
$CellContext`\[CapitalDelta]ex, $CellContext`L = 
          1, $CellContext`path1 = $CellContext`pm1, $CellContext`path2 = \
$CellContext`pm2, $CellContext`path, $CellContext`isMirrored = 
          False, $CellContext`isFlipped = 
          False}, {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2, $CellContext`isMirrored, $CellContext`isFlipped, \
$CellContext`path} = $CellContext`ensurer1r2[$CellContext`r1in, \
$CellContext`r2in, $CellContext`g1in, $CellContext`g2in, $CellContext`moves]; \
{$CellContext`\[CapitalDelta]gx, $CellContext`\[CapitalDelta]gy} = \
$CellContext`g2 - $CellContext`g1; If[Part[$CellContext`r2, 2] == 1, 
           
           Return[{Infinity, $CellContext`r1, $CellContext`r2, \
$CellContext`path, $CellContext`path1, $CellContext`path2, False}]]; 
         If[Part[$CellContext`r2, 1] - Part[$CellContext`r1, 1] - 
            1 > $CellContext`\[CapitalDelta]gx, \
$CellContext`\[CapitalDelta]tgx = 
           Part[$CellContext`r2, 1] - Part[$CellContext`r1, 1] - 
            
            1, $CellContext`\[CapitalDelta]tgx = \
$CellContext`\[CapitalDelta]gx]; 
         If[$CellContext`\[CapitalDelta]gy > 
           0, $CellContext`\[CapitalDelta]tgy = 
           0, $CellContext`\[CapitalDelta]tgy = \
$CellContext`\[CapitalDelta]gy]; 
         If[$CellContext`\[CapitalDelta]gy < 
           Part[$CellContext`r2, 2] - 
            Part[$CellContext`r1, 2], $CellContext`\[CapitalDelta]tgy = 
           Part[$CellContext`r2, 2] - Part[$CellContext`r1, 2], 
           Null, $CellContext`\[CapitalDelta]tgy = $CellContext`\
\[CapitalDelta]gy]; If[
           And[
           Part[$CellContext`r2, 1] - Part[$CellContext`r1, 1] - 1 + 
             2 $CellContext`\[Epsilon] <= $CellContext`\[CapitalDelta]tgx <= 
            1 - 2 $CellContext`\[Epsilon], 
            Part[$CellContext`r2, 2] - 
             Part[$CellContext`r1, 2] <= $CellContext`\[CapitalDelta]tgy <= 
            0], $CellContext`m1 = {((1 - Part[$CellContext`r1, 2])/(2 - 
               Part[$CellContext`g1, 2] - Part[$CellContext`r1, 2])) (
               Part[$CellContext`g1, 1] - Part[$CellContext`r1, 1]), 1 - 
              Part[$CellContext`r1, 2]}; 
           Null, $CellContext`m1 = {0, 1 - Part[$CellContext`r1, 2]}; Null]; 
         If[Part[$CellContext`r2, 1] + Part[$CellContext`m1, 1] > 1, 
           Part[$CellContext`m1, 1] = 1 - Part[$CellContext`r2, 1]]; 
         If[Part[$CellContext`r1, 1] + Part[$CellContext`m1, 1] < 0, 
           Part[$CellContext`m1, 1] = -Part[$CellContext`r1, 1]]; If[
           And[
           Part[$CellContext`r1, 1] + 
             Part[$CellContext`m1, 1] + $CellContext`\[CapitalDelta]tgx > 
            1, $CellContext`\[CapitalDelta]tgx > 0], 
           SubtractFrom[
            Part[$CellContext`m1, 1], $CellContext`\[CapitalDelta]tgx + 
            Part[$CellContext`r1, 1] + Part[$CellContext`m1, 1] - 1]]; If[
           And[
           Part[$CellContext`r1, 1] + 
             Part[$CellContext`m1, 1] + $CellContext`\[CapitalDelta]tgx < 
            0, $CellContext`\[CapitalDelta]tgx < 0], 
           AddTo[
            Part[$CellContext`m1, 1], Abs[$CellContext`\[CapitalDelta]tgx] - 
            Part[$CellContext`r1, 1] - Part[$CellContext`m1, 1]]]; 
         If[Part[$CellContext`r1, 2] == 1, $CellContext`m1 = {0, 0}, 
           If[Part[$CellContext`m1, 1] == 0, If[
              Or[
              Part[$CellContext`r1, 1] == 1, Part[$CellContext`r2, 1] == 1], 
              SubtractFrom[
               Part[$CellContext`m1, 1], $CellContext`\[Epsilon]]]; If[
              Or[
              Part[$CellContext`r1, 1] == 0, Part[$CellContext`r2, 1] == 0], 
              AddTo[
               Part[$CellContext`m1, 1], $CellContext`\[Epsilon]]]]]; 
         AddTo[$CellContext`r1, $CellContext`m1]; 
         AddTo[$CellContext`r2, $CellContext`m1]; {$CellContext`\
\[CapitalDelta]ex, $CellContext`\[CapitalDelta]ey} = {$CellContext`\
\[CapitalDelta]tgx, $CellContext`\[CapitalDelta]tgy} - ($CellContext`r2 - \
$CellContext`r1); If[$CellContext`\[CapitalDelta]ex >= 0, $CellContext`m2 = {
             
             Min[$CellContext`\[CapitalDelta]tgx - (Part[$CellContext`r2, 1] - 
              Part[$CellContext`r1, 1]), 1 - 
              Part[$CellContext`r2, 1]], $CellContext`\[CapitalDelta]tgy - (
             Part[$CellContext`r2, 2] - 
             Part[$CellContext`r1, 2])}, $CellContext`m2 = {
             
             Max[$CellContext`\[CapitalDelta]tgx - (Part[$CellContext`r2, 1] - 
              Part[$CellContext`r1, 1]), -
              Part[$CellContext`r2, 1]], $CellContext`\[CapitalDelta]tgy - (
             Part[$CellContext`r2, 2] - Part[$CellContext`r1, 2])}]; If[
           And[
           Part[$CellContext`r1, 1] - $CellContext`\[Epsilon]/2 <= 
            Part[$CellContext`r2, 1] + Part[$CellContext`m2, 1] <= 
            Part[$CellContext`r1, 1] + $CellContext`\[Epsilon]/2, 
            Part[$CellContext`r1, 2] == 
            Part[$CellContext`r2, 2] + Part[$CellContext`m2, 2]], 
           If[
           Part[$CellContext`r2, 1] + 
             Part[$CellContext`m2, 1] > $CellContext`L/2, 
            AddTo[
             Part[$CellContext`m2, 1], 
             Part[$CellContext`r1, 1] + $CellContext`\[Epsilon] - 
             Part[$CellContext`r2, 1] - Part[$CellContext`m2, 1]], 
            AddTo[
             Part[$CellContext`m2, 1], 
             Part[$CellContext`r1, 1] - $CellContext`\[Epsilon] - 
             Part[$CellContext`r2, 1] - Part[$CellContext`m2, 1]]]]; 
         If[Part[$CellContext`r2, 2] == 1, $CellContext`m2 = {0, 0}]; 
         If[$CellContext`m1 != {0, 0}, 
           AppendTo[$CellContext`path, $CellContext`m1]; {$CellContext`r1out, \
$CellContext`r2out} = $CellContext`returnr1r2[$CellContext`isFlipped, \
$CellContext`isMirrored, $CellContext`r1, $CellContext`r2]; 
           AppendTo[$CellContext`path1, $CellContext`r1out]; 
           AppendTo[$CellContext`path2, $CellContext`r2out]; Null]; 
         AddTo[$CellContext`r2, $CellContext`m2]; 
         AppendTo[$CellContext`path, $CellContext`m2]; {$CellContext`r1out, \
$CellContext`r2out} = $CellContext`returnr1r2[$CellContext`isFlipped, \
$CellContext`isMirrored, $CellContext`r1, $CellContext`r2]; 
         AppendTo[$CellContext`path1, $CellContext`r1out]; 
         AppendTo[$CellContext`path2, $CellContext`r2out]; 
         If[$CellContext`isMirrored, $CellContext`path = 
            Map[$CellContext`mirrorInplace, $CellContext`path]; Null]; Return[{
            If[
             
             And[-0.00001 < Part[$CellContext`m2, 1] < 0.00001, -0.00001 < 
              Part[$CellContext`m2, 2] < 0.00001], Infinity, 
             $CellContext`distanceMoved[$CellContext`path]], \
$CellContext`r1out, $CellContext`r2out, $CellContext`path, \
$CellContext`path1, $CellContext`path2, False}]], $CellContext`ensurer1r2[
         Pattern[$CellContext`r1in, 
          Blank[]], 
         Pattern[$CellContext`r2in, 
          Blank[]], 
         Pattern[$CellContext`g1in, 
          Blank[]], 
         Pattern[$CellContext`g2in, 
          Blank[]], 
         Pattern[$CellContext`moves, 
          Blank[]]] := 
       Module[{$CellContext`r1, $CellContext`r2, $CellContext`isFlipped, \
$CellContext`isMirrored, $CellContext`g1, $CellContext`g2, \
$CellContext`path}, $CellContext`isFlipped = False; $CellContext`isMirrored = 
          False; If[Part[$CellContext`r1in, 2] < Part[$CellContext`r2in, 2], 
           If[
           Part[$CellContext`r1in, 1] > 
            Part[$CellContext`r2in, 
              1], {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2} = {$CellContext`r2in, $CellContext`r1in, $CellContext`g2in, \
$CellContext`g1in}; $CellContext`isFlipped = 
             True; $CellContext`path = $CellContext`moves, {$CellContext`r1, \
$CellContext`r2, $CellContext`g1, $CellContext`g2} = 
             Map[$CellContext`mirror, {$CellContext`r2in, $CellContext`r1in, \
$CellContext`g2in, $CellContext`g1in}]; $CellContext`path = 
             Map[$CellContext`mirrorInplace, $CellContext`moves]; \
$CellContext`isFlipped = True; $CellContext`isMirrored = True], 
           If[Part[$CellContext`r1in, 1] > 
             Part[$CellContext`r2in, 
               1], {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2} = 
              Map[$CellContext`mirror, {$CellContext`r1in, $CellContext`r2in, \
$CellContext`g1in, $CellContext`g2in}]; $CellContext`path = 
              Map[$CellContext`mirrorInplace, $CellContext`moves]; \
$CellContext`isMirrored = 
              True, {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2} = {$CellContext`r1in, $CellContext`r2in, $CellContext`g1in, \
$CellContext`g2in}; $CellContext`path = $CellContext`moves]; Null]; 
         Return[{$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2, $CellContext`isMirrored, $CellContext`isFlipped, \
$CellContext`path}]], $CellContext`mirror[
         Pattern[$CellContext`r, 
          Blank[]]] := {1 - Part[$CellContext`r, 1], 
         Part[$CellContext`r, 2]}, $CellContext`mirrorInplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {-Part[$CellContext`r, 1], 
         Part[$CellContext`r, 2]}, $CellContext`returnr1r2[
         Pattern[$CellContext`isFlipped, 
          Blank[]], 
         Pattern[$CellContext`isMirrored, 
          Blank[]], 
         Pattern[$CellContext`r1, 
          Blank[]], 
         Pattern[$CellContext`r2, 
          Blank[]]] := 
       Module[{$CellContext`r1out, $CellContext`r2out}, 
         If[$CellContext`isMirrored, 
           
           If[$CellContext`isFlipped, $CellContext`r1out = \
$CellContext`mirror[$CellContext`r2]; $CellContext`r2out = \
$CellContext`mirror[$CellContext`r1], $CellContext`r1out = \
$CellContext`mirror[$CellContext`r1]; $CellContext`r2out = \
$CellContext`mirror[$CellContext`r2]], 
           
           If[$CellContext`isFlipped, $CellContext`r1out = $CellContext`r2; \
$CellContext`r2out = $CellContext`r1, $CellContext`r1out = $CellContext`r1; \
$CellContext`r2out = $CellContext`r2]]; 
         Return[{$CellContext`r1out, $CellContext`r2out}]], \
$CellContext`rotate180[
         Pattern[$CellContext`r, 
          Blank[]]] := {
        1 - Part[$CellContext`r, 1], 1 - 
         Part[$CellContext`r, 2]}, $CellContext`rotate180inplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {-Part[$CellContext`r, 1], -
         Part[$CellContext`r, 2]}, $CellContext`rotate90[
         Pattern[$CellContext`r, 
          Blank[]]] := {
         Part[$CellContext`r, 2], 1 - 
         Part[$CellContext`r, 1]}, $CellContext`rotate90inplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {
         Part[$CellContext`r, 2], -
         Part[$CellContext`r, 1]}, $CellContext`rotate270[
         Pattern[$CellContext`r, 
          Blank[]]] := {1 - Part[$CellContext`r, 2], 
         Part[$CellContext`r, 1]}, $CellContext`rotate270inplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {-Part[$CellContext`r, 2], 
         Part[$CellContext`r, 1]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]], "\[IndentingNewLine]", 
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`e1$$ = {0.062, 0.938}, $CellContext`e2$$ = {
    0.937, 0.062}, $CellContext`ifMove$$ = True, $CellContext`progress$$ = 
    1, $CellContext`s1$$ = {0.062, 0.062}, $CellContext`s2$$ = {
    0.9339999999999999, 0.9199999999999999}, $CellContext`\[Epsilon]$$ = 
    Rational[31, 500], Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`ifMove$$], True, 
       "\[CapitalDelta] Configuration Show"}, {True, False}}, {
      Hold[
       Row[{
         Manipulate`Place[1]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`progress$$], 1, "Progress"}, 0, 1, 
      Rational[1, 420]}, {{
       Hold[$CellContext`\[Epsilon]$$], 
       Rational[1, 20], "\[Epsilon]"}, 
      Rational[1, 1000], 
      Rational[1, 10], 
      Rational[1, 1000]}, {
      Hold[
       Row[{
         Manipulate`Place[2], 
         Manipulate`Place[3]}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`s1$$], {0.95, 0.95}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}, {{
       Hold[$CellContext`s2$$], {0.2, 0.8}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}, {{
       Hold[$CellContext`e1$$], {0.05, 0.95}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}, {{
       Hold[$CellContext`e2$$], {0.33, 0.66}}, 
      Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
      Dynamic[{1, 1} - $CellContext`\[Epsilon]$$]}}, Typeset`size$$ = {
    600., {181., 186.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`ifMove$160239$$ = 
    False, $CellContext`progress$160240$$ = 
    0, $CellContext`\[Epsilon]$160241$$ = 0, $CellContext`s1$160242$$ = 
    0, $CellContext`s2$160243$$ = 0, $CellContext`e1$160244$$ = 
    0, $CellContext`e2$160245$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`e1$$ = {0.05, 0.95}, $CellContext`e2$$ = {
         0.33, 0.66}, $CellContext`ifMove$$ = True, $CellContext`progress$$ = 
        1, $CellContext`s1$$ = {0.95, 0.95}, $CellContext`s2$$ = {0.2, 
         0.8}, $CellContext`\[Epsilon]$$ = Rational[1, 20]}, 
      "ControllerVariables" :> {
        Hold[$CellContext`ifMove$$, $CellContext`ifMove$160239$$, False], 
        Hold[$CellContext`progress$$, $CellContext`progress$160240$$, 0], 
        Hold[$CellContext`\[Epsilon]$$, $CellContext`\[Epsilon]$160241$$, 0], 
        
        Hold[$CellContext`s1$$, $CellContext`s1$160242$$, 0], 
        Hold[$CellContext`s2$$, $CellContext`s2$160243$$, 0], 
        Hold[$CellContext`e1$$, $CellContext`e1$160244$$, 0], 
        Hold[$CellContext`e2$$, $CellContext`e2$160245$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`movesAndPositions$, $CellContext`path$, \
$CellContext`path1$, $CellContext`path2$, $CellContext`r$ = 
         1/40, $CellContext`thickness$ = 
         0.005, $CellContext`rotateSolution$, $CellContext`ps1$, \
$CellContext`pe1$, $CellContext`ps2$, $CellContext`pe2$, $CellContext`pm1$, \
$CellContext`pm2$, $CellContext`offset$, $CellContext`c1$ = 
         Blue, $CellContext`c2$ = 
         Magenta, $CellContext`mvNum$, $CellContext`mvFrac$}, \
{$CellContext`ps1$, $CellContext`pe1$, $CellContext`ps2$, $CellContext`pe2$} = \
{$CellContext`s1$$, $CellContext`e1$$, $CellContext`s2$$, $CellContext`e2$$}; \
{$CellContext`path$, $CellContext`path1$, $CellContext`path2$} = \
$CellContext`optimal2robotPath[$CellContext`ps1$, $CellContext`ps2$, \
$CellContext`pe1$, $CellContext`pe2$, $CellContext`\[Epsilon]$$]; \
$CellContext`mvNum$ = 
         Floor[$CellContext`progress$$ (Length[$CellContext`path$] - 
            1)]; $CellContext`mvFrac$ = 
         FractionalPart[$CellContext`progress$$ (Length[$CellContext`path$] - 
            1)]; $CellContext`pm2$ = 
         If[$CellContext`mvFrac$ > 0, 
           Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
             Span[1, All]] + $CellContext`mvFrac$ (
             Part[$CellContext`path2$, $CellContext`mvNum$ + 2, 
               Span[1, All]] - 
             Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
              Span[1, All]]), 
           Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
            Span[1, All]]]; $CellContext`pm1$ = 
         If[$CellContext`mvFrac$ > 0, 
           Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
             Span[1, All]] + $CellContext`mvFrac$ (
             Part[$CellContext`path1$, $CellContext`mvNum$ + 2, 
               Span[1, All]] - 
             Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
              Span[1, All]]), 
           Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
            Span[1, All]]]; Graphics[{{
            Darker[Red], 
            Rectangle[(-0.025) {1, 1}, 1.025 {1, 1}]}, {
            Lighter[Gray, 0.8], 
            Rectangle[{0, 0}, {1, 1}]}, {White, 
            
            Rectangle[{$CellContext`\[Epsilon]$$, $CellContext`\[Epsilon]$$}, \
{1 - $CellContext`\[Epsilon]$$, 1 - $CellContext`\[Epsilon]$$}]}, {
            Lighter[Gray, 0.8], 
            Disk[$CellContext`ps2$, $CellContext`\[Epsilon]$$]}, {
            Lighter[Gray, 0.8], 
            Disk[$CellContext`pe2$, $CellContext`\[Epsilon]$$]}, 
           PointSize[0.01], 
           Arrowheads[0.03], 
           Thickness[$CellContext`thickness$], {$CellContext`c1$, {
             Opacity[0.3], Dashed, 
             Arrow[{$CellContext`ps1$, $CellContext`pe1$}]}, 
            Point[$CellContext`ps1$], 
            EdgeForm[
             Directive[$CellContext`c1$, 
              Thickness[$CellContext`thickness$]]], 
            FaceForm[None], 
            Rectangle[$CellContext`ps1$ - (2/3) $CellContext`r$ {1, 
              1}, $CellContext`ps1$ + (2/3) $CellContext`r$ {1, 1}], 
            Circle[$CellContext`pe1$, $CellContext`r$]}, {$CellContext`c2$, {
             Opacity[0.3], Dashed, 
             Arrow[{$CellContext`ps2$, $CellContext`pe2$}]}, 
            Point[$CellContext`ps2$], 
            EdgeForm[
             Directive[$CellContext`c2$, 
              Thickness[$CellContext`thickness$]]], 
            FaceForm[None], 
            
            Rectangle[$CellContext`ps2$ - (2/3) $CellContext`r$ {1, 
              1}, $CellContext`ps2$ + (2/3) $CellContext`r$ {1, 1}], 
            Circle[$CellContext`pe2$, $CellContext`r$]}, {$CellContext`c1$, 
            Table[
             Arrow[{
               Part[$CellContext`path1$, $CellContext`i, 
                Span[1, All]], 
               Part[$CellContext`path1$, $CellContext`i + 1, 
                Span[1, All]]}], {$CellContext`i, 1, $CellContext`mvNum$}], 
            Arrow[{
              Part[$CellContext`path1$, $CellContext`mvNum$ + 1, 
               Span[1, All]], $CellContext`pm1$}], {
             If[
              Or[
              Part[$CellContext`pm1$, 1] == 0, Part[$CellContext`pm1$, 2] == 
               0, Part[$CellContext`pm1$, 1] == 1, Part[$CellContext`pm1$, 2] == 
               1], {
               Point[$CellContext`pm1$], 
               PointSize[0.005], White, 
               Point[$CellContext`pm1$]}, 
              Point[$CellContext`pm1$]]}}, {$CellContext`c2$, 
            Table[
             Arrow[{
               Part[$CellContext`path2$, $CellContext`i, 
                Span[1, All]], 
               Part[$CellContext`path2$, $CellContext`i + 1, 
                Span[1, All]]}], {$CellContext`i, 1, $CellContext`mvNum$}], 
            Arrow[{
              Part[$CellContext`path2$, $CellContext`mvNum$ + 1, 
               Span[1, All]], $CellContext`pm2$}], {
             If[
              Or[
              Part[$CellContext`pm2$, 1] == 0, Part[$CellContext`pm2$, 2] == 
               0, Part[$CellContext`pm2$, 1] == 1, Part[$CellContext`pm2$, 2] == 
               1], {
               Point[$CellContext`pm2$], 
               PointSize[0.005], White, 
               Point[$CellContext`pm2$]}, 
              Point[$CellContext`pm2$]]}}, 
           If[$CellContext`ifMove$$ == True, 
            Inset[
             
             RegionPlot[$CellContext`x < -3, {$CellContext`x, -1, 
               1}, {$CellContext`y, -1, 1}, Epilog -> {{LightBlue, 
                 EdgeForm[Blue], 
                 If[Part[$CellContext`pm1$, 1] < Part[$CellContext`pm2$, 1], 
                  
                  Rectangle[{
                   Part[$CellContext`pm2$, 1] - 1 - 
                    Part[$CellContext`pm1$, 1], Part[$CellContext`pm2$, 2] - 
                    Part[$CellContext`pm1$, 2]}, {1, 0}], 
                  
                  Rectangle[{
                   1 - Part[$CellContext`pm1$, 1] + 
                    Part[$CellContext`pm2$, 1], Part[$CellContext`pm2$, 2] - 
                    Part[$CellContext`pm1$, 2]}, {-1, 0}]]}, {LightGreen, 
                 EdgeForm[Green], 
                 Opacity[0.5], 
                 If[Part[$CellContext`pm1$, 2] > Part[$CellContext`pm2$, 2], 
                  
                  Rectangle[{0, -1}, {
                   Part[$CellContext`pm2$, 1] - Part[$CellContext`pm1$, 1], 1 + 
                    Part[$CellContext`pm2$, 2] - Part[$CellContext`pm1$, 2]}], 
                  
                  Rectangle[{0, 1}, {
                   Part[$CellContext`pm2$, 1] - 
                    Part[$CellContext`pm1$, 1], -(1 + 
                    Part[$CellContext`pm1$, 2] - 
                    Part[$CellContext`pm2$, 2])}]]}, Green, 
                
                Disk[$CellContext`pe2$ - $CellContext`pe1$, 
                 2 $CellContext`r$], 
                Text[
                 Style[
                  StringForm["\[CapitalDelta]r"], FontSize -> 16, Black, 
                  FontFamily -> "Times"], {
                 Part[$CellContext`pm2$, 1] - Part[$CellContext`pm1$, 1] - 
                  0.1, Part[$CellContext`pm2$, 2] - 
                  Part[$CellContext`pm1$, 2] - 0.1}], Red, 
                
                Rectangle[$CellContext`pm2$ - $CellContext`pm1$ - (4/
                  3) $CellContext`r$ {1, 
                  1}, $CellContext`pm2$ - $CellContext`pm1$ + (4/
                   3) $CellContext`r$ {1, 1}], 
                Text[
                 Style[
                  StringForm["\[CapitalDelta]g"], FontSize -> 16, Black, 
                  FontFamily -> "Times"], {
                 Part[$CellContext`pe2$, 1] - Part[$CellContext`pe1$, 1] + 
                  0.1, Part[$CellContext`pe2$, 2] - 
                  Part[$CellContext`pe1$, 2] + 0.1}]}, 
              FrameLabel -> {"\[CapitalDelta]x", "\[CapitalDelta]y"}, 
              LabelStyle -> Directive[Black, Bold], ImageSize -> 230], {1.38, 
             0.45}], {
            If[$CellContext`mvNum$ + 1 == 
               Length[$CellContext`path$], {$CellContext`mvNum$ = 
                Length[$CellContext`path$] - 2, $CellContext`mvFrac$ = 1}]; 
             Darker[Red], 
             Text[
              Style[
               StringForm[
               "Move `` of ``", $CellContext`mvNum$ + 1, 
                Length[$CellContext`path$] - 1], FontSize -> 18], {1.4, 0.9}], 
             Text[
              Style[
               StringForm["Total Distance `` ", 
                Round[
                 N[
                  Total[
                   Table[
                    EuclideanDistance[
                    Part[$CellContext`path$, $CellContext`i], {0, 
                    0}], {$CellContext`i, 2, 
                    Length[$CellContext`path$]}]]], 0.01]], FontSize -> 18], {
              1.4, 0.8}], $CellContext`offset$ = {1.55, 0.5} - (1/2) 
               Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                 Span[1, All]]; {
               Opacity[0.3], 
               
               Arrow[{$CellContext`offset$, $CellContext`offset$ + 
                 Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                   Span[1, All]]}]}, 
             
             Point[$CellContext`offset$ + $CellContext`mvFrac$ 
               Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                 Span[1, All]]], 
             
             Arrow[{$CellContext`offset$, $CellContext`offset$ + \
$CellContext`mvFrac$ Part[$CellContext`path$, $CellContext`mvNum$ + 2, 
                  Span[1, All]]}]}]}, ImageSize -> 600, 
          PlotRange -> {{-0.05, 1.75}, {-0.05, 1.05}}]], 
      "Specifications" :> {{{$CellContext`ifMove$$, True, 
          "\[CapitalDelta] Configuration Show"}, {True, False}, Appearance -> 
         "Labeled", ControlPlacement -> 1}, 
        Row[{
          Manipulate`Place[1]}], {{$CellContext`progress$$, 1, "Progress"}, 0,
          1, 
         Rational[1, 420], ControlType -> Slider, Appearance -> "Labeled", 
         ControlPlacement -> 2}, {{$CellContext`\[Epsilon]$$, 
          Rational[1, 20], "\[Epsilon]"}, 
         Rational[1, 1000], 
         Rational[1, 10], 
         Rational[1, 1000], ControlType -> Slider, Appearance -> "Labeled", 
         ControlPlacement -> 3}, 
        Row[{
          Manipulate`Place[2], 
          Manipulate`Place[3]}], {{$CellContext`s1$$, {0.95, 0.95}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}, {{$CellContext`s2$$, {0.2, 0.8}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}, {{$CellContext`e1$$, {0.05, 0.95}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}, {{$CellContext`e2$$, {0.33, 0.66}}, 
         Dynamic[{0, 0} + $CellContext`\[Epsilon]$$], 
         Dynamic[{1, 1} - $CellContext`\[Epsilon]$$], ControlType -> Locator, 
         Appearance -> None}}, "Options" :> {}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{649., {240., 245.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`optimal2robotPath[
         Pattern[$CellContext`s1, 
          Blank[]], 
         Pattern[$CellContext`s2, 
          Blank[]], 
         Pattern[$CellContext`g1, 
          Blank[]], 
         Pattern[$CellContext`g2, 
          Blank[]], 
         Pattern[$CellContext`\[Epsilon], 
          Blank[]]] := 
       Module[{$CellContext`optimalPathList, $CellContext`pathToExplore, \
$CellContext`r1, $CellContext`r2, $CellContext`wallMoves, $CellContext`moves, \
$CellContext`pm1, $CellContext`pm2}, $CellContext`pathToExplore = {
           Infinity, $CellContext`s1, $CellContext`s2, {{0, 
            0}}, {$CellContext`s1}, {$CellContext`s2}, 
            False}; $CellContext`optimalPathList = \
{$CellContext`pathToExplore}; 
         While[Part[$CellContext`pathToExplore, 7] != 
           True, $CellContext`r1 = 
            Part[$CellContext`pathToExplore, 2]; $CellContext`r2 = 
            Part[$CellContext`pathToExplore, 3]; $CellContext`moves = 
            Part[$CellContext`pathToExplore, 4]; $CellContext`pm1 = 
            Part[$CellContext`pathToExplore, 5]; $CellContext`pm2 = 
            Part[$CellContext`pathToExplore, 6]; 
           Table[$CellContext`wallMoves = \
$CellContext`wallFrictionMoveDir[$CellContext`dir, $CellContext`r1, \
$CellContext`r2, $CellContext`g1, $CellContext`g2, $CellContext`moves, \
$CellContext`pm1, $CellContext`pm2, $CellContext`\[Epsilon]]; \
$CellContext`optimalPathList = 
              AppendTo[$CellContext`optimalPathList, $CellContext`wallMoves]; 
             Null, {$CellContext`dir, {
              "u", "d", "l", "r"}}]; $CellContext`optimalPathList = 
            SortBy[$CellContext`optimalPathList, 
              First]; $CellContext`pathToExplore = 
            First[$CellContext`optimalPathList]; $CellContext`optimalPathList = 
            Delete[$CellContext`optimalPathList, 1]; Null]; Return[{
            Part[
             Part[$CellContext`optimalPathList, 1], 4], 
            Part[
             Part[$CellContext`optimalPathList, 1], 5], 
            Part[
             Part[$CellContext`optimalPathList, 1], 
             6]}]], $CellContext`wallFrictionMoveDir[
         Pattern[$CellContext`dir, 
          Blank[]], 
         Pattern[$CellContext`s1, 
          Blank[]], 
         Pattern[$CellContext`s2, 
          Blank[]], 
         Pattern[$CellContext`g1, 
          Blank[]], 
         Pattern[$CellContext`g2, 
          Blank[]], 
         Pattern[$CellContext`moves, 
          Blank[]], 
         Pattern[$CellContext`pm1, 
          Blank[]], 
         Pattern[$CellContext`pm2, 
          Blank[]], 
         Pattern[$CellContext`\[Epsilon], 
          Blank[]]] := 
       Module[{$CellContext`\[CapitalDelta]ex, \
$CellContext`\[CapitalDelta]ey, $CellContext`path = $CellContext`moves, \
$CellContext`path1 = $CellContext`pm1, $CellContext`path2 = \
$CellContext`pm2}, {$CellContext`\[CapitalDelta]ex, $CellContext`\
\[CapitalDelta]ey} = ($CellContext`g2 - $CellContext`g1) - ($CellContext`s2 - \
$CellContext`s1); If[
           And[-0.00001 <= $CellContext`\[CapitalDelta]ex <= 0.00001, 
            
            Inequality[-0.00001, LessEqual, $CellContext`\[CapitalDelta]ey, 
             Less, 0.00001]], 
           AppendTo[$CellContext`path, {
             Part[$CellContext`g2, 1] - Part[$CellContext`s2, 1], 
              Part[$CellContext`g2, 2] - Part[$CellContext`s2, 2]}]; 
           AppendTo[$CellContext`path1, $CellContext`g1]; 
           AppendTo[$CellContext`path2, $CellContext`g2]; Return[{
              $CellContext`distanceMoved[$CellContext`path], $CellContext`g1, \
$CellContext`g2, $CellContext`path, $CellContext`path1, $CellContext`path2, 
              True}]]; 
         Module[{$CellContext`r1, $CellContext`r2, \
$CellContext`newPathEntries, $CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st}, 
           If[$CellContext`dir == 
             "u", $CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2, $CellContext`moves, $CellContext`pm1, \
$CellContext`pm2, $CellContext`\[Epsilon]]; Null]; 
           If[$CellContext`dir == 
             "d", {$CellContext`s1t, $CellContext`s2t, $CellContext`g1t, \
$CellContext`g2t} = 
              Map[$CellContext`rotate180, {$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2}]; $CellContext`movest = 
              Map[$CellContext`rotate180inplace, $CellContext`moves]; \
$CellContext`pm1st = 
              Map[$CellContext`rotate180, $CellContext`pm1]; \
$CellContext`pm2st = 
              Map[$CellContext`rotate180, $CellContext`pm2]; \
$CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st, $CellContext`\[Epsilon]]; 
             Part[$CellContext`newPathEntries, 2] = $CellContext`rotate180[
                Part[$CellContext`newPathEntries, 2]]; 
             Part[$CellContext`newPathEntries, 3] = $CellContext`rotate180[
                Part[$CellContext`newPathEntries, 3]]; 
             Part[$CellContext`newPathEntries, 4] = 
              Map[$CellContext`rotate180inplace, 
                Part[$CellContext`newPathEntries, 4]]; 
             Part[$CellContext`newPathEntries, 5] = 
              Map[$CellContext`rotate180, 
                Part[$CellContext`newPathEntries, 5]]; 
             Part[$CellContext`newPathEntries, 6] = 
              Map[$CellContext`rotate180, 
                Part[$CellContext`newPathEntries, 6]]; Null]; 
           If[$CellContext`dir == 
             "r", {$CellContext`s1t, $CellContext`s2t, $CellContext`g1t, \
$CellContext`g2t} = 
              Map[$CellContext`rotate90, {$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2}]; $CellContext`movest = 
              Map[$CellContext`rotate90inplace, $CellContext`moves]; \
$CellContext`pm1st = 
              Map[$CellContext`rotate90, $CellContext`pm1]; \
$CellContext`pm2st = 
              Map[$CellContext`rotate90, $CellContext`pm2]; \
$CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st, $CellContext`\[Epsilon]]; 
             Part[$CellContext`newPathEntries, 2] = $CellContext`rotate270[
                Part[$CellContext`newPathEntries, 2]]; 
             Part[$CellContext`newPathEntries, 3] = $CellContext`rotate270[
                Part[$CellContext`newPathEntries, 3]]; 
             Part[$CellContext`newPathEntries, 4] = 
              Map[$CellContext`rotate270inplace, 
                Part[$CellContext`newPathEntries, 4]]; 
             Part[$CellContext`newPathEntries, 5] = 
              Map[$CellContext`rotate270, 
                Part[$CellContext`newPathEntries, 5]]; 
             Part[$CellContext`newPathEntries, 6] = 
              Map[$CellContext`rotate270, 
                Part[$CellContext`newPathEntries, 6]]]; 
           If[$CellContext`dir == 
             "l", {$CellContext`s1t, $CellContext`s2t, $CellContext`g1t, \
$CellContext`g2t} = 
              Map[$CellContext`rotate270, {$CellContext`s1, $CellContext`s2, \
$CellContext`g1, $CellContext`g2}]; $CellContext`movest = 
              Map[$CellContext`rotate270inplace, $CellContext`moves]; \
$CellContext`pm1st = 
              Map[$CellContext`rotate270, $CellContext`pm1]; \
$CellContext`pm2st = 
              Map[$CellContext`rotate270, $CellContext`pm2]; \
$CellContext`newPathEntries = \
$CellContext`wallFrictionMoveUp[$CellContext`s1t, $CellContext`s2t, \
$CellContext`g1t, $CellContext`g2t, $CellContext`movest, $CellContext`pm1st, \
$CellContext`pm2st, $CellContext`\[Epsilon]]; 
             Part[$CellContext`newPathEntries, 2] = $CellContext`rotate90[
                Part[$CellContext`newPathEntries, 2]]; 
             Part[$CellContext`newPathEntries, 3] = $CellContext`rotate90[
                Part[$CellContext`newPathEntries, 3]]; 
             Part[$CellContext`newPathEntries, 4] = 
              Map[$CellContext`rotate90inplace, 
                Part[$CellContext`newPathEntries, 4]]; 
             Part[$CellContext`newPathEntries, 5] = Map[$CellContext`rotate90, 
                Part[$CellContext`newPathEntries, 5]]; 
             Part[$CellContext`newPathEntries, 6] = Map[$CellContext`rotate90, 
                Part[$CellContext`newPathEntries, 6]]]; 
           Return[$CellContext`newPathEntries]]], $CellContext`distanceMoved[
         Pattern[$CellContext`moves, 
          Blank[]]] := Total[
         Table[
          
          Norm[$CellContext`m], {$CellContext`m, $CellContext`moves}]], \
$CellContext`wallFrictionMoveUp[
         Pattern[$CellContext`r1in, 
          Blank[]], 
         Pattern[$CellContext`r2in, 
          Blank[]], 
         Pattern[$CellContext`g1in, 
          Blank[]], 
         Pattern[$CellContext`g2in, 
          Blank[]], 
         Pattern[$CellContext`moves, 
          Blank[]], 
         Pattern[$CellContext`pm1, 
          Blank[]], 
         Pattern[$CellContext`pm2, 
          Blank[]], 
         Pattern[$CellContext`\[Epsilon], 
          Blank[]]] := 
       Module[{$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2, $CellContext`\[CapitalDelta]gx, \
$CellContext`\[CapitalDelta]gy, $CellContext`m1, $CellContext`m2, \
$CellContext`r1out, $CellContext`r2out, $CellContext`\[CapitalDelta]tgx, \
$CellContext`\[CapitalDelta]tgy, $CellContext`\[CapitalDelta]ey, \
$CellContext`\[CapitalDelta]ex, $CellContext`L = 
          1, $CellContext`path1 = $CellContext`pm1, $CellContext`path2 = \
$CellContext`pm2, $CellContext`path, $CellContext`isMirrored = 
          False, $CellContext`isFlipped = 
          False}, {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2, $CellContext`isMirrored, $CellContext`isFlipped, \
$CellContext`path} = $CellContext`ensurer1r2[$CellContext`r1in, \
$CellContext`r2in, $CellContext`g1in, $CellContext`g2in, $CellContext`moves]; \
{$CellContext`\[CapitalDelta]gx, $CellContext`\[CapitalDelta]gy} = \
$CellContext`g2 - $CellContext`g1; If[Part[$CellContext`r2, 2] == 1, 
           
           Return[{Infinity, $CellContext`r1, $CellContext`r2, \
$CellContext`path, $CellContext`path1, $CellContext`path2, False}]]; 
         If[Part[$CellContext`r2, 1] - Part[$CellContext`r1, 1] - 
            1 > $CellContext`\[CapitalDelta]gx, \
$CellContext`\[CapitalDelta]tgx = 
           Part[$CellContext`r2, 1] - Part[$CellContext`r1, 1] - 
            
            1, $CellContext`\[CapitalDelta]tgx = \
$CellContext`\[CapitalDelta]gx]; 
         If[$CellContext`\[CapitalDelta]gy > 
           0, $CellContext`\[CapitalDelta]tgy = 
           0, $CellContext`\[CapitalDelta]tgy = \
$CellContext`\[CapitalDelta]gy]; 
         If[$CellContext`\[CapitalDelta]gy < 
           Part[$CellContext`r2, 2] - 
            Part[$CellContext`r1, 2], $CellContext`\[CapitalDelta]tgy = 
           Part[$CellContext`r2, 2] - Part[$CellContext`r1, 2], 
           Null, $CellContext`\[CapitalDelta]tgy = $CellContext`\
\[CapitalDelta]gy]; If[
           And[
           Part[$CellContext`r2, 1] - Part[$CellContext`r1, 1] - 1 + 
             2 $CellContext`\[Epsilon] <= $CellContext`\[CapitalDelta]tgx <= 
            1 - 2 $CellContext`\[Epsilon], 
            Part[$CellContext`r2, 2] - 
             Part[$CellContext`r1, 2] <= $CellContext`\[CapitalDelta]tgy <= 
            0], $CellContext`m1 = {((1 - Part[$CellContext`r1, 2])/(2 - 
               Part[$CellContext`g1, 2] - Part[$CellContext`r1, 2])) (
               Part[$CellContext`g1, 1] - Part[$CellContext`r1, 1]), 1 - 
              Part[$CellContext`r1, 2]}; 
           Null, $CellContext`m1 = {0, 1 - Part[$CellContext`r1, 2]}; Null]; 
         If[Part[$CellContext`r2, 1] + Part[$CellContext`m1, 1] > 1, 
           Part[$CellContext`m1, 1] = 1 - Part[$CellContext`r2, 1]]; 
         If[Part[$CellContext`r1, 1] + Part[$CellContext`m1, 1] < 0, 
           Part[$CellContext`m1, 1] = -Part[$CellContext`r1, 1]]; If[
           And[
           Part[$CellContext`r1, 1] + 
             Part[$CellContext`m1, 1] + $CellContext`\[CapitalDelta]tgx > 
            1, $CellContext`\[CapitalDelta]tgx > 0], 
           SubtractFrom[
            Part[$CellContext`m1, 1], $CellContext`\[CapitalDelta]tgx + 
            Part[$CellContext`r1, 1] + Part[$CellContext`m1, 1] - 1]]; If[
           And[
           Part[$CellContext`r1, 1] + 
             Part[$CellContext`m1, 1] + $CellContext`\[CapitalDelta]tgx < 
            0, $CellContext`\[CapitalDelta]tgx < 0], 
           AddTo[
            Part[$CellContext`m1, 1], Abs[$CellContext`\[CapitalDelta]tgx] - 
            Part[$CellContext`r1, 1] - Part[$CellContext`m1, 1]]]; 
         If[Part[$CellContext`r1, 2] == 1, $CellContext`m1 = {0, 0}, 
           If[Part[$CellContext`m1, 1] == 0, If[
              Or[
              Part[$CellContext`r1, 1] == 1, Part[$CellContext`r2, 1] == 1], 
              SubtractFrom[
               Part[$CellContext`m1, 1], $CellContext`\[Epsilon]]]; If[
              Or[
              Part[$CellContext`r1, 1] == 0, Part[$CellContext`r2, 1] == 0], 
              AddTo[
               Part[$CellContext`m1, 1], $CellContext`\[Epsilon]]]]]; 
         AddTo[$CellContext`r1, $CellContext`m1]; 
         AddTo[$CellContext`r2, $CellContext`m1]; {$CellContext`\
\[CapitalDelta]ex, $CellContext`\[CapitalDelta]ey} = {$CellContext`\
\[CapitalDelta]tgx, $CellContext`\[CapitalDelta]tgy} - ($CellContext`r2 - \
$CellContext`r1); If[$CellContext`\[CapitalDelta]ex >= 0, $CellContext`m2 = {
             
             Min[$CellContext`\[CapitalDelta]tgx - (Part[$CellContext`r2, 1] - 
              Part[$CellContext`r1, 1]), 1 - 
              Part[$CellContext`r2, 1]], $CellContext`\[CapitalDelta]tgy - (
             Part[$CellContext`r2, 2] - 
             Part[$CellContext`r1, 2])}, $CellContext`m2 = {
             
             Max[$CellContext`\[CapitalDelta]tgx - (Part[$CellContext`r2, 1] - 
              Part[$CellContext`r1, 1]), -
              Part[$CellContext`r2, 1]], $CellContext`\[CapitalDelta]tgy - (
             Part[$CellContext`r2, 2] - Part[$CellContext`r1, 2])}]; If[
           And[
           Part[$CellContext`r1, 1] - $CellContext`\[Epsilon]/2 <= 
            Part[$CellContext`r2, 1] + Part[$CellContext`m2, 1] <= 
            Part[$CellContext`r1, 1] + $CellContext`\[Epsilon]/2, 
            Part[$CellContext`r1, 2] == 
            Part[$CellContext`r2, 2] + Part[$CellContext`m2, 2]], 
           If[
           Part[$CellContext`r2, 1] + 
             Part[$CellContext`m2, 1] > $CellContext`L/2, 
            AddTo[
             Part[$CellContext`m2, 1], 
             Part[$CellContext`r1, 1] + $CellContext`\[Epsilon] - 
             Part[$CellContext`r2, 1] - Part[$CellContext`m2, 1]], 
            AddTo[
             Part[$CellContext`m2, 1], 
             Part[$CellContext`r1, 1] - $CellContext`\[Epsilon] - 
             Part[$CellContext`r2, 1] - Part[$CellContext`m2, 1]]]]; 
         If[Part[$CellContext`r2, 2] == 1, $CellContext`m2 = {0, 0}]; 
         If[$CellContext`m1 != {0, 0}, 
           AppendTo[$CellContext`path, $CellContext`m1]; {$CellContext`r1out, \
$CellContext`r2out} = $CellContext`returnr1r2[$CellContext`isFlipped, \
$CellContext`isMirrored, $CellContext`r1, $CellContext`r2]; 
           AppendTo[$CellContext`path1, $CellContext`r1out]; 
           AppendTo[$CellContext`path2, $CellContext`r2out]; Null]; 
         AddTo[$CellContext`r2, $CellContext`m2]; 
         AppendTo[$CellContext`path, $CellContext`m2]; {$CellContext`r1out, \
$CellContext`r2out} = $CellContext`returnr1r2[$CellContext`isFlipped, \
$CellContext`isMirrored, $CellContext`r1, $CellContext`r2]; 
         AppendTo[$CellContext`path1, $CellContext`r1out]; 
         AppendTo[$CellContext`path2, $CellContext`r2out]; 
         If[$CellContext`isMirrored, $CellContext`path = 
            Map[$CellContext`mirrorInplace, $CellContext`path]; Null]; Return[{
            If[
             
             And[-0.00001 < Part[$CellContext`m2, 1] < 0.00001, -0.00001 < 
              Part[$CellContext`m2, 2] < 0.00001], Infinity, 
             $CellContext`distanceMoved[$CellContext`path]], \
$CellContext`r1out, $CellContext`r2out, $CellContext`path, \
$CellContext`path1, $CellContext`path2, False}]], $CellContext`ensurer1r2[
         Pattern[$CellContext`r1in, 
          Blank[]], 
         Pattern[$CellContext`r2in, 
          Blank[]], 
         Pattern[$CellContext`g1in, 
          Blank[]], 
         Pattern[$CellContext`g2in, 
          Blank[]], 
         Pattern[$CellContext`moves, 
          Blank[]]] := 
       Module[{$CellContext`r1, $CellContext`r2, $CellContext`isFlipped, \
$CellContext`isMirrored, $CellContext`g1, $CellContext`g2, \
$CellContext`path}, $CellContext`isFlipped = False; $CellContext`isMirrored = 
          False; If[Part[$CellContext`r1in, 2] < Part[$CellContext`r2in, 2], 
           If[
           Part[$CellContext`r1in, 1] > 
            Part[$CellContext`r2in, 
              1], {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2} = {$CellContext`r2in, $CellContext`r1in, $CellContext`g2in, \
$CellContext`g1in}; $CellContext`isFlipped = 
             True; $CellContext`path = $CellContext`moves, {$CellContext`r1, \
$CellContext`r2, $CellContext`g1, $CellContext`g2} = 
             Map[$CellContext`mirror, {$CellContext`r2in, $CellContext`r1in, \
$CellContext`g2in, $CellContext`g1in}]; $CellContext`path = 
             Map[$CellContext`mirrorInplace, $CellContext`moves]; \
$CellContext`isFlipped = True; $CellContext`isMirrored = True], 
           If[Part[$CellContext`r1in, 1] > 
             Part[$CellContext`r2in, 
               1], {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2} = 
              Map[$CellContext`mirror, {$CellContext`r1in, $CellContext`r2in, \
$CellContext`g1in, $CellContext`g2in}]; $CellContext`path = 
              Map[$CellContext`mirrorInplace, $CellContext`moves]; \
$CellContext`isMirrored = 
              True, {$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2} = {$CellContext`r1in, $CellContext`r2in, $CellContext`g1in, \
$CellContext`g2in}; $CellContext`path = $CellContext`moves]; Null]; 
         Return[{$CellContext`r1, $CellContext`r2, $CellContext`g1, \
$CellContext`g2, $CellContext`isMirrored, $CellContext`isFlipped, \
$CellContext`path}]], $CellContext`mirror[
         Pattern[$CellContext`r, 
          Blank[]]] := {1 - Part[$CellContext`r, 1], 
         Part[$CellContext`r, 2]}, $CellContext`mirrorInplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {-Part[$CellContext`r, 1], 
         Part[$CellContext`r, 2]}, $CellContext`returnr1r2[
         Pattern[$CellContext`isFlipped, 
          Blank[]], 
         Pattern[$CellContext`isMirrored, 
          Blank[]], 
         Pattern[$CellContext`r1, 
          Blank[]], 
         Pattern[$CellContext`r2, 
          Blank[]]] := 
       Module[{$CellContext`r1out, $CellContext`r2out}, 
         If[$CellContext`isMirrored, 
           
           If[$CellContext`isFlipped, $CellContext`r1out = \
$CellContext`mirror[$CellContext`r2]; $CellContext`r2out = \
$CellContext`mirror[$CellContext`r1], $CellContext`r1out = \
$CellContext`mirror[$CellContext`r1]; $CellContext`r2out = \
$CellContext`mirror[$CellContext`r2]], 
           
           If[$CellContext`isFlipped, $CellContext`r1out = $CellContext`r2; \
$CellContext`r2out = $CellContext`r1, $CellContext`r1out = $CellContext`r1; \
$CellContext`r2out = $CellContext`r2]]; 
         Return[{$CellContext`r1out, $CellContext`r2out}]], \
$CellContext`rotate180[
         Pattern[$CellContext`r, 
          Blank[]]] := {
        1 - Part[$CellContext`r, 1], 1 - 
         Part[$CellContext`r, 2]}, $CellContext`rotate180inplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {-Part[$CellContext`r, 1], -
         Part[$CellContext`r, 2]}, $CellContext`rotate90[
         Pattern[$CellContext`r, 
          Blank[]]] := {
         Part[$CellContext`r, 2], 1 - 
         Part[$CellContext`r, 1]}, $CellContext`rotate90inplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {
         Part[$CellContext`r, 2], -
         Part[$CellContext`r, 1]}, $CellContext`rotate270[
         Pattern[$CellContext`r, 
          Blank[]]] := {1 - Part[$CellContext`r, 2], 
         Part[$CellContext`r, 1]}, $CellContext`rotate270inplace[
         Pattern[$CellContext`r, 
          Blank[]]] := {-Part[$CellContext`r, 2], 
         Part[$CellContext`r, 1]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]}], "Input",
 CellChangeTimes->{{3.698061789453795*^9, 3.698061790291065*^9}, {
  3.698061855768976*^9, 3.6980618564340277`*^9}},
 CellID->1293151009]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell["\<\
There are driving applications for large populations of tiny robots in \
robotics, biology, and chemistry. These robots often lack onboard \
computation, actuation, and communication. Instead, these \
\[OpenCurlyDoubleQuote]robots\[CloseCurlyDoubleQuote] are particles carrying \
some payload and the particle swarm is controlled by a shared, global control \
input such as a uniform magnetic gradient or electric field. We showed that \
the 2D position of each particle in such a swarm is controllable if the \
workspace contains a single obstacle the size of one particle.
Requiring a small, rigid obstacle suspended in the middle of the workspace is \
a strong constraint, especially in 3D. This demonstration relaxes that \
constraint, and provides position control algorithms that only require \
interactions with the boundaries. Both in vivo and artificial environments \
often have boundaries. We assume that particles in contact with the \
boundaries have zero velocity if the global control input pushes the particle \
into the wall. This demonstration provides a shortest-path algorithm for \
positioning a two-particle swarm. It can show the \[CapitalDelta] \
configuration space or the moves and their distances.\
\>", "DetailNotes",
 CellChangeTimes->{{3.698062241247315*^9, 3.698062241397623*^9}, {
  3.6980622819434032`*^9, 3.698062370342087*^9}},
 CellID->1988098472]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.698062375371256*^9},
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.6980623818344917`*^9},
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell["", "SearchTermsSection"],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[{
 ButtonBox["Effect of Friction on Ball Rolling Down a Ramp",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/\
EffectOfFrictionOnBallRollingDownARamp/"], None},
  ButtonNote->
   "http://demonstrations.wolfram.com/EffectOfFrictionOnBallRollingDownARamp/\
"],
 " (Wolfram Demonstrations Project)\n",
 ButtonBox["Ensemble Control of Robots with Unicycle Kinematics ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/\
EnsembleControlOfRobotsWithUnicycleKinematics/"], None},
  ButtonNote->
   "http://demonstrations.wolfram.com/\
EnsembleControlOfRobotsWithUnicycleKinematics/"],
 "(Wolfram Demonstrations Project)\n",
 ButtonBox["Friction",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://scienceworld.wolfram.com/physics/Friction.html"], None},
  ButtonNote->"http://scienceworld.wolfram.com/physics/Friction.html"],
 " (ScienceWorld)\n",
 ButtonBox["Static Friction",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://scienceworld.wolfram.com/physics/StaticFriction.html"], None},
  
  ButtonNote->"http://scienceworld.wolfram.com/physics/StaticFriction.html"],
 " (ScienceWorld)\n",
 ButtonBox["Static Friction",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/StaticFriction/"], None},
  ButtonNote->"http://demonstrations.wolfram.com/StaticFriction/"],
 " (Wolfram Demonstrations Project)"
}], "RelatedLinks",
 CellChangeTimes->{{3.698062064559826*^9, 3.698062160675844*^9}},
 CellID->1722877409]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell["Contributed by: Shiva Shahrokhi, Aaron T. Becker", "Author",
 CellChangeTimes->{{3.698061976839403*^9, 3.698061982838111*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1162, 687},
WindowMargins->{{10, Automatic}, {Automatic, 0}},
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (September 9, \
2014)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "AutomaticAnimation"->{
  Cell[283119, 6070, 1464, 31, 29, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[284586, 6103, 908, 21, 29, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]},
 "CreateAndDeleteLocators"->{
  Cell[281217, 6018, 637, 15, 29, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "DragLocators"->{
  Cell[280833, 6004, 381, 12, 29, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "GamepadControls"->{
  Cell[282747, 6059, 369, 9, 29, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "ResizeImages"->{
  Cell[279837, 5976, 312, 8, 29, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[280152, 5986, 678, 16, 29, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "SliderZoom"->{
  Cell[281857, 6035, 887, 22, 29, "ControlSuggestions",
   CellTags->"SliderZoom"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"AutomaticAnimation", 287757, 6197},
 {"BookmarkAnimation", 287875, 6200},
 {"CreateAndDeleteLocators", 287997, 6203},
 {"DragLocators", 288114, 6206},
 {"GamepadControls", 288223, 6209},
 {"ResizeImages", 288331, 6212},
 {"RotateAndZoomIn3D", 288441, 6215},
 {"SliderZoom", 288550, 6218}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 36, 0, 76, "DemoTitle"],
Cell[CellGroupData[{
Cell[641, 26, 33, 0, 275, "InitializationSection"],
Cell[677, 28, 61928, 1470, 3797, "Input",
 InitializationCell->True,
 CellID->1075032951]
}, Open  ]],
Cell[CellGroupData[{
Cell[62642, 1503, 29, 0, 243, "ManipulateSection"],
Cell[CellGroupData[{
Cell[62696, 1507, 34601, 820, 1478, "Input",
 CellID->450784076],
Cell[97300, 2329, 36436, 722, 497, "Output",
 CellID->458271926]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[133785, 3057, 36, 0, 181, "ManipulateCaptionSection"],
Cell[133824, 3059, 495, 8, 55, "ManipulateCaption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[134356, 3072, 28, 0, 179, "ThumbnailSection"],
Cell[134387, 3074, 36452, 723, 497, "Output",
 CellID->479992963]
}, Open  ]],
Cell[CellGroupData[{
Cell[170876, 3802, 28, 0, 149, "SnapshotsSection"],
Cell[170907, 3804, 107394, 2137, 1516, InheritFromParent,
 CellID->1293151009]
}, Open  ]],
Cell[CellGroupData[{
Cell[278338, 5946, 26, 0, 357, "DetailsSection"],
Cell[278367, 5948, 1393, 21, 119, "DetailNotes",
 CellID->1988098472]
}, Open  ]],
Cell[CellGroupData[{
Cell[279797, 5974, 37, 0, 131, "ControlSuggestionsSection"],
Cell[279837, 5976, 312, 8, 29, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[280152, 5986, 678, 16, 29, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[280833, 6004, 381, 12, 29, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[281217, 6018, 637, 15, 29, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[281857, 6035, 887, 22, 29, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[282747, 6059, 369, 9, 29, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[283119, 6070, 1464, 31, 29, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[284586, 6103, 908, 21, 29, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[285509, 6127, 30, 0, 165, "SearchTermsSection"],
Cell[CellGroupData[{
Cell[285564, 6131, 31, 0, 137, "RelatedLinksSection"],
Cell[285598, 6133, 1545, 40, 87, "RelatedLinks",
 CellID->1722877409]
}, Open  ]],
Cell[CellGroupData[{
Cell[287180, 6178, 25, 0, 149, "AuthorSection"],
Cell[287208, 6180, 132, 1, 23, "Author"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
