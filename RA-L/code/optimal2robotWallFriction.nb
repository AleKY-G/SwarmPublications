(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     11821,        283]
NotebookOptionsPosition[     11418,        264]
NotebookOutlinePosition[     11776,        280]
CellTagsIndexPosition[     11733,        277]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Idea
Base case 1:  deltaX and deltaY are 0, simply move robots to final position


We build a list that is like an A* algorithm.  Each item in the list has 5 \
entries, and the list is sorted based on the first entry:
{A*pathLength, current_path_length, r1, r2, MOVES}

MOVES is the moves that have been applied to the robots: {{x1,y1},{x2,y2}} \
for a two move sequence.
r1 and r2 are the positions of robot 1 and 2 after applying MOVES to them.
current_path_length is the sum of the euclidean distances of MOVES.

A*pathLength is current_path_length + an admissible heuristic (the maximum \
distance of r1 or r2 from their goal positions).

How the solver works:
Start with start positions s1,s2 and goal positions g1, g2.

optimalPathList = { 
   {max( distance(g1,s1), distance(g2,s2) ), 0, s1,s2, {} }

While forever
  if the first item in optimalPathList, the A*pathLength == \
current_path_length,
we have the optimal solution, so return the MOVES for the first item
else
   Pop  the first item from the list, and then call  {move1, move2, r1new, \
r2new} = wallFrictionMove(direction, r1, r2, g1, g2) for the 4 walls 
if already in contact with one wall, also try a DRIFT_move. Add all the new \
moves to optimalPathList
end while

wallFrictionMove(direction, r1, r2, g1, g2)  should first see if Base case 1: \
is possible, next see if  deltaX and deltaY can be reduced to 0, else try to \
reduce  deltaX and deltaY.   We will need to ensure that the robots never \
overlap, which means that wallFrictionMove might return several options.\
\>", "Subsection",
 CellChangeTimes->{{3.6939406005404882`*^9, 3.693940616693581*^9}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"admissibleHeuristic", "[", 
      RowBox[{"s1_", ",", "s2_", ",", " ", "g1_", ",", "g2_"}], "]"}], ":=", 
     RowBox[{"Max", "[", 
      RowBox[{
       RowBox[{"EuclideanDistance", "[", 
        RowBox[{"g1", ",", "s1"}], "]"}], ",", 
       RowBox[{"EuclideanDistance", "[", 
        RowBox[{"g2", ",", "s2"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"wallFrictionMoveDir", "[", 
      RowBox[{
      "dir_", ",", "r1_", ",", "r2_", ",", "g1_", ",", "g2_", ",", 
       "currentPathLength_", ",", "moves_", ",", "\[Epsilon]_"}], "]"}], ":=", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "moves", " ", "to", " ", "contact", " ", "wall", " ", "in", " ", 
        "direction", " ", "dir"}], ",", " ", 
       RowBox[{
       "then", " ", "moves", " ", "second", " ", "robot", " ", "while", " ", 
        "first", " ", "robot", " ", "is", " ", "touching", " ", 
        RowBox[{"wall", ".", "  ", "If"}], " ", "one", " ", "robot", " ", 
        "is", " ", "already", " ", "touching", " ", "the", " ", "wall", " ", 
        "in", " ", "direction", " ", "dir"}], ",", " ", 
       RowBox[{"just", " ", "moves", " ", "the", " ", "second", " ", 
        RowBox[{"robot", ".", "  ", "Movements"}], " ", "are", " ", "chosen", 
        " ", "to", " ", "minimize", " ", "\[CapitalDelta]x", " ", "and", " ", 
        
        RowBox[{"\[CapitalDelta]y", ".", "  ", "If"}], " ", "robots", " ", 
        "would", " ", "end", " ", "up", " ", "overlapping"}], ",", " ", 
       RowBox[{
        RowBox[{"returns", " ", "multiple", " ", "possibilities"}], " ", "+", 
        
        RowBox[{"/", 
         RowBox[{"-", " ", "\[Epsilon]"}]}]}]}], "  ", "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"if", " ", "move", " ", "is", " ", "up"}], ",", " ", 
       RowBox[{"call", " ", "wallFrictionMoveUp"}], ",", " ", 
       RowBox[{"otherwise", " ", "rotate", " ", "frame"}], ",", " ", 
       RowBox[{"then", " ", "unrotate", " ", "answers"}]}], "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "5"}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"wallFrictionMoveUp", "[", 
      RowBox[{
      "r1_", ",", "r2_", ",", "g1_", ",", "g2_", ",", "currentPathLength_", 
       ",", "moves_", ",", "\[Epsilon]_"}], "]"}], ":="}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"\[IndentingNewLine]", 
             RowBox[{
             "1.", " ", "which", " ", "robot", " ", "hits", " ", "top", " ", 
              RowBox[{"first", "?", "\[IndentingNewLine]", "2."}]}], ")"}], 
            " ", "what", " ", "is", " ", "range", " ", "of", " ", "possible", 
            "  ", "\[CapitalDelta]x", " ", "and", " ", "\[CapitalDelta]y", 
            " ", "that", " ", "can", " ", "be", " ", "achieved", 
            "\[IndentingNewLine]", "3."}], ")"}], " ", "move", " ", "to", " ",
           "minimize", " ", "\[CapitalDelta]x", " ", "and", " ", 
          RowBox[{"\[CapitalDelta]y", ".", "  ", "If"}], " ", 
          "\[CapitalDelta]x", " ", "and", " ", "\[CapitalDelta]y", " ", "can",
           " ", "be", " ", "made", " ", "to", " ", "zero"}], ",", " ", 
         RowBox[{"do", " ", 
          RowBox[{"it", ".", "  ", "Otherwise"}], " ", "minimise", " ", 
          "them", "\[IndentingNewLine]", "4."}]}], ")"}], " ", "update", " ", 
       
       RowBox[{"{", 
        RowBox[{
         RowBox[{"A", "*", "pathLength"}], ",", 
         RowBox[{"current_path", "_length"}], ",", "r1", ",", "r2", ",", 
         "MOVES"}], "}"}]}], " ", "&"}], " ", "store", " ", "it"}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6939408528236227`*^9, 3.693940888469677*^9}, {
  3.6939411305091133`*^9, 3.693941178437819*^9}, {3.693941387876739*^9, 
  3.6939413899004917`*^9}, {3.693941656965639*^9, 3.693941681444265*^9}, {
  3.693941786064103*^9, 3.693941802688339*^9}, {3.693941835689363*^9, 
  3.6939420230542583`*^9}, {3.6939420804095287`*^9, 3.69394220605469*^9}, {
  3.69394230325594*^9, 3.693942380441125*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Function", " ", "that", " ", "does", " ", "an", " ", "A", "*", " ", 
    "search", " ", "to", " ", "find", " ", "the", " ", "shortest", " ", 
    "path"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"optimal2robotPath", "[", 
    RowBox[{"s1_", ",", "s2_", ",", " ", "g1_", ",", "g2_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "optimalPathList", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "*", "pathLength"}], ",", 
        RowBox[{"current_path", "_length"}], ",", "r1", ",", "r2", ",", 
        "MOVES"}], "}"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"optimalPathList", "=", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"admissibleHeuristic", "[", 
           RowBox[{"s1", ",", "s2", ",", " ", "g1", ",", "g2"}], "]"}], "+", 
          "0"}], ",", "0", ",", "s1", ",", "s2", ",", 
         RowBox[{"{", "}"}]}], "}"}], "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"optimalPathList", "\[LeftDoubleBracket]", 
           RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], " ", 
          "\[NotEqual]", " ", 
          RowBox[{"optimalPathList", "\[LeftDoubleBracket]", 
           RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}], " ", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "pathToExplore", ",", "r1", ",", "r2", ",", "wallMoves", ",", 
             "moves", ",", "currentPathLength"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"body", " ", "of", " ", "while", " ", "loop"}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"pathToExplore", " ", "=", " ", 
             RowBox[{"First", "[", "optimalPathList", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"Delete", "[", 
             RowBox[{"optimalPathList", ",", "1"}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"currentPathLength", " ", "=", " ", 
             RowBox[{
             "optimalPathList", "\[LeftDoubleBracket]", "2", 
              "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"r1", " ", "=", " ", 
             RowBox[{
             "optimalPathList", "\[LeftDoubleBracket]", "3", 
              "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"r2", " ", "=", " ", 
             RowBox[{
             "optimalPathList", "\[LeftDoubleBracket]", "4", 
              "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"moves", "=", " ", 
             RowBox[{
             "optimalPathList", "\[LeftDoubleBracket]", "5", 
              "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"Table", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"wallMoves", " ", "=", " ", 
                RowBox[{"wallFrictionMoveDir", "[", 
                 RowBox[{
                 "\"\<u\>\"", ",", "r1", ",", "r2", ",", "g1", ",", "g2", ",",
                   "currentPathLength", ",", "moves"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"optimalPathList", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"optimalPathList", ",", "wallMoves"}], "]"}]}], 
               ";"}], ",", 
              RowBox[{"{", 
               RowBox[{"dir", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "\"\<u\>\"", ",", "\"\<d\>\"", ",", "\"\<l\>\"", ",", 
                  "\"\<r\>\""}], "}"}]}], "}"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"optimalPathList", " ", "=", " ", 
             RowBox[{"Sort", "[", "optimalPathList", "]"}]}], ";"}]}], 
          "\[IndentingNewLine]", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.693940726427231*^9, 3.69394085900465*^9}, {
  3.693940895539198*^9, 3.6939409666319933`*^9}, {3.693941015818716*^9, 
  3.693941070387782*^9}, {3.6939411957594147`*^9, 3.693941207223578*^9}, {
  3.69394124639567*^9, 3.69394141470152*^9}, {3.6939414777790194`*^9, 
  3.693941602916482*^9}, {3.693941719143827*^9, 3.6939417800565577`*^9}, {
  3.693941813999855*^9, 3.69394183001812*^9}}]
}, Open  ]]
},
WindowSize->{808, 619},
WindowMargins->{{36, Automatic}, {16, Automatic}},
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (September 9, \
2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 1645, 39, 919, "Subsection"],
Cell[2228, 63, 4599, 96, 573, "Input",
 InitializationCell->True],
Cell[6830, 161, 4572, 100, 352, "Input"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
